{"version":3,"sources":["webpack:///./node_modules/bootstrapvalidator/dist/js/language/zh_CN.js","webpack:///./src/login.js","webpack:///./node_modules/bootstrapvalidator/dist/js/bootstrapValidator.js","webpack:///./src/js/login.js"],"names":["i18n","$","window","jQuery","fn","bootstrapValidator","extend","base64","default","between","notInclusive","callback","choice","less","more","color","creditCard","cusip","cvv","date","min","max","range","different","digits","ean","emailAddress","file","greaterThan","grid","hex","hexColor","iban","countryNotSupported","country","countries","AD","AE","AL","AO","AT","AZ","BA","BE","BF","BG","BH","BI","BJ","BR","CH","CI","CM","CR","CV","CY","CZ","DE","DK","DO","DZ","EE","ES","FI","FO","FR","GB","GE","GI","GL","GR","GT","HR","HU","IE","IL","IR","IS","IT","JO","KW","KZ","LB","LI","LT","LU","LV","MC","MD","ME","MG","MK","ML","MR","MT","MU","MZ","NL","NO","PK","PL","PS","PT","QA","RO","RS","SA","SE","SI","SK","SM","SN","TN","TR","VG","id","CL","CN","TH","ZA","identical","imei","imo","integer","ip","ipv4","ipv6","isbn","isin","ismn","issn","lessThan","mac","meid","notEmpty","numeric","phone","MA","RU","US","VE","regexp","remote","rtn","sedol","siren","siret","step","stringCase","upper","stringLength","uri","uuid","version","vat","EL","vin","zipCode","CA","SG","module","exports","__WEBPACK_IMPORTED_MODULE_3_jquery___default","a","__webpack_require__","ajax","__WEBPACK_IMPORTED_MODULE_8__js_ajax_js___default","Error","BootstrapValidator","jquery","split","form","options","this","$form","DEFAULT_OPTIONS","$invalidFields","$submitButton","$hiddenButton","STATUS_NOT_VALIDATED","STATUS_VALIDATING","STATUS_INVALID","STATUS_VALID","ieVersion","v","div","document","createElement","all","innerHTML","el","_changeEvent","_submitIfValid","_cacheFields","_init","prototype","constructor","that","autoFocus","attr","container","events","formInit","formError","formSuccess","fieldAdded","fieldRemoved","fieldInit","fieldError","fieldSuccess","fieldStatus","validatorError","validatorSuccess","excluded","feedbackIcons","valid","invalid","validating","group","live","message","onError","onSuccess","submitButtons","threshold","trigger","verbose","fields","field","addClass","elementClass","on","e","preventDefault","validate","find","each","$field","opts","_parseOptions","prependTo","css","display","width","height","isDefaultPrevented","$target","target","$button","is","eq","parent","off","submit","_initField","Event","bv","helpers","call","validator","attrName","enabled","optionName","optionAttrName","optionValue","html5AttrName","html5AttrMap","validators","toLowerCase","enableByHtml5","html5Attributes","onerror","onsuccess","onStatus","selector","emptyOptions","isEmptyObject","getFieldElements","length","validatorName","total","type","updateAll","event","get","tagName","map","item","join","i","$parent","parents","$message","_getMessageContainer","remove","updateStatus","data","html","_getMessage","appendTo","init","$icon","insertAfter","$fieldParent","hasClass","tooltip","popover","getOptions","_exceedThreshold","validateField","element","cssClasses","n","test","_submit","isValid","eventType","_onSuccess","_onError","_isExcluded","excludedAttr","trim","inArray","val","f","_isOptionEnabled","tabId","$tabPane","tab","focus","disableSubmitButtons","defaultSubmit","_onFieldValidated","counter","numValidators","result","not","add","option","disabled","removeAttr","validateResult","stop","reject","resolve","done","$f","response","removeData","updateMessage","undefined","$fields","status","$allErrors","$errors","filter","isValidField","$tab","removeClass","show","isValidContainer","hide","placement","title","content","$container","getInvalidFields","getSubmitButton","getMessages","messages","concat","updateOption","value","addField","removeField","resetField","resetValue","resetForm","revalidateField","enableFieldValidators","getDynamicOption","destroy","end","params","arguments","$this","apply","Array","slice","Constructor","functionName","args","substring","ns","func","pop","context","format","parameters","isArray","replace","year","month","day","notInFuture","isNaN","parseInt","numDays","currentDate","Date","currentYear","getFullYear","currentMonth","getMonth","currentDay","getDate","luhn","mul","prodArr","sum","charAt","mod11And10","check","mod37And36","alphabet","modulus","Math","floor","indexOf","inclusive","_format","isNumeric","minValue","maxValue","parseFloat","blank","dfd","Deferred","numChoices","SUPPORTED_TYPES","KEYWORD_COLORS","types","method","_hex","_hsl","_hsla","_keyword","_rgb","_rgba","cards","AMERICAN_EXPRESS","prefix","DINERS_CLUB","DINERS_CLUB_US","DISCOVER","JCB","LASER","MAESTRO","MASTERCARD","SOLO","UNIONPAY","VISA","substr","toUpperCase","converted","code","charCodeAt","num","ccfield","creditCardField","creditCardType","separator","formats","dateFormat","timeFormat","amOrPm","sections","time","minutes","hours","seconds","minOption","maxOption","parse","_parseDate","getTime","dateSection","timeSection","compareWith","compareValue","weight","multiple","emailRegExp","addresses","_splitEmailAddresses","emailAddresses","quotedFragments","quotedFragmentCount","emailAddressArray","nextEmailAddress","splitEmailAddressFragments","splitEmailAddressFragmentCount","push","j","extension","maxfiles","minfiles","maxsize","minsize","maxtotalsize","mintotalsize","ext","extensions","File","FileList","FileReader","files","totalSize","maxFiles","minFiles","size","name","lastIndexOf","minSize","maxSize","maxTotalSize","minTotalSize","compareTo","compareToValue","REGEX","RegExp","temp","COUNTRY_CODES","_validateJMBG","countryCode","rr","k","_ba","_mk","_me","_rs","_si","_bg","_br","d1","d2","_ch","_cl","_cn","adminDivisionCodes","11","0","1","2","12","13","3","4","5","6","7","8","9","10","14","23","15","22","25","26","28","29","21","24","27","31","32","33","34","16","17","18","35","36","37","41","90","42","43","44","19","20","51","52","53","45","46","50","54","61","62","30","63","64","65","40","71","81","82","provincial","prefectural","county","dob","inRange","rangeDef","_cz","_dk","_ee","_lt","_es","index","_fi","+","-","A","_hr","_ie","getCheckDigit","_is","century","gender","_lv","_nl","_ro","_se","_sk","_sm","_th","_za","validity","badInput","ipv4Regex","ipv6Regex","checksum","chars","c","toString","cd","match","cdCalc","required","isFinite","pattern","url","delay","clearTimeout","headers","runCallback","xhr","dataType","then","fail","abort","JSON","setTimeout","tmp","base","baseValue","mod","x","y","dotX","dotY","precision","m","pow","sign","round","floatMod","case","utf8bytes","maxLength","minLength","utf8Bytes","str","s","utf8Length","allowlocal","protocol","allowLocal","patterns","_at","_be","egn","pnf","cnpj","numbers","pos","_cy","translation","_de","first","dni","nie","cif","_fr","_gb","firstTwo","lastThree","_gr","_el","_hu","_it","_lu","_mt","_no","_pl","_pt","_ru","sum1","weight1","sum2","weight2","_ve","V","E","J","P","G","B","C","D","F","H","K","L","M","N","R","S","T","U","W","X","Y","Z","weights","reminder","firstChar","fifthChar","regexps","ready","username","password","console","log"],"mappings":"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","file":"assets/js/login.422075437fd2bb34f3ce.js","sourcesContent":["var i18n;\n(function ($) {\n    /**\n     * Simplified Chinese language package\n     * Translated by @shamiao\n     */\n    i18n = $.fn.bootstrapValidator.i18n = $.extend(true, $.fn.bootstrapValidator.i18n, {\n        base64: {\n            'default': '请输入有效的Base64编码'\n        },\n        between: {\n            'default': '请输入在 %s 和 %s 之间的数值',\n            notInclusive: '请输入在 %s 和 %s 之间(不含两端)的数值'\n        },\n        callback: {\n            'default': '请输入有效的值'\n        },\n        choice: {\n            'default': '请输入有效的值',\n            less: '请至少选中 %s 个选项',\n            more: '最多只能选中 %s 个选项',\n            between: '请选择 %s 至 %s 个选项'\n        },\n        color: {\n            'default': '请输入有效的颜色值'\n        },\n        creditCard: {\n            'default': '请输入有效的信用卡号码'\n        },\n        cusip: {\n            'default': '请输入有效的美国CUSIP代码'\n        },\n        cvv: {\n            'default': '请输入有效的CVV代码'\n        },\n        date: {\n            'default': '请输入有效的日期', \n            min: '请输入 %s 或之后的日期',\n            max: '请输入 %s 或以前的日期',\n            range: '请输入 %s 和 %s 之间的日期'\n        },\n        different: {\n            'default': '请输入不同的值'\n        },\n        digits: {\n            'default': '请输入有效的数字'\n        },\n        ean: {\n            'default': '请输入有效的EAN商品编码'\n        },\n        emailAddress: {\n            'default': '请输入有效的邮件地址'\n        },\n        file: {\n            'default': '请选择有效的文件'\n        },\n        greaterThan: {\n            'default': '请输入大于等于 %s 的数值',\n            notInclusive: '请输入大于 %s 的数值'\n        },\n        grid: {\n            'default': '请输入有效的GRId编码'\n        },\n        hex: {\n            'default': '请输入有效的16进制数'\n        },\n        hexColor: {\n            'default': '请输入有效的16进制颜色值'\n        },\n        iban: {\n            'default': '请输入有效的IBAN(国际银行账户)号码',\n            countryNotSupported: '不支持 %s 国家或地区',\n            country: '请输入有效的 %s 国家或地区的IBAN(国际银行账户)号码',\n            countries: {\n                AD: '安道​​尔',\n                AE: '阿联酋',\n                AL: '阿尔巴尼亚',\n                AO: '安哥拉',\n                AT: '奥地利',\n                AZ: '阿塞拜疆',\n                BA: '波斯尼亚和黑塞哥维那',\n                BE: '比利时',\n                BF: '布基纳法索',\n                BG: '保加利亚',\n                BH: '巴林',\n                BI: '布隆迪',\n                BJ: '贝宁',\n                BR: '巴西',\n                CH: '瑞士',\n                CI: '科特迪瓦',\n                CM: '喀麦隆',\n                CR: '哥斯达黎加',\n                CV: '佛得角',\n                CY: '塞浦路斯',\n                CZ: '捷克共和国',\n                DE: '德国',\n                DK: '丹麦',\n                DO: '多米尼加共和国',\n                DZ: '阿尔及利亚',\n                EE: '爱沙尼亚',\n                ES: '西班牙',\n                FI: '芬兰',\n                FO: '法罗群岛',\n                FR: '法国',\n                GB: '英国',\n                GE: '格鲁吉亚',\n                GI: '直布罗陀',\n                GL: '格陵兰岛',\n                GR: '希腊',\n                GT: '危地马拉',\n                HR: '克罗地亚',\n                HU: '匈牙利',\n                IE: '爱尔兰',\n                IL: '以色列',\n                IR: '伊朗',\n                IS: '冰岛',\n                IT: '意大利',\n                JO: '约旦',\n                KW: '科威特',\n                KZ: '哈萨克斯坦',\n                LB: '黎巴嫩',\n                LI: '列支敦士登',\n                LT: '立陶宛',\n                LU: '卢森堡',\n                LV: '拉脱维亚',\n                MC: '摩纳哥',\n                MD: '摩尔多瓦',\n                ME: '黑山',\n                MG: '马达加斯加',\n                MK: '马其顿',\n                ML: '马里',\n                MR: '毛里塔尼亚',\n                MT: '马耳他',\n                MU: '毛里求斯',\n                MZ: '莫桑比克',\n                NL: '荷兰',\n                NO: '挪威',\n                PK: '巴基斯坦',\n                PL: '波兰',\n                PS: '巴勒斯坦',\n                PT: '葡萄牙',\n                QA: '卡塔尔',\n                RO: '罗马尼亚',\n                RS: '塞尔维亚',\n                SA: '沙特阿拉伯',\n                SE: '瑞典',\n                SI: '斯洛文尼亚',\n                SK: '斯洛伐克',\n                SM: '圣马力诺',\n                SN: '塞内加尔',\n                TN: '突尼斯',\n                TR: '土耳其',\n                VG: '英属维尔京群岛'\n            }\n        },\n        id: {\n            'default': '请输入有效的身份证件号码',\n            countryNotSupported: '不支持 %s 国家或地区',\n            country: '请输入有效的 %s 国家或地区的身份证件号码',\n            countries: {\n                BA: '波黑',\n                BG: '保加利亚',\n                BR: '巴西',\n                CH: '瑞士',\n                CL: '智利',\n                CN: '中国',\n                CZ: '捷克共和国',\n                DK: '丹麦',\n                EE: '爱沙尼亚',\n                ES: '西班牙',\n                FI: '芬兰',\n                HR: '克罗地亚',\n                IE: '爱尔兰',\n                IS: '冰岛',\n                LT: '立陶宛',\n                LV: '拉脱维亚',\n                ME: '黑山',\n                MK: '马其顿',\n                NL: '荷兰',\n                RO: '罗马尼亚',\n                RS: '塞尔维亚',\n                SE: '瑞典',\n                SI: '斯洛文尼亚',\n                SK: '斯洛伐克',\n                SM: '圣马力诺',\n                TH: '泰国',\n                ZA: '南非'\n            }\n        },\n        identical: {\n            'default': '请输入相同的值'\n        },\n        imei: {\n            'default': '请输入有效的IMEI(手机串号)'\n        },\n        imo: {\n            'default': '请输入有效的国际海事组织(IMO)号码'\n        },\n        integer: {\n            'default': '请输入有效的整数值'\n        },\n        ip: {\n            'default': '请输入有效的IP地址',\n            ipv4: '请输入有效的IPv4地址',\n            ipv6: '请输入有效的IPv6地址'\n        },\n        isbn: {\n            'default': '请输入有效的ISBN(国际标准书号)'\n        },\n        isin: {\n            'default': '请输入有效的ISIN(国际证券编码)'\n        },\n        ismn: {\n            'default': '请输入有效的ISMN(印刷音乐作品编码)'\n        },\n        issn: {\n            'default': '请输入有效的ISSN(国际标准杂志书号)'\n        },\n        lessThan: {\n            'default': '请输入小于等于 %s 的数值',\n            notInclusive: '请输入小于 %s 的数值'\n        },\n        mac: {\n            'default': '请输入有效的MAC物理地址'\n        },\n        meid: {\n            'default': '请输入有效的MEID(移动设备识别码)'\n        },\n        notEmpty: {\n            'default': '请填写必填项目'\n        },\n        numeric: {\n            'default': '请输入有效的数值，允许小数'\n        },\n        phone: {\n            'default': '请输入有效的电话号码',\n            countryNotSupported: '不支持 %s 国家或地区',\n            country: '请输入有效的 %s 国家或地区的电话号码',\n            countries: {\n                BR: '巴西',\n                CN: '中国',\n                CZ: '捷克共和国',\n                DE: '德国',\n                DK: '丹麦',\n                ES: '西班牙',\n                FR: '法国',\n                GB: '英国',\n                MA: '摩洛哥',\n                PK: '巴基斯坦',\n                RO: '罗马尼亚',\n                RU: '俄罗斯',\n                SK: '斯洛伐克',\n                TH: '泰国',\n                US: '美国',\n                VE: '委内瑞拉'\n            }\n        },\n        regexp: {\n            'default': '请输入符合正则表达式限制的值'\n        },\n        remote: {\n            'default': '请输入有效的值'\n        },\n        rtn: {\n            'default': '请输入有效的RTN号码'\n        },\n        sedol: {\n            'default': '请输入有效的SEDOL代码'\n        },\n        siren: {\n            'default': '请输入有效的SIREN号码'\n        },\n        siret: {\n            'default': '请输入有效的SIRET号码'\n        },\n        step: {\n            'default': '请输入在基础值上，增加 %s 的整数倍的数值'\n        },\n        stringCase: {\n            'default': '只能输入小写字母',\n            upper: '只能输入大写字母'\n        },\n        stringLength: {\n            'default': '请输入符合长度限制的值',\n            less: '最多只能输入 %s 个字符',\n            more: '需要输入至少 %s 个字符',\n            between: '请输入 %s 至 %s 个字符'\n        },\n        uri: {\n            'default': '请输入一个有效的URL地址'\n        },\n        uuid: {\n            'default': '请输入有效的UUID',\n            version: '请输入版本 %s 的UUID'\n        },\n        vat: {\n            'default': '请输入有效的VAT(税号)',\n            countryNotSupported: '不支持 %s 国家或地区',\n            country: '请输入有效的 %s 国家或地区的VAT(税号)',\n            countries: {\n                AT: '奥地利',\n                BE: '比利时',\n                BG: '保加利亚',\n                BR: '巴西',\n                CH: '瑞士',\n                CY: '塞浦路斯',\n                CZ: '捷克共和国',\n                DE: '德国',\n                DK: '丹麦',\n                EE: '爱沙尼亚',\n                ES: '西班牙',\n                FI: '芬兰',\n                FR: '法语',\n                GB: '英国',\n                GR: '希腊',\n                EL: '希腊',\n                HU: '匈牙利',\n                HR: '克罗地亚',\n                IE: '爱尔兰',\n                IS: '冰岛',\n                IT: '意大利',\n                LT: '立陶宛',\n                LU: '卢森堡',\n                LV: '拉脱维亚',\n                MT: '马耳他',\n                NL: '荷兰',\n                NO: '挪威',\n                PL: '波兰',\n                PT: '葡萄牙',\n                RO: '罗马尼亚',\n                RU: '俄罗斯',\n                RS: '塞尔维亚',\n                SE: '瑞典',\n                SI: '斯洛文尼亚',\n                SK: '斯洛伐克',\n                VE: '委内瑞拉',\n                ZA: '南非'\n            }\n        },\n        vin: {\n            'default': '请输入有效的VIN(美国车辆识别号码)'\n        },\n        zipCode: {\n            'default': '请输入有效的邮政编码',\n            countryNotSupported: '不支持 %s 国家或地区',\n            country: '请输入有效的 %s 国家或地区的邮政编码',\n            countries: {\n                AT: '奥地利',\n                BR: '巴西',\n                CA: '加拿大',\n                CH: '瑞士',\n                CZ: '捷克共和国',\n                DE: '德国',\n                DK: '丹麦',\n                FR: '法国',\n                GB: '英国',\n                IE: '爱尔兰',\n                IT: '意大利',\n                MA: '摩洛哥',\n                NL: '荷兰',\n                PT: '葡萄牙',\n                RO: '罗马尼亚',\n                RU: '俄罗斯',\n                SE: '瑞典',\n                SG: '新加坡',\n                SK: '斯洛伐克',\n                US: '美国'\n            }\n        }\n    });\n}(window.jQuery));\n\nmodule.exports = i18n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrapvalidator/dist/js/language/zh_CN.js\n// module id = 06Tt\n// module chunks = 1","\r\nimport './css/login.less'\r\nimport './css/iconfont.css'\r\nimport './js/login.js'\r\n// import {cube} from './math.js'\r\nimport jquery from 'jquery'\r\n// import normalize from 'normalize'\r\nimport './css/common.css'\r\nimport './css/reset.css'\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport 'bootstrap/dist/js/bootstrap.min.js'\r\nwindow.jQuery = jquery;\r\n// import 'bootstrapvalidator/dist/css/bootstrapValidator.min.css'\r\nconst bootstrapvalidator = require('bootstrapvalidator/dist/js/bootstrapValidator.js');\r\n// import 'bootstrapvalidator/dist/js/bootstrapValidator.js'\r\nimport  ajax  from \"./js/ajax.js\"\r\nwindow.ajax = ajax;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/login.js\n// module id = QHgX\n// module chunks = 1","/*!\n * BootstrapValidator (http://bootstrapvalidator.com)\n * The best jQuery plugin to validate form fields. Designed to use with Bootstrap 3\n *\n * @version     v0.5.4, built on 2014-12-11 9:05:43 AM\n * @author      https://twitter.com/nghuuphuoc\n * @copyright   (c) 2013 - 2014 Nguyen Huu Phuoc\n * @license     Commercial: http://bootstrapvalidator.com/license/\n *              Non-commercial: http://creativecommons.org/licenses/by-nc-nd/3.0/\n */\nif (typeof jQuery === 'undefined') {\n    throw new Error('BootstrapValidator requires jQuery');\n}\n\n(function($) {\n    var version = $.fn.jquery.split(' ')[0].split('.');\n    if ((+version[0] < 2 && +version[1] < 9) || (+version[0] === 1 && +version[1] === 9 && +version[2] < 1)) {\n        throw new Error('BootstrapValidator requires jQuery version 1.9.1 or higher');\n    }\n}(window.jQuery));\n\n(function($) {\n    var BootstrapValidator = function(form, options) {\n        this.$form   = $(form);\n        this.options = $.extend({}, $.fn.bootstrapValidator.DEFAULT_OPTIONS, options);\n\n        this.$invalidFields = $([]);    // Array of invalid fields\n        this.$submitButton  = null;     // The submit button which is clicked to submit form\n        this.$hiddenButton  = null;\n\n        // Validating status\n        this.STATUS_NOT_VALIDATED = 'NOT_VALIDATED';\n        this.STATUS_VALIDATING    = 'VALIDATING';\n        this.STATUS_INVALID       = 'INVALID';\n        this.STATUS_VALID         = 'VALID';\n\n        // Determine the event that is fired when user change the field value\n        // Most modern browsers supports input event except IE 7, 8.\n        // IE 9 supports input event but the event is still not fired if I press the backspace key.\n        // Get IE version\n        // https://gist.github.com/padolsey/527683/#comment-7595\n        var ieVersion = (function() {\n            var v = 3, div = document.createElement('div'), a = div.all || [];\n            while (div.innerHTML = '<!--[if gt IE '+(++v)+']><br><![endif]-->', a[0]) {}\n            return v > 4 ? v : !v;\n        }());\n\n        var el = document.createElement('div');\n        this._changeEvent = (ieVersion === 9 || !('oninput' in el)) ? 'keyup' : 'input';\n\n        // The flag to indicate that the form is ready to submit when a remote/callback validator returns\n        this._submitIfValid = null;\n\n        // Field elements\n        this._cacheFields = {};\n\n        this._init();\n    };\n\n    BootstrapValidator.prototype = {\n        constructor: BootstrapValidator,\n\n        /**\n         * Init form\n         */\n        _init: function() {\n            var that    = this,\n                options = {\n                    autoFocus:      this.$form.attr('data-bv-autofocus'),\n                    container:      this.$form.attr('data-bv-container'),\n                    events: {\n                        formInit:         this.$form.attr('data-bv-events-form-init'),\n                        formError:        this.$form.attr('data-bv-events-form-error'),\n                        formSuccess:      this.$form.attr('data-bv-events-form-success'),\n                        fieldAdded:       this.$form.attr('data-bv-events-field-added'),\n                        fieldRemoved:     this.$form.attr('data-bv-events-field-removed'),\n                        fieldInit:        this.$form.attr('data-bv-events-field-init'),\n                        fieldError:       this.$form.attr('data-bv-events-field-error'),\n                        fieldSuccess:     this.$form.attr('data-bv-events-field-success'),\n                        fieldStatus:      this.$form.attr('data-bv-events-field-status'),\n                        validatorError:   this.$form.attr('data-bv-events-validator-error'),\n                        validatorSuccess: this.$form.attr('data-bv-events-validator-success')\n                    },\n                    excluded:       this.$form.attr('data-bv-excluded'),\n                    feedbackIcons: {\n                        valid:      this.$form.attr('data-bv-feedbackicons-valid'),\n                        invalid:    this.$form.attr('data-bv-feedbackicons-invalid'),\n                        validating: this.$form.attr('data-bv-feedbackicons-validating')\n                    },\n                    group:          this.$form.attr('data-bv-group'),\n                    live:           this.$form.attr('data-bv-live'),\n                    message:        this.$form.attr('data-bv-message'),\n                    onError:        this.$form.attr('data-bv-onerror'),\n                    onSuccess:      this.$form.attr('data-bv-onsuccess'),\n                    submitButtons:  this.$form.attr('data-bv-submitbuttons'),\n                    threshold:      this.$form.attr('data-bv-threshold'),\n                    trigger:        this.$form.attr('data-bv-trigger'),\n                    verbose:        this.$form.attr('data-bv-verbose'),\n                    fields:         {}\n                };\n\n            this.$form\n                // Disable client side validation in HTML 5\n                .attr('novalidate', 'novalidate')\n                .addClass(this.options.elementClass)\n                // Disable the default submission first\n                .on('submit.bv', function(e) {\n                    e.preventDefault();\n                    that.validate();\n                })\n                .on('click.bv', this.options.submitButtons, function() {\n                    that.$submitButton  = $(this);\n\t\t\t\t\t// The user just click the submit button\n\t\t\t\t\tthat._submitIfValid = true;\n                })\n                // Find all fields which have either \"name\" or \"data-bv-field\" attribute\n                .find('[name], [data-bv-field]')\n                    .each(function() {\n                        var $field = $(this),\n                            field  = $field.attr('name') || $field.attr('data-bv-field'),\n                            opts   = that._parseOptions($field);\n                        if (opts) {\n                            $field.attr('data-bv-field', field);\n                            options.fields[field] = $.extend({}, opts, options.fields[field]);\n                        }\n                    });\n\n            this.options = $.extend(true, this.options, options);\n\n            // When pressing Enter on any field in the form, the first submit button will do its job.\n            // The form then will be submitted.\n            // I create a first hidden submit button\n            this.$hiddenButton = $('<button/>')\n                                    .attr('type', 'submit')\n                                    .prependTo(this.$form)\n                                    .addClass('bv-hidden-submit')\n                                    .css({ display: 'none', width: 0, height: 0 });\n\n            this.$form\n                .on('click.bv', '[type=\"submit\"]', function(e) {\n                    // #746: Check if the button click handler returns false\n                    if (!e.isDefaultPrevented()) {\n                        var $target = $(e.target),\n                            // The button might contain HTML tag\n                            $button = $target.is('[type=\"submit\"]') ? $target.eq(0) : $target.parent('[type=\"submit\"]').eq(0);\n\n                        // Don't perform validation when clicking on the submit button/input\n                        // which aren't defined by the 'submitButtons' option\n                        if (that.options.submitButtons && !$button.is(that.options.submitButtons) && !$button.is(that.$hiddenButton)) {\n                            that.$form.off('submit.bv').submit();\n                        }\n                    }\n                });\n\n            for (var field in this.options.fields) {\n                this._initField(field);\n            }\n\n            this.$form.trigger($.Event(this.options.events.formInit), {\n                bv: this,\n                options: this.options\n            });\n\n            // Prepare the events\n            if (this.options.onSuccess) {\n                this.$form.on(this.options.events.formSuccess, function(e) {\n                    $.fn.bootstrapValidator.helpers.call(that.options.onSuccess, [e]);\n                });\n            }\n            if (this.options.onError) {\n                this.$form.on(this.options.events.formError, function(e) {\n                    $.fn.bootstrapValidator.helpers.call(that.options.onError, [e]);\n                });\n            }\n        },\n\n        /**\n         * Parse the validator options from HTML attributes\n         *\n         * @param {jQuery} $field The field element\n         * @returns {Object}\n         */\n        _parseOptions: function($field) {\n            var field      = $field.attr('name') || $field.attr('data-bv-field'),\n                validators = {},\n                validator,\n                v,          // Validator name\n                attrName,\n                enabled,\n                optionName,\n                optionAttrName,\n                optionValue,\n                html5AttrName,\n                html5AttrMap;\n\n            for (v in $.fn.bootstrapValidator.validators) {\n                validator    = $.fn.bootstrapValidator.validators[v];\n                attrName     = 'data-bv-' + v.toLowerCase(),\n                enabled      = $field.attr(attrName) + '';\n                html5AttrMap = ('function' === typeof validator.enableByHtml5) ? validator.enableByHtml5($field) : null;\n\n                if ((html5AttrMap && enabled !== 'false')\n                    || (html5AttrMap !== true && ('' === enabled || 'true' === enabled || attrName === enabled.toLowerCase())))\n                {\n                    // Try to parse the options via attributes\n                    validator.html5Attributes = $.extend({}, { message: 'message', onerror: 'onError', onsuccess: 'onSuccess' }, validator.html5Attributes);\n                    validators[v] = $.extend({}, html5AttrMap === true ? {} : html5AttrMap, validators[v]);\n\n                    for (html5AttrName in validator.html5Attributes) {\n                        optionName  = validator.html5Attributes[html5AttrName];\n                        optionAttrName = 'data-bv-' + v.toLowerCase() + '-' + html5AttrName,\n                        optionValue = $field.attr(optionAttrName);\n                        if (optionValue) {\n                            if ('true' === optionValue || optionAttrName === optionValue.toLowerCase()) {\n                                optionValue = true;\n                            } else if ('false' === optionValue) {\n                                optionValue = false;\n                            }\n                            validators[v][optionName] = optionValue;\n                        }\n                    }\n                }\n            }\n\n            var opts = {\n                    autoFocus:     $field.attr('data-bv-autofocus'),\n                    container:     $field.attr('data-bv-container'),\n                    excluded:      $field.attr('data-bv-excluded'),\n                    feedbackIcons: $field.attr('data-bv-feedbackicons'),\n                    group:         $field.attr('data-bv-group'),\n                    message:       $field.attr('data-bv-message'),\n                    onError:       $field.attr('data-bv-onerror'),\n                    onStatus:      $field.attr('data-bv-onstatus'),\n                    onSuccess:     $field.attr('data-bv-onsuccess'),\n                    selector:      $field.attr('data-bv-selector'),\n                    threshold:     $field.attr('data-bv-threshold'),\n                    trigger:       $field.attr('data-bv-trigger'),\n                    verbose:       $field.attr('data-bv-verbose'),\n                    validators:    validators\n                },\n                emptyOptions    = $.isEmptyObject(opts),        // Check if the field options are set using HTML attributes\n                emptyValidators = $.isEmptyObject(validators);  // Check if the field validators are set using HTML attributes\n\n            if (!emptyValidators || (!emptyOptions && this.options.fields && this.options.fields[field])) {\n                opts.validators = validators;\n                return opts;\n            } else {\n                return null;\n            }\n        },\n\n        /**\n         * Init field\n         *\n         * @param {String|jQuery} field The field name or field element\n         */\n        _initField: function(field) {\n            var fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    fields = field;\n                    field  = field.attr('data-bv-field');\n                    break;\n                case 'string':\n                    fields = this.getFieldElements(field);\n                    fields.attr('data-bv-field', field);\n                    break;\n                default:\n                    break;\n            }\n\n            // We don't need to validate non-existing fields\n            if (fields.length === 0) {\n                return;\n            }\n\n            if (this.options.fields[field] === null || this.options.fields[field].validators === null) {\n                return;\n            }\n\n            var validatorName;\n            for (validatorName in this.options.fields[field].validators) {\n                if (!$.fn.bootstrapValidator.validators[validatorName]) {\n                    delete this.options.fields[field].validators[validatorName];\n                }\n            }\n            if (this.options.fields[field].enabled === null) {\n                this.options.fields[field].enabled = true;\n            }\n\n            var that      = this,\n                total     = fields.length,\n                type      = fields.attr('type'),\n                updateAll = (total === 1) || ('radio' === type) || ('checkbox' === type),\n                event     = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === fields.eq(0).get(0).tagName) ? 'change' : this._changeEvent,\n                trigger   = (this.options.fields[field].trigger || this.options.trigger || event).split(' '),\n                events    = $.map(trigger, function(item) {\n                    return item + '.update.bv';\n                }).join(' ');\n\n            for (var i = 0; i < total; i++) {\n                var $field    = fields.eq(i),\n                    group     = this.options.fields[field].group || this.options.group,\n                    $parent   = $field.parents(group),\n                    // Allow user to indicate where the error messages are shown\n                    container = ('function' === typeof (this.options.fields[field].container || this.options.container)) ? (this.options.fields[field].container || this.options.container).call(this, $field, this) : (this.options.fields[field].container || this.options.container),\n                    $message  = (container && container !== 'tooltip' && container !== 'popover') ? $(container) : this._getMessageContainer($field, group);\n\n                if (container && container !== 'tooltip' && container !== 'popover') {\n                    $message.addClass('has-error');\n                }\n\n                // Remove all error messages and feedback icons\n                $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove();\n                $parent.find('i[data-bv-icon-for=\"' + field + '\"]').remove();\n\n                // Whenever the user change the field value, mark it as not validated yet\n                $field.off(events).on(events, function() {\n                    that.updateStatus($(this), that.STATUS_NOT_VALIDATED);\n                });\n                \n                // Create help block elements for showing the error messages\n                $field.data('bv.messages', $message);\n                for (validatorName in this.options.fields[field].validators) {\n                    $field.data('bv.result.' + validatorName, this.STATUS_NOT_VALIDATED);\n\n                    if (!updateAll || i === total - 1) {\n                        $('<small/>')\n                            .css('display', 'none')\n                            .addClass('help-block')\n                            .attr('data-bv-validator', validatorName)\n                            .attr('data-bv-for', field)\n                            .attr('data-bv-result', this.STATUS_NOT_VALIDATED)\n                            .html(this._getMessage(field, validatorName))\n                            .appendTo($message);\n                    }\n\n                    // Init the validator\n                    if ('function' === typeof $.fn.bootstrapValidator.validators[validatorName].init) {\n                        $.fn.bootstrapValidator.validators[validatorName].init(this, $field, this.options.fields[field].validators[validatorName]);\n                    }\n                }\n\n                // Prepare the feedback icons\n                // Available from Bootstrap 3.1 (http://getbootstrap.com/css/#forms-control-validation)\n                if (this.options.fields[field].feedbackIcons !== false && this.options.fields[field].feedbackIcons !== 'false'\n                    && this.options.feedbackIcons\n                    && this.options.feedbackIcons.validating && this.options.feedbackIcons.invalid && this.options.feedbackIcons.valid\n                    && (!updateAll || i === total - 1))\n                {\n                    // $parent.removeClass('has-success').removeClass('has-error').addClass('has-feedback');\n                    // Keep error messages which are populated from back-end\n                    $parent.addClass('has-feedback');\n                    var $icon = $('<i/>')\n                                    .css('display', 'none')\n                                    .addClass('form-control-feedback')\n                                    .attr('data-bv-icon-for', field)\n                                    .insertAfter($field);\n\n                    // Place it after the container of checkbox/radio\n                    // so when clicking the icon, it doesn't effect to the checkbox/radio element\n                    if ('checkbox' === type || 'radio' === type) {\n                        var $fieldParent = $field.parent();\n                        if ($fieldParent.hasClass(type)) {\n                            $icon.insertAfter($fieldParent);\n                        } else if ($fieldParent.parent().hasClass(type)) {\n                            $icon.insertAfter($fieldParent.parent());\n                        }\n                    }\n\n                    // The feedback icon does not render correctly if there is no label\n                    // https://github.com/twbs/bootstrap/issues/12873\n                    if ($parent.find('label').length === 0) {\n                        $icon.addClass('bv-no-label');\n                    }\n                    // Fix feedback icons in input-group\n                    if ($parent.find('.input-group').length !== 0) {\n                        $icon.addClass('bv-icon-input-group')\n                             .insertAfter($parent.find('.input-group').eq(0));\n                    }\n\n                    // Store the icon as a data of field element\n                    if (!updateAll) {\n                        $field.data('bv.icon', $icon);\n                    } else if (i === total - 1) {\n                        // All fields with the same name have the same icon\n                        fields.data('bv.icon', $icon);\n                    }\n                    \n                    if (container) {\n                        $field\n                            // Show tooltip/popover message when field gets focus\n                            .off('focus.container.bv')\n                            .on('focus.container.bv', function() {\n                                switch (container) {\n                                    case 'tooltip':\n                                        $(this).data('bv.icon').tooltip('show');\n                                        break;\n                                    case 'popover':\n                                        $(this).data('bv.icon').popover('show');\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            })\n                            // and hide them when losing focus\n                            .off('blur.container.bv')\n                            .on('blur.container.bv', function() {\n                                switch (container) {\n                                    case 'tooltip':\n                                        $(this).data('bv.icon').tooltip('hide');\n                                        break;\n                                    case 'popover':\n                                        $(this).data('bv.icon').popover('hide');\n                                        break;\n                                    default:\n                                        break;\n                                }\n                            });\n                    }\n                }\n            }\n\n            // Prepare the events\n            fields\n                .on(this.options.events.fieldSuccess, function(e, data) {\n                    var onSuccess = that.getOptions(data.field, null, 'onSuccess');\n                    if (onSuccess) {\n                        $.fn.bootstrapValidator.helpers.call(onSuccess, [e, data]);\n                    }\n                })\n                .on(this.options.events.fieldError, function(e, data) {\n                    var onError = that.getOptions(data.field, null, 'onError');\n                    if (onError) {\n                        $.fn.bootstrapValidator.helpers.call(onError, [e, data]);\n                    }\n                })\n                .on(this.options.events.fieldStatus, function(e, data) {\n                    var onStatus = that.getOptions(data.field, null, 'onStatus');\n                    if (onStatus) {\n                        $.fn.bootstrapValidator.helpers.call(onStatus, [e, data]);\n                    }\n                })\n                .on(this.options.events.validatorError, function(e, data) {\n                    var onError = that.getOptions(data.field, data.validator, 'onError');\n                    if (onError) {\n                        $.fn.bootstrapValidator.helpers.call(onError, [e, data]);\n                    }\n                })\n                .on(this.options.events.validatorSuccess, function(e, data) {\n                    var onSuccess = that.getOptions(data.field, data.validator, 'onSuccess');\n                    if (onSuccess) {\n                        $.fn.bootstrapValidator.helpers.call(onSuccess, [e, data]);\n                    }\n                });\n\n            // Set live mode\n            events = $.map(trigger, function(item) {\n                return item + '.live.bv';\n            }).join(' ');\n            switch (this.options.live) {\n                case 'submitted':\n                    break;\n                case 'disabled':\n                    fields.off(events);\n                    break;\n                case 'enabled':\n                /* falls through */\n                default:\n                    fields.off(events).on(events, function() {\n                        if (that._exceedThreshold($(this))) {\n                            that.validateField($(this));\n                        }\n                    });\n                    break;\n            }\n\n            fields.trigger($.Event(this.options.events.fieldInit), {\n                bv: this,\n                field: field,\n                element: fields\n            });\n        },\n\n        /**\n         * Get the error message for given field and validator\n         *\n         * @param {String} field The field name\n         * @param {String} validatorName The validator name\n         * @returns {String}\n         */\n        _getMessage: function(field, validatorName) {\n            if (!this.options.fields[field] || !$.fn.bootstrapValidator.validators[validatorName]\n                || !this.options.fields[field].validators || !this.options.fields[field].validators[validatorName])\n            {\n                return '';\n            }\n\n            var options = this.options.fields[field].validators[validatorName];\n            switch (true) {\n                case (!!options.message):\n                    return options.message;\n                case (!!this.options.fields[field].message):\n                    return this.options.fields[field].message;\n                case (!!$.fn.bootstrapValidator.i18n[validatorName]):\n                    return $.fn.bootstrapValidator.i18n[validatorName]['default'];\n                default:\n                    return this.options.message;\n            }\n        },\n\n        /**\n         * Get the element to place the error messages\n         *\n         * @param {jQuery} $field The field element\n         * @param {String} group\n         * @returns {jQuery}\n         */\n        _getMessageContainer: function($field, group) {\n            var $parent = $field.parent();\n            if ($parent.is(group)) {\n                return $parent;\n            }\n\n            var cssClasses = $parent.attr('class');\n            if (!cssClasses) {\n                return this._getMessageContainer($parent, group);\n            }\n\n            cssClasses = cssClasses.split(' ');\n            var n = cssClasses.length;\n            for (var i = 0; i < n; i++) {\n                if (/^col-(xs|sm|md|lg)-\\d+$/.test(cssClasses[i]) || /^col-(xs|sm|md|lg)-offset-\\d+$/.test(cssClasses[i])) {\n                    return $parent;\n                }\n            }\n\n            return this._getMessageContainer($parent, group);\n        },\n\n        /**\n         * Called when all validations are completed\n         */\n        _submit: function() {\n            var isValid   = this.isValid(),\n                eventType = isValid ? this.options.events.formSuccess : this.options.events.formError,\n                e         = $.Event(eventType);\n\n            this.$form.trigger(e);\n\n            // Call default handler\n            // Check if whether the submit button is clicked\n            if (this.$submitButton) {\n                isValid ? this._onSuccess(e) : this._onError(e);\n            }\n        },\n\n        /**\n         * Check if the field is excluded.\n         * Returning true means that the field will not be validated\n         *\n         * @param {jQuery} $field The field element\n         * @returns {Boolean}\n         */\n        _isExcluded: function($field) {\n            var excludedAttr = $field.attr('data-bv-excluded'),\n                // I still need to check the 'name' attribute while initializing the field\n                field        = $field.attr('data-bv-field') || $field.attr('name');\n\n            switch (true) {\n                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'true' || this.options.fields[field].excluded === true)):\n                case (excludedAttr === 'true'):\n                case (excludedAttr === ''):\n                    return true;\n\n                case (!!field && this.options.fields && this.options.fields[field] && (this.options.fields[field].excluded === 'false' || this.options.fields[field].excluded === false)):\n                case (excludedAttr === 'false'):\n                    return false;\n\n                default:\n                    if (this.options.excluded) {\n                        // Convert to array first\n                        if ('string' === typeof this.options.excluded) {\n                            this.options.excluded = $.map(this.options.excluded.split(','), function(item) {\n                                // Trim the spaces\n                                return $.trim(item);\n                            });\n                        }\n\n                        var length = this.options.excluded.length;\n                        for (var i = 0; i < length; i++) {\n                            if (('string' === typeof this.options.excluded[i] && $field.is(this.options.excluded[i]))\n                                || ('function' === typeof this.options.excluded[i] && this.options.excluded[i].call(this, $field, this) === true))\n                            {\n                                return true;\n                            }\n                        }\n                    }\n                    return false;\n            }\n        },\n\n        /**\n         * Check if the number of characters of field value exceed the threshold or not\n         *\n         * @param {jQuery} $field The field element\n         * @returns {Boolean}\n         */\n        _exceedThreshold: function($field) {\n            var field     = $field.attr('data-bv-field'),\n                threshold = this.options.fields[field].threshold || this.options.threshold;\n            if (!threshold) {\n                return true;\n            }\n            var cannotType = $.inArray($field.attr('type'), ['button', 'checkbox', 'file', 'hidden', 'image', 'radio', 'reset', 'submit']) !== -1;\n            return (cannotType || $field.val().length >= threshold);\n        },\n        \n        // ---\n        // Events\n        // ---\n\n        /**\n         * The default handler of error.form.bv event.\n         * It will be called when there is a invalid field\n         *\n         * @param {jQuery.Event} e The jQuery event object\n         */\n        _onError: function(e) {\n            if (e.isDefaultPrevented()) {\n                return;\n            }\n\n            if ('submitted' === this.options.live) {\n                // Enable live mode\n                this.options.live = 'enabled';\n                var that = this;\n                for (var field in this.options.fields) {\n                    (function(f) {\n                        var fields  = that.getFieldElements(f);\n                        if (fields.length) {\n                            var type    = $(fields[0]).attr('type'),\n                                event   = ('radio' === type || 'checkbox' === type || 'file' === type || 'SELECT' === $(fields[0]).get(0).tagName) ? 'change' : that._changeEvent,\n                                trigger = that.options.fields[field].trigger || that.options.trigger || event,\n                                events  = $.map(trigger.split(' '), function(item) {\n                                    return item + '.live.bv';\n                                }).join(' ');\n\n                            fields.off(events).on(events, function() {\n                                if (that._exceedThreshold($(this))) {\n                                    that.validateField($(this));\n                                }\n                            });\n                        }\n                    })(field);\n                }\n            }\n\n            // Determined the first invalid field which will be focused on automatically\n            for (var i = 0; i < this.$invalidFields.length; i++) {\n                var $field    = this.$invalidFields.eq(i),\n                    autoFocus = this._isOptionEnabled($field.attr('data-bv-field'), 'autoFocus');\n                if (autoFocus) {\n                    // Activate the tab containing the field if exists\n                    var $tabPane = $field.parents('.tab-pane'), tabId;\n                    if ($tabPane && (tabId = $tabPane.attr('id'))) {\n                        $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').tab('show');\n                    }\n\n                    // Focus the field\n                    $field.focus();\n                    break;\n                }\n            }\n        },\n\n        /**\n         * The default handler of success.form.bv event.\n         * It will be called when all the fields are valid\n         *\n         * @param {jQuery.Event} e The jQuery event object\n         */\n        _onSuccess: function(e) {\n            if (e.isDefaultPrevented()) {\n                return;\n            }\n\n            // Submit the form\n            this.disableSubmitButtons(true).defaultSubmit();\n        },\n\n        /**\n         * Called after validating a field element\n         *\n         * @param {jQuery} $field The field element\n         * @param {String} [validatorName] The validator name\n         */\n        _onFieldValidated: function($field, validatorName) {\n            var field         = $field.attr('data-bv-field'),\n                validators    = this.options.fields[field].validators,\n                counter       = {},\n                numValidators = 0,\n                data          = {\n                    bv: this,\n                    field: field,\n                    element: $field,\n                    validator: validatorName,\n                    result: $field.data('bv.response.' + validatorName)\n                };\n\n            // Trigger an event after given validator completes\n            if (validatorName) {\n                switch ($field.data('bv.result.' + validatorName)) {\n                    case this.STATUS_INVALID:\n                        $field.trigger($.Event(this.options.events.validatorError), data);\n                        break;\n                    case this.STATUS_VALID:\n                        $field.trigger($.Event(this.options.events.validatorSuccess), data);\n                        break;\n                    default:\n                        break;\n                }\n            }\n\n            counter[this.STATUS_NOT_VALIDATED] = 0;\n            counter[this.STATUS_VALIDATING]    = 0;\n            counter[this.STATUS_INVALID]       = 0;\n            counter[this.STATUS_VALID]         = 0;\n\n            for (var v in validators) {\n                if (validators[v].enabled === false) {\n                    continue;\n                }\n\n                numValidators++;\n                var result = $field.data('bv.result.' + v);\n                if (result) {\n                    counter[result]++;\n                }\n            }\n\n            if (counter[this.STATUS_VALID] === numValidators) {\n                // Remove from the list of invalid fields\n                this.$invalidFields = this.$invalidFields.not($field);\n\n                $field.trigger($.Event(this.options.events.fieldSuccess), data);\n            }\n            // If all validators are completed and there is at least one validator which doesn't pass\n            else if ((counter[this.STATUS_NOT_VALIDATED] === 0 || !this._isOptionEnabled(field, 'verbose')) && counter[this.STATUS_VALIDATING] === 0 && counter[this.STATUS_INVALID] > 0) {\n                // Add to the list of invalid fields\n                this.$invalidFields = this.$invalidFields.add($field);\n\n                $field.trigger($.Event(this.options.events.fieldError), data);\n            }\n        },\n\n        /**\n         * Check whether or not a field option is enabled\n         *\n         * @param {String} field The field name\n         * @param {String} option The option name, \"verbose\", \"autoFocus\", for example\n         * @returns {Boolean}\n         */\n        _isOptionEnabled: function(field, option) {\n            if (this.options.fields[field] && (this.options.fields[field][option] === 'true' || this.options.fields[field][option] === true)) {\n                return true;\n            }\n            if (this.options.fields[field] && (this.options.fields[field][option] === 'false' || this.options.fields[field][option] === false)) {\n                return false;\n            }\n            return this.options[option] === 'true' || this.options[option] === true;\n        },\n\n        // ---\n        // Public methods\n        // ---\n\n        /**\n         * Retrieve the field elements by given name\n         *\n         * @param {String} field The field name\n         * @returns {null|jQuery[]}\n         */\n        getFieldElements: function(field) {\n            if (!this._cacheFields[field]) {\n                this._cacheFields[field] = (this.options.fields[field] && this.options.fields[field].selector)\n                                         ? $(this.options.fields[field].selector)\n                                         : this.$form.find('[name=\"' + field + '\"]');\n            }\n\n            return this._cacheFields[field];\n        },\n\n        /**\n         * Get the field options\n         *\n         * @param {String|jQuery} [field] The field name or field element. If it is not set, the method returns the form options\n         * @param {String} [validator] The name of validator. It null, the method returns form options\n         * @param {String} [option] The option name\n         * @return {String|Object}\n         */\n        getOptions: function(field, validator, option) {\n            if (!field) {\n                return option ? this.options[option] : this.options;\n            }\n            if ('object' === typeof field) {\n                field = field.attr('data-bv-field');\n            }\n            if (!this.options.fields[field]) {\n                return null;\n            }\n\n            var options = this.options.fields[field];\n            if (!validator) {\n                return option ? options[option] : options;\n            }\n            if (!options.validators || !options.validators[validator]) {\n                return null;\n            }\n\n            return option ? options.validators[validator][option] : options.validators[validator];\n        },\n\n        /**\n         * Disable/enable submit buttons\n         *\n         * @param {Boolean} disabled Can be true or false\n         * @returns {BootstrapValidator}\n         */\n        disableSubmitButtons: function(disabled) {\n            if (!disabled) {\n                this.$form.find(this.options.submitButtons).removeAttr('disabled');\n            } else if (this.options.live !== 'disabled') {\n                // Don't disable if the live validating mode is disabled\n                this.$form.find(this.options.submitButtons).attr('disabled', 'disabled');\n            }\n\n            return this;\n        },\n\n        /**\n         * Validate the form\n         *\n         * @returns {BootstrapValidator}\n         */\n        validate: function() {\n            if (!this.options.fields) {\n                return this;\n            }\n            this.disableSubmitButtons(true);\n\n            this._submitIfValid = false;\n            for (var field in this.options.fields) {\n                this.validateField(field);\n            }\n\n            if (this.$submitButton) {\n                this._submit();\n            }\n            this._submitIfValid = true;\n\n            return this;\n        },\n\n        /**\n         * Submit the form\n         *\n         * @returns {BootstrapValidator}\n         */\n        submit: function() {\n            if (!this.options.fields) {\n                return this;\n            }\n            this.disableSubmitButtons(true);\n\n            this._submitIfValid = false;\n            for (var field in this.options.fields) {\n                this.validateField(field);\n            }\n\n            this._submit();\n            this._submitIfValid = true;\n\n            return this;\n        },\n\n        /**\n         * Validate given field\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @returns {BootstrapValidator}\n         */\n        validateField: function(field) {\n            var fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    fields = field;\n                    field  = field.attr('data-bv-field');\n                    break;\n                case 'string':\n                    fields = this.getFieldElements(field);\n                    break;\n                default:\n                    break;\n            }\n\n            if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {\n                return this;\n            }\n\n            var that       = this,\n                type       = fields.attr('type'),\n                total      = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\n                updateAll  = ('radio' === type || 'checkbox' === type),\n                validators = this.options.fields[field].validators,\n                verbose    = this._isOptionEnabled(field, 'verbose'),\n                validatorName,\n                validateResult;\n\n            for (var i = 0; i < total; i++) {\n                var $field = fields.eq(i);\n                if (this._isExcluded($field)) {\n                    continue;\n                }\n\n                var stop = false;\n                for (validatorName in validators) {\n                    if ($field.data('bv.dfs.' + validatorName)) {\n                        $field.data('bv.dfs.' + validatorName).reject();\n                    }\n                    if (stop) {\n                        break;\n                    }\n\n                    // Don't validate field if it is already done\n                    var result = $field.data('bv.result.' + validatorName);\n                    if (result === this.STATUS_VALID || result === this.STATUS_INVALID) {\n                        this._onFieldValidated($field, validatorName);\n                        continue;\n                    } else if (validators[validatorName].enabled === false) {\n                        this.updateStatus(updateAll ? field : $field, this.STATUS_VALID, validatorName);\n                        continue;\n                    }\n\n                    $field.data('bv.result.' + validatorName, this.STATUS_VALIDATING);\n                    validateResult = $.fn.bootstrapValidator.validators[validatorName].validate(this, $field, validators[validatorName]);\n\n                    // validateResult can be a $.Deferred object ...\n                    if ('object' === typeof validateResult && validateResult.resolve) {\n                        this.updateStatus(updateAll ? field : $field, this.STATUS_VALIDATING, validatorName);\n                        $field.data('bv.dfs.' + validatorName, validateResult);\n\n                        validateResult.done(function($f, v, response) {\n                            // v is validator name\n                            $f.removeData('bv.dfs.' + v).data('bv.response.' + v, response);\n                            if (response.message) {\n                                that.updateMessage($f, v, response.message);\n                            }\n\n                            that.updateStatus(updateAll ? $f.attr('data-bv-field') : $f, response.valid ? that.STATUS_VALID : that.STATUS_INVALID, v);\n\n                            if (response.valid && that._submitIfValid === true && that.$submitButton) {\n                                // If a remote validator returns true and the form is ready to submit, then do it\n                                that._submit();\n                            } else if (!response.valid && !verbose) {\n                                stop = true;\n                            }\n                        });\n                    }\n                    // ... or object { valid: true/false, message: 'dynamic message' }\n                    else if ('object' === typeof validateResult && validateResult.valid !== undefined && validateResult.message !== undefined) {\n                        $field.data('bv.response.' + validatorName, validateResult);\n                        this.updateMessage(updateAll ? field : $field, validatorName, validateResult.message);\n                        this.updateStatus(updateAll ? field : $field, validateResult.valid ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\n                        if (!validateResult.valid && !verbose) {\n                            break;\n                        }\n                    }\n                    // ... or a boolean value\n                    else if ('boolean' === typeof validateResult) {\n                        $field.data('bv.response.' + validatorName, validateResult);\n                        this.updateStatus(updateAll ? field : $field, validateResult ? this.STATUS_VALID : this.STATUS_INVALID, validatorName);\n                        if (!validateResult && !verbose) {\n                            break;\n                        }\n                    }\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Update the error message\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @param {String} validator The validator name\n         * @param {String} message The message\n         * @returns {BootstrapValidator}\n         */\n        updateMessage: function(field, validator, message) {\n            var $fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    $fields = field;\n                    field   = field.attr('data-bv-field');\n                    break;\n                case 'string':\n                    $fields = this.getFieldElements(field);\n                    break;\n                default:\n                    break;\n            }\n\n            $fields.each(function() {\n                $(this).data('bv.messages').find('.help-block[data-bv-validator=\"' + validator + '\"][data-bv-for=\"' + field + '\"]').html(message);\n            });\n        },\n        \n        /**\n         * Update all validating results of field\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @param {String} status The status. Can be 'NOT_VALIDATED', 'VALIDATING', 'INVALID' or 'VALID'\n         * @param {String} [validatorName] The validator name. If null, the method updates validity result for all validators\n         * @returns {BootstrapValidator}\n         */\n        updateStatus: function(field, status, validatorName) {\n            var fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    fields = field;\n                    field  = field.attr('data-bv-field');\n                    break;\n                case 'string':\n                    fields = this.getFieldElements(field);\n                    break;\n                default:\n                    break;\n            }\n\n            if (status === this.STATUS_NOT_VALIDATED) {\n                // Reset the flag\n                // To prevent the form from doing submit when a deferred validator returns true while typing\n                this._submitIfValid = false;\n            }\n\n            var that  = this,\n                type  = fields.attr('type'),\n                group = this.options.fields[field].group || this.options.group,\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\n\n            for (var i = 0; i < total; i++) {\n                var $field       = fields.eq(i);\n                if (this._isExcluded($field)) {\n                    continue;\n                }\n\n                var $parent      = $field.parents(group),\n                    $message     = $field.data('bv.messages'),\n                    $allErrors   = $message.find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]'),\n                    $errors      = validatorName ? $allErrors.filter('[data-bv-validator=\"' + validatorName + '\"]') : $allErrors,\n                    $icon        = $field.data('bv.icon'),\n                    container    = ('function' === typeof (this.options.fields[field].container || this.options.container)) ? (this.options.fields[field].container || this.options.container).call(this, $field, this) : (this.options.fields[field].container || this.options.container),\n                    isValidField = null;\n\n                // Update status\n                if (validatorName) {\n                    $field.data('bv.result.' + validatorName, status);\n                } else {\n                    for (var v in this.options.fields[field].validators) {\n                        $field.data('bv.result.' + v, status);\n                    }\n                }\n\n                // Show/hide error elements and feedback icons\n                $errors.attr('data-bv-result', status);\n\n                // Determine the tab containing the element\n                var $tabPane = $field.parents('.tab-pane'),\n                    tabId, $tab;\n                if ($tabPane && (tabId = $tabPane.attr('id'))) {\n                    $tab = $('a[href=\"#' + tabId + '\"][data-toggle=\"tab\"]').parent();\n                }\n\n                switch (status) {\n                    case this.STATUS_VALIDATING:\n                        isValidField = null;\n                        this.disableSubmitButtons(true);\n                        $parent.removeClass('has-success').removeClass('has-error');\n                        if ($icon) {\n                            $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).addClass(this.options.feedbackIcons.validating).show();\n                        }\n                        if ($tab) {\n                            $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\n                        }\n                        break;\n\n                    case this.STATUS_INVALID:\n                        isValidField = false;\n                        this.disableSubmitButtons(true);\n                        $parent.removeClass('has-success').addClass('has-error');\n                        if ($icon) {\n                            $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.validating).addClass(this.options.feedbackIcons.invalid).show();\n                        }\n                        if ($tab) {\n                            $tab.removeClass('bv-tab-success').addClass('bv-tab-error');\n                        }\n                        break;\n\n                    case this.STATUS_VALID:\n                        // If the field is valid (passes all validators)\n                        isValidField = ($allErrors.filter('[data-bv-result=\"' + this.STATUS_NOT_VALIDATED +'\"]').length === 0)\n                                     ? ($allErrors.filter('[data-bv-result=\"' + this.STATUS_VALID +'\"]').length === $allErrors.length)  // All validators are completed\n                                     : null;                                                                                            // There are some validators that have not done\n                        if (isValidField !== null) {\n                            this.disableSubmitButtons(this.$submitButton ? !this.isValid() : !isValidField);\n                            if ($icon) {\n                                $icon\n                                    .removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).removeClass(this.options.feedbackIcons.valid)\n                                    .addClass(isValidField ? this.options.feedbackIcons.valid : this.options.feedbackIcons.invalid)\n                                    .show();\n                            }\n                        }\n\n                        $parent.removeClass('has-error has-success').addClass(this.isValidContainer($parent) ? 'has-success' : 'has-error');\n                        if ($tab) {\n                            $tab.removeClass('bv-tab-success').removeClass('bv-tab-error').addClass(this.isValidContainer($tabPane) ? 'bv-tab-success' : 'bv-tab-error');\n                        }\n                        break;\n\n                    case this.STATUS_NOT_VALIDATED:\n                    /* falls through */\n                    default:\n                        isValidField = null;\n                        this.disableSubmitButtons(false);\n                        $parent.removeClass('has-success').removeClass('has-error');\n                        if ($icon) {\n                            $icon.removeClass(this.options.feedbackIcons.valid).removeClass(this.options.feedbackIcons.invalid).removeClass(this.options.feedbackIcons.validating).hide();\n                        }\n                        if ($tab) {\n                            $tab.removeClass('bv-tab-success').removeClass('bv-tab-error');\n                        }\n                        break;\n                }\n\n                switch (true) {\n                    // Only show the first error message if it is placed inside a tooltip ...\n                    case ($icon && 'tooltip' === container):\n                        (isValidField === false)\n                                ? $icon.css('cursor', 'pointer').tooltip('destroy').tooltip({\n                                    container: 'body',\n                                    html: true,\n                                    placement: 'auto top',\n                                    title: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html()\n                                })\n                                : $icon.css('cursor', '').tooltip('destroy');\n                        break;\n                    // ... or popover\n                    case ($icon && 'popover' === container):\n                        (isValidField === false)\n                                ? $icon.css('cursor', 'pointer').popover('destroy').popover({\n                                    container: 'body',\n                                    content: $allErrors.filter('[data-bv-result=\"' + that.STATUS_INVALID + '\"]').eq(0).html(),\n                                    html: true,\n                                    placement: 'auto top',\n                                    trigger: 'hover click'\n                                })\n                                : $icon.css('cursor', '').popover('destroy');\n                        break;\n                    default:\n                        (status === this.STATUS_INVALID) ? $errors.show() : $errors.hide();\n                        break;\n                }\n\n                // Trigger an event\n                $field.trigger($.Event(this.options.events.fieldStatus), {\n                    bv: this,\n                    field: field,\n                    element: $field,\n                    status: status\n                });\n                this._onFieldValidated($field, validatorName);\n            }\n\n            return this;\n        },\n\n        /**\n         * Check the form validity\n         *\n         * @returns {Boolean}\n         */\n        isValid: function() {\n            for (var field in this.options.fields) {\n                if (!this.isValidField(field)) {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Check if the field is valid or not\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @returns {Boolean}\n         */\n        isValidField: function(field) {\n            var fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    fields = field;\n                    field  = field.attr('data-bv-field');\n                    break;\n                case 'string':\n                    fields = this.getFieldElements(field);\n                    break;\n                default:\n                    break;\n            }\n            if (fields.length === 0 || !this.options.fields[field] || this.options.fields[field].enabled === false) {\n                return true;\n            }\n\n            var type  = fields.attr('type'),\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length,\n                $field, validatorName, status;\n            for (var i = 0; i < total; i++) {\n                $field = fields.eq(i);\n                if (this._isExcluded($field)) {\n                    continue;\n                }\n\n                for (validatorName in this.options.fields[field].validators) {\n                    if (this.options.fields[field].validators[validatorName].enabled === false) {\n                        continue;\n                    }\n\n                    status = $field.data('bv.result.' + validatorName);\n                    if (status !== this.STATUS_VALID) {\n                        return false;\n                    }\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Check if all fields inside a given container are valid.\n         * It's useful when working with a wizard-like such as tab, collapse\n         *\n         * @param {String|jQuery} container The container selector or element\n         * @returns {Boolean}\n         */\n        isValidContainer: function(container) {\n            var that       = this,\n                map        = {},\n                $container = ('string' === typeof container) ? $(container) : container;\n            if ($container.length === 0) {\n                return true;\n            }\n\n            $container.find('[data-bv-field]').each(function() {\n                var $field = $(this),\n                    field  = $field.attr('data-bv-field');\n                if (!that._isExcluded($field) && !map[field]) {\n                    map[field] = $field;\n                }\n            });\n\n            for (var field in map) {\n                var $f = map[field];\n                if ($f.data('bv.messages')\n                      .find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]')\n                      .filter('[data-bv-result=\"' + this.STATUS_INVALID +'\"]')\n                      .length > 0)\n                {\n                    return false;\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Submit the form using default submission.\n         * It also does not perform any validations when submitting the form\n         */\n        defaultSubmit: function() {\n            if (this.$submitButton) {\n                // Create hidden input to send the submit buttons\n                $('<input/>')\n                    .attr('type', 'hidden')\n                    .attr('data-bv-submit-hidden', '')\n                    .attr('name', this.$submitButton.attr('name'))\n                    .val(this.$submitButton.val())\n                    .appendTo(this.$form);\n            }\n\n            // Submit form\n            this.$form.off('submit.bv').submit();\n        },\n\n        // ---\n        // Useful APIs which aren't used internally\n        // ---\n\n        /**\n         * Get the list of invalid fields\n         *\n         * @returns {jQuery[]}\n         */\n        getInvalidFields: function() {\n            return this.$invalidFields;\n        },\n\n        /**\n         * Returns the clicked submit button\n         *\n         * @returns {jQuery}\n         */\n        getSubmitButton: function() {\n            return this.$submitButton;\n        },\n\n        /**\n         * Get the error messages\n         *\n         * @param {String|jQuery} [field] The field name or field element\n         * If the field is not defined, the method returns all error messages of all fields\n         * @param {String} [validator] The name of validator\n         * If the validator is not defined, the method returns error messages of all validators\n         * @returns {String[]}\n         */\n        getMessages: function(field, validator) {\n            var that     = this,\n                messages = [],\n                $fields  = $([]);\n\n            switch (true) {\n                case (field && 'object' === typeof field):\n                    $fields = field;\n                    break;\n                case (field && 'string' === typeof field):\n                    var f = this.getFieldElements(field);\n                    if (f.length > 0) {\n                        var type = f.attr('type');\n                        $fields = ('radio' === type || 'checkbox' === type) ? f.eq(0) : f;\n                    }\n                    break;\n                default:\n                    $fields = this.$invalidFields;\n                    break;\n            }\n\n            var filter = validator ? '[data-bv-validator=\"' + validator + '\"]' : '';\n            $fields.each(function() {\n                messages = messages.concat(\n                    $(this)\n                        .data('bv.messages')\n                        .find('.help-block[data-bv-for=\"' + $(this).attr('data-bv-field') + '\"][data-bv-result=\"' + that.STATUS_INVALID + '\"]' + filter)\n                        .map(function() {\n                            var v = $(this).attr('data-bv-validator'),\n                                f = $(this).attr('data-bv-for');\n                            return (that.options.fields[f].validators[v].enabled === false) ? '' : $(this).html();\n                        })\n                        .get()\n                );\n            });\n\n            return messages;\n        },\n\n        /**\n         * Update the option of a specific validator\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @param {String} validator The validator name\n         * @param {String} option The option name\n         * @param {String} value The value to set\n         * @returns {BootstrapValidator}\n         */\n        updateOption: function(field, validator, option, value) {\n            if ('object' === typeof field) {\n                field = field.attr('data-bv-field');\n            }\n            if (this.options.fields[field] && this.options.fields[field].validators[validator]) {\n                this.options.fields[field].validators[validator][option] = value;\n                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validator);\n            }\n\n            return this;\n        },\n\n        /**\n         * Add a new field\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @param {Object} [options] The validator rules\n         * @returns {BootstrapValidator}\n         */\n        addField: function(field, options) {\n            var fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    fields = field;\n                    field  = field.attr('data-bv-field') || field.attr('name');\n                    break;\n                case 'string':\n                    delete this._cacheFields[field];\n                    fields = this.getFieldElements(field);\n                    break;\n                default:\n                    break;\n            }\n\n            fields.attr('data-bv-field', field);\n\n            var type  = fields.attr('type'),\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\n\n            for (var i = 0; i < total; i++) {\n                var $field = fields.eq(i);\n\n                // Try to parse the options from HTML attributes\n                var opts = this._parseOptions($field);\n                opts = (opts === null) ? options : $.extend(true, options, opts);\n\n                this.options.fields[field] = $.extend(true, this.options.fields[field], opts);\n\n                // Update the cache\n                this._cacheFields[field] = this._cacheFields[field] ? this._cacheFields[field].add($field) : $field;\n\n                // Init the element\n                this._initField(('checkbox' === type || 'radio' === type) ? field : $field);\n            }\n\n            this.disableSubmitButtons(false);\n            // Trigger an event\n            this.$form.trigger($.Event(this.options.events.fieldAdded), {\n                field: field,\n                element: fields,\n                options: this.options.fields[field]\n            });\n\n            return this;\n        },\n\n        /**\n         * Remove a given field\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @returns {BootstrapValidator}\n         */\n        removeField: function(field) {\n            var fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    fields = field;\n                    field  = field.attr('data-bv-field') || field.attr('name');\n                    fields.attr('data-bv-field', field);\n                    break;\n                case 'string':\n                    fields = this.getFieldElements(field);\n                    break;\n                default:\n                    break;\n            }\n\n            if (fields.length === 0) {\n                return this;\n            }\n\n            var type  = fields.attr('type'),\n                total = ('radio' === type || 'checkbox' === type) ? 1 : fields.length;\n\n            for (var i = 0; i < total; i++) {\n                var $field = fields.eq(i);\n\n                // Remove from the list of invalid fields\n                this.$invalidFields = this.$invalidFields.not($field);\n\n                // Update the cache\n                this._cacheFields[field] = this._cacheFields[field].not($field);\n            }\n\n            if (!this._cacheFields[field] || this._cacheFields[field].length === 0) {\n                delete this.options.fields[field];\n            }\n            if ('checkbox' === type || 'radio' === type) {\n                this._initField(field);\n            }\n\n            this.disableSubmitButtons(false);\n            // Trigger an event\n            this.$form.trigger($.Event(this.options.events.fieldRemoved), {\n                field: field,\n                element: fields\n            });\n\n            return this;\n        },\n\n        /**\n         * Reset given field\n         *\n         * @param {String|jQuery} field The field name or field element\n         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\n         * @returns {BootstrapValidator}\n         */\n        resetField: function(field, resetValue) {\n            var $fields = $([]);\n            switch (typeof field) {\n                case 'object':\n                    $fields = field;\n                    field   = field.attr('data-bv-field');\n                    break;\n                case 'string':\n                    $fields = this.getFieldElements(field);\n                    break;\n                default:\n                    break;\n            }\n\n            var total = $fields.length;\n            if (this.options.fields[field]) {\n                for (var i = 0; i < total; i++) {\n                    for (var validator in this.options.fields[field].validators) {\n                        $fields.eq(i).removeData('bv.dfs.' + validator);\n                    }\n                }\n            }\n\n            // Mark field as not validated yet\n            this.updateStatus(field, this.STATUS_NOT_VALIDATED);\n\n            if (resetValue) {\n                var type = $fields.attr('type');\n                ('radio' === type || 'checkbox' === type) ? $fields.removeAttr('checked').removeAttr('selected') : $fields.val('');\n            }\n\n            return this;\n        },\n\n        /**\n         * Reset the form\n         *\n         * @param {Boolean} [resetValue] If true, the method resets field value to empty or remove checked/selected attribute (for radio/checkbox)\n         * @returns {BootstrapValidator}\n         */\n        resetForm: function(resetValue) {\n            for (var field in this.options.fields) {\n                this.resetField(field, resetValue);\n            }\n\n            this.$invalidFields = $([]);\n            this.$submitButton  = null;\n\n            // Enable submit buttons\n            this.disableSubmitButtons(false);\n\n            return this;\n        },\n\n        /**\n         * Revalidate given field\n         * It's used when you need to revalidate the field which its value is updated by other plugin\n         *\n         * @param {String|jQuery} field The field name of field element\n         * @returns {BootstrapValidator}\n         */\n        revalidateField: function(field) {\n            this.updateStatus(field, this.STATUS_NOT_VALIDATED)\n                .validateField(field);\n\n            return this;\n        },\n\n        /**\n         * Enable/Disable all validators to given field\n         *\n         * @param {String} field The field name\n         * @param {Boolean} enabled Enable/Disable field validators\n         * @param {String} [validatorName] The validator name. If null, all validators will be enabled/disabled\n         * @returns {BootstrapValidator}\n         */\n        enableFieldValidators: function(field, enabled, validatorName) {\n            var validators = this.options.fields[field].validators;\n\n            // Enable/disable particular validator\n            if (validatorName\n                && validators\n                && validators[validatorName] && validators[validatorName].enabled !== enabled)\n            {\n                this.options.fields[field].validators[validatorName].enabled = enabled;\n                this.updateStatus(field, this.STATUS_NOT_VALIDATED, validatorName);\n            }\n            // Enable/disable all validators\n            else if (!validatorName && this.options.fields[field].enabled !== enabled) {\n                this.options.fields[field].enabled = enabled;\n                for (var v in validators) {\n                    this.enableFieldValidators(field, enabled, v);\n                }\n            }\n\n            return this;\n        },\n\n        /**\n         * Some validators have option which its value is dynamic.\n         * For example, the zipCode validator has the country option which might be changed dynamically by a select element.\n         *\n         * @param {jQuery|String} field The field name or element\n         * @param {String|Function} option The option which can be determined by:\n         * - a string\n         * - name of field which defines the value\n         * - name of function which returns the value\n         * - a function returns the value\n         *\n         * The callback function has the format of\n         *      callback: function(value, validator, $field) {\n         *          // value is the value of field\n         *          // validator is the BootstrapValidator instance\n         *          // $field is the field element\n         *      }\n         *\n         * @returns {String}\n         */\n        getDynamicOption: function(field, option) {\n            var $field = ('string' === typeof field) ? this.getFieldElements(field) : field,\n                value  = $field.val();\n\n            // Option can be determined by\n            // ... a function\n            if ('function' === typeof option) {\n                return $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]);\n            }\n            // ... value of other field\n            else if ('string' === typeof option) {\n                var $f = this.getFieldElements(option);\n                if ($f.length) {\n                    return $f.val();\n                }\n                // ... return value of callback\n                else {\n                    return $.fn.bootstrapValidator.helpers.call(option, [value, this, $field]) || option;\n                }\n            }\n\n            return null;\n        },\n\n        /**\n         * Destroy the plugin\n         * It will remove all error messages, feedback icons and turn off the events\n         */\n        destroy: function() {\n            var field, fields, $field, validator, $icon, group;\n            for (field in this.options.fields) {\n                fields    = this.getFieldElements(field);\n                group     = this.options.fields[field].group || this.options.group;\n                for (var i = 0; i < fields.length; i++) {\n                    $field = fields.eq(i);\n                    $field\n                        // Remove all error messages\n                        .data('bv.messages')\n                            .find('.help-block[data-bv-validator][data-bv-for=\"' + field + '\"]').remove().end()\n                            .end()\n                        .removeData('bv.messages')\n                        // Remove feedback classes\n                        .parents(group)\n                            .removeClass('has-feedback has-error has-success')\n                            .end()\n                        // Turn off events\n                        .off('.bv')\n                        .removeAttr('data-bv-field');\n\n                    // Remove feedback icons, tooltip/popover container\n                    $icon = $field.data('bv.icon');\n                    if ($icon) {\n                        var container = ('function' === typeof (this.options.fields[field].container || this.options.container)) ? (this.options.fields[field].container || this.options.container).call(this, $field, this) : (this.options.fields[field].container || this.options.container);\n                        switch (container) {\n                            case 'tooltip':\n                                $icon.tooltip('destroy').remove();\n                                break;\n                            case 'popover':\n                                $icon.popover('destroy').remove();\n                                break;\n                            default:\n                                $icon.remove();\n                                break;\n                        }\n                    }\n                    $field.removeData('bv.icon');\n\n                    for (validator in this.options.fields[field].validators) {\n                        if ($field.data('bv.dfs.' + validator)) {\n                            $field.data('bv.dfs.' + validator).reject();\n                        }\n                        $field.removeData('bv.result.' + validator)\n                              .removeData('bv.response.' + validator)\n                              .removeData('bv.dfs.' + validator);\n\n                        // Destroy the validator\n                        if ('function' === typeof $.fn.bootstrapValidator.validators[validator].destroy) {\n                            $.fn.bootstrapValidator.validators[validator].destroy(this, $field, this.options.fields[field].validators[validator]);\n                        }\n                    }\n                }\n            }\n\n            this.disableSubmitButtons(false);   // Enable submit buttons\n            this.$hiddenButton.remove();        // Remove the hidden button\n\n            this.$form\n                .removeClass(this.options.elementClass)\n                .off('.bv')\n                .removeData('bootstrapValidator')\n                // Remove generated hidden elements\n                .find('[data-bv-submit-hidden]').remove().end()\n                .find('[type=\"submit\"]').off('click.bv');\n        }\n    };\n\n    // Plugin definition\n    $.fn.bootstrapValidator = function(option) {\n        var params = arguments;\n        return this.each(function() {\n            var $this   = $(this),\n                data    = $this.data('bootstrapValidator'),\n                options = 'object' === typeof option && option;\n            if (!data) {\n                data = new BootstrapValidator(this, options);\n                $this.data('bootstrapValidator', data);\n            }\n\n            // Allow to call plugin method\n            if ('string' === typeof option) {\n                data[option].apply(data, Array.prototype.slice.call(params, 1));\n            }\n        });\n    };\n\n    // The default options\n    // Sorted in alphabetical order\n    $.fn.bootstrapValidator.DEFAULT_OPTIONS = {\n        // The first invalid field will be focused automatically\n        autoFocus: true,\n\n        //The error messages container. It can be:\n        // - 'tooltip' if you want to use Bootstrap tooltip to show error messages\n        // - 'popover' if you want to use Bootstrap popover to show error messages\n        // - a CSS selector indicating the container\n        // In the first two cases, since the tooltip/popover should be small enough, the plugin only shows only one error message\n        // You also can define the message container for particular field\n        container: null,\n\n        // The form CSS class\n        elementClass: 'bv-form',\n\n        // Use custom event name to avoid window.onerror being invoked by jQuery\n        // See https://github.com/nghuuphuoc/bootstrapvalidator/issues/630\n        events: {\n            formInit: 'init.form.bv',\n            formError: 'error.form.bv',\n            formSuccess: 'success.form.bv',\n            fieldAdded: 'added.field.bv',\n            fieldRemoved: 'removed.field.bv',\n            fieldInit: 'init.field.bv',\n            fieldError: 'error.field.bv',\n            fieldSuccess: 'success.field.bv',\n            fieldStatus: 'status.field.bv',\n            validatorError: 'error.validator.bv',\n            validatorSuccess: 'success.validator.bv'\n        },\n\n        // Indicate fields which won't be validated\n        // By default, the plugin will not validate the following kind of fields:\n        // - disabled\n        // - hidden\n        // - invisible\n        //\n        // The datadictionary consists of jQuery filters. Accept 3 formats:\n        // - A string. Use a comma to separate filter\n        // - An array. Each element is a filter\n        // - An array. Each element can be a callback function\n        //      function($field, validator) {\n        //          $field is jQuery object representing the field element\n        //          validator is the BootstrapValidator instance\n        //          return true or false;\n        //      }\n        //\n        // The 3 following settings are equivalent:\n        //\n        // 1) ':disabled, :hidden, :not(:visible)'\n        // 2) [':disabled', ':hidden', ':not(:visible)']\n        // 3) [':disabled', ':hidden', function($field) {\n        //        return !$field.is(':visible');\n        //    }]\n        excluded: [':disabled', ':hidden', ':not(:visible)'],\n\n        // Shows ok/error/loading icons based on the field validity.\n        // This feature requires Bootstrap v3.1.0 or later (http://getbootstrap.com/css/#forms-control-validation).\n        // Since Bootstrap doesn't provide any methods to know its version, this option cannot be on/off automatically.\n        // In other word, to use this feature you have to upgrade your Bootstrap to v3.1.0 or later.\n        //\n        // Examples:\n        // - Use Glyphicons icons:\n        //  feedbackIcons: {\n        //      valid: 'glyphicon glyphicon-ok',\n        //      invalid: 'glyphicon glyphicon-remove',\n        //      validating: 'glyphicon glyphicon-refresh'\n        //  }\n        // - Use FontAwesome icons:\n        //  feedbackIcons: {\n        //      valid: 'fa fa-check',\n        //      invalid: 'fa fa-times',\n        //      validating: 'fa fa-refresh'\n        //  }\n        feedbackIcons: {\n            valid:      null,\n            invalid:    null,\n            validating: null\n        },\n\n        // Map the field name with validator rules\n        fields: null,\n\n        // The CSS selector for indicating the element consists the field\n        // By default, each field is placed inside the <div class=\"form-group\"></div>\n        // You should adjust this option if your form group consists of many fields which not all of them need to be validated\n        group: '.form-group',\n\n        // Live validating option\n        // Can be one of 3 values:\n        // - enabled: The plugin validates fields as soon as they are changed\n        // - disabled: Disable the live validating. The error messages are only shown after the form is submitted\n        // - submitted: The live validating is enabled after the form is submitted\n        live: 'enabled',\n\n        // Default invalid message\n        message: 'This value is not valid',\n\n        // The submit buttons selector\n        // These buttons will be disabled to prevent the valid form from multiple submissions\n        submitButtons: '[type=\"submit\"]',\n\n        // The field will not be live validated if its length is less than this number of characters\n        threshold: null,\n\n        // Whether to be verbose when validating a field or not.\n        // Possible values:\n        // - true:  when a field has multiple validators, all of them will be checked, and respectively - if errors occur in\n        //          multiple validators, all of them will be displayed to the user\n        // - false: when a field has multiple validators, validation for this field will be terminated upon the first encountered error.\n        //          Thus, only the very first error message related to this field will be displayed to the user\n        verbose: true\n    };\n\n    // Available validators\n    $.fn.bootstrapValidator.validators  = {};\n\n    // i18n\n    $.fn.bootstrapValidator.i18n        = {};\n    $.fn.bootstrapValidator.Constructor = BootstrapValidator;\n\n    // Helper methods, which can be used in validator class\n    $.fn.bootstrapValidator.helpers = {\n        /**\n         * Execute a callback function\n         *\n         * @param {String|Function} functionName Can be\n         * - name of global function\n         * - name of namespace function (such as A.B.C)\n         * - a function\n         * @param {Array} args The callback arguments\n         */\n        call: function(functionName, args) {\n            if ('function' === typeof functionName) {\n                return functionName.apply(this, args);\n            } else if ('string' === typeof functionName) {\n                if ('()' === functionName.substring(functionName.length - 2)) {\n                    functionName = functionName.substring(0, functionName.length - 2);\n                }\n                var ns      = functionName.split('.'),\n                    func    = ns.pop(),\n                    context = window;\n                for (var i = 0; i < ns.length; i++) {\n                    context = context[ns[i]];\n                }\n\n                return (typeof context[func] === 'undefined') ? null : context[func].apply(this, args);\n            }\n        },\n\n        /**\n         * Format a string\n         * It's used to format the error message\n         * format('The field must between %s and %s', [10, 20]) = 'The field must between 10 and 20'\n         *\n         * @param {String} message\n         * @param {Array} parameters\n         * @returns {String}\n         */\n        format: function(message, parameters) {\n            if (!$.isArray(parameters)) {\n                parameters = [parameters];\n            }\n\n            for (var i in parameters) {\n                message = message.replace('%s', parameters[i]);\n            }\n\n            return message;\n        },\n\n        /**\n         * Validate a date\n         *\n         * @param {Number} year The full year in 4 digits\n         * @param {Number} month The month number\n         * @param {Number} day The day number\n         * @param {Boolean} [notInFuture] If true, the date must not be in the future\n         * @returns {Boolean}\n         */\n        date: function(year, month, day, notInFuture) {\n            if (isNaN(year) || isNaN(month) || isNaN(day)) {\n                return false;\n            }\n            if (day.length > 2 || month.length > 2 || year.length > 4) {\n                return false;\n            }\n\n            day   = parseInt(day, 10);\n            month = parseInt(month, 10);\n            year  = parseInt(year, 10);\n\n            if (year < 1000 || year > 9999 || month <= 0 || month > 12) {\n                return false;\n            }\n            var numDays = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n            // Update the number of days in Feb of leap year\n            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {\n                numDays[1] = 29;\n            }\n\n            // Check the day\n            if (day <= 0 || day > numDays[month - 1]) {\n                return false;\n            }\n\n            if (notInFuture === true) {\n                var currentDate  = new Date(),\n                    currentYear  = currentDate.getFullYear(),\n                    currentMonth = currentDate.getMonth(),\n                    currentDay   = currentDate.getDate();\n                return (year < currentYear\n                        || (year === currentYear && month - 1 < currentMonth)\n                        || (year === currentYear && month - 1 === currentMonth && day < currentDay));\n            }\n\n            return true;\n        },\n\n        /**\n         * Implement Luhn validation algorithm\n         * Credit to https://gist.github.com/ShirtlessKirk/2134376\n         *\n         * @see http://en.wikipedia.org/wiki/Luhn\n         * @param {String} value\n         * @returns {Boolean}\n         */\n        luhn: function(value) {\n            var length  = value.length,\n                mul     = 0,\n                prodArr = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]],\n                sum     = 0;\n\n            while (length--) {\n                sum += prodArr[mul][parseInt(value.charAt(length), 10)];\n                mul ^= 1;\n            }\n\n            return (sum % 10 === 0 && sum > 0);\n        },\n\n        /**\n         * Implement modulus 11, 10 (ISO 7064) algorithm\n         *\n         * @param {String} value\n         * @returns {Boolean}\n         */\n        mod11And10: function(value) {\n            var check  = 5,\n                length = value.length;\n            for (var i = 0; i < length; i++) {\n                check = (((check || 10) * 2) % 11 + parseInt(value.charAt(i), 10)) % 10;\n            }\n            return (check === 1);\n        },\n\n        /**\n         * Implements Mod 37, 36 (ISO 7064) algorithm\n         * Usages:\n         * mod37And36('A12425GABC1234002M')\n         * mod37And36('002006673085', '0123456789')\n         *\n         * @param {String} value\n         * @param {String} [alphabet]\n         * @returns {Boolean}\n         */\n        mod37And36: function(value, alphabet) {\n            alphabet = alphabet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n            var modulus = alphabet.length,\n                length  = value.length,\n                check   = Math.floor(modulus / 2);\n            for (var i = 0; i < length; i++) {\n                check = (((check || modulus) * 2) % (modulus + 1) + alphabet.indexOf(value.charAt(i))) % modulus;\n            }\n            return (check === 1);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.base64 = $.extend($.fn.bootstrapValidator.i18n.base64 || {}, {\n        'default': 'Please enter a valid base 64 encoded'\n    });\n\n    $.fn.bootstrapValidator.validators.base64 = {\n        /**\n         * Return true if the input value is a base 64 encoded string.\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{4})$/.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.between = $.extend($.fn.bootstrapValidator.i18n.between || {}, {\n        'default': 'Please enter a value between %s and %s',\n        notInclusive: 'Please enter a value between %s and %s strictly'\n    });\n\n    $.fn.bootstrapValidator.validators.between = {\n        html5Attributes: {\n            message: 'message',\n            min: 'min',\n            max: 'max',\n            inclusive: 'inclusive'\n        },\n\n        enableByHtml5: function($field) {\n            if ('range' === $field.attr('type')) {\n                return {\n                    min: $field.attr('min'),\n                    max: $field.attr('max')\n                };\n            }\n\n            return false;\n        },\n\n        /**\n         * Return true if the input value is between (strictly or not) two given numbers\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - min\n         * - max\n         *\n         * The min, max keys define the number which the field value compares to. min, max can be\n         *      - A number\n         *      - Name of field which its value defines the number\n         *      - Name of callback function that returns the number\n         *      - A callback function that returns the number\n         *\n         * - inclusive [optional]: Can be true or false. Default is true\n         * - message: The invalid message\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n\t\t\tvalue = this._format(value);\n            if (!$.isNumeric(value)) {\n                return false;\n            }\n\n            var min      = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\n                max      = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\n                minValue = this._format(min),\n                maxValue = this._format(max);\n\n            value = parseFloat(value);\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\n                    ? {\n                        valid: value >= minValue && value <= maxValue,\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between['default'], [min, max])\n                    }\n                    : {\n                        valid: value > minValue  && value <  maxValue,\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.between.notInclusive, [min, max])\n                    };\n        },\n\n        _format: function(value) {\n            return (value + '').replace(',', '.');\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.validators.blank = {\n        /**\n         * Placeholder validator that can be used to display a custom validation message\n         * returned from the server\n         * Example:\n         *\n         * (1) a \"blank\" validator is applied to an input field.\n         * (2) data is entered via the UI that is unable to be validated client-side.\n         * (3) server returns a 400 with JSON data that contains the field that failed\n         *     validation and an associated message.\n         * (4) ajax 400 call handler does the following:\n         *\n         *      bv.updateMessage(field, 'blank', errorMessage);\n         *      bv.updateStatus(field, 'INVALID');\n         *\n         * @see https://github.com/nghuuphuoc/bootstrapvalidator/issues/542\n         * @see https://github.com/nghuuphuoc/bootstrapvalidator/pull/666\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            return true;\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.callback = $.extend($.fn.bootstrapValidator.i18n.callback || {}, {\n        'default': 'Please enter a valid value'\n    });\n\n    $.fn.bootstrapValidator.validators.callback = {\n        html5Attributes: {\n            message: 'message',\n            callback: 'callback'\n        },\n\n        /**\n         * Return result from the callback method\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - callback: The callback method that passes 2 parameters:\n         *      callback: function(fieldValue, validator, $field) {\n         *          // fieldValue is the value of field\n         *          // validator is instance of BootstrapValidator\n         *          // $field is the field element\n         *      }\n         * - message: The invalid message\n         * @returns {Deferred}\n         */\n        validate: function(validator, $field, options) {\n            var value  = $field.val(),\n                dfd    = new $.Deferred(),\n                result = { valid: true };\n\n            if (options.callback) {\n                var response = $.fn.bootstrapValidator.helpers.call(options.callback, [value, validator, $field]);\n                result = ('boolean' === typeof response) ? { valid: response } :  response;\n            }\n\n            dfd.resolve($field, 'callback', result);\n            return dfd;\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.choice = $.extend($.fn.bootstrapValidator.i18n.choice || {}, {\n        'default': 'Please enter a valid value',\n        less: 'Please choose %s options at minimum',\n        more: 'Please choose %s options at maximum',\n        between: 'Please choose %s - %s options'\n    });\n\n    $.fn.bootstrapValidator.validators.choice = {\n        html5Attributes: {\n            message: 'message',\n            min: 'min',\n            max: 'max'\n        },\n\n        /**\n         * Check if the number of checked boxes are less or more than a given number\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consists of following keys:\n         * - min\n         * - max\n         *\n         * At least one of two keys is required\n         * The min, max keys define the number which the field value compares to. min, max can be\n         *      - A number\n         *      - Name of field which its value defines the number\n         *      - Name of callback function that returns the number\n         *      - A callback function that returns the number\n         *\n         * - message: The invalid message\n         * @returns {Object}\n         */\n        validate: function(validator, $field, options) {\n            var numChoices = $field.is('select')\n                            ? validator.getFieldElements($field.attr('data-bv-field')).find('option').filter(':selected').length\n                            : validator.getFieldElements($field.attr('data-bv-field')).filter(':checked').length,\n                min        = options.min ? ($.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min)) : null,\n                max        = options.max ? ($.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max)) : null,\n                isValid    = true,\n                message    = options.message || $.fn.bootstrapValidator.i18n.choice['default'];\n\n            if ((min && numChoices < parseInt(min, 10)) || (max && numChoices > parseInt(max, 10))) {\n                isValid = false;\n            }\n\n            switch (true) {\n                case (!!min && !!max):\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.between, [parseInt(min, 10), parseInt(max, 10)]);\n                    break;\n\n                case (!!min):\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.less, parseInt(min, 10));\n                    break;\n\n                case (!!max):\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.choice.more, parseInt(max, 10));\n                    break;\n\n                default:\n                    break;\n            }\n\n            return { valid: isValid, message: message };\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.color = $.extend($.fn.bootstrapValidator.i18n.color || {}, {\n        'default': 'Please enter a valid color'\n    });\n\n    $.fn.bootstrapValidator.validators.color = {\n        SUPPORTED_TYPES: [\n            'hex', 'rgb', 'rgba', 'hsl', 'hsla', 'keyword'\n        ],\n\n        KEYWORD_COLORS: [\n            // Colors start with A\n            'aliceblue', 'antiquewhite', 'aqua', 'aquamarine', 'azure',\n            // B\n            'beige', 'bisque', 'black', 'blanchedalmond', 'blue', 'blueviolet', 'brown', 'burlywood',\n            // C\n            'cadetblue', 'chartreuse', 'chocolate', 'coral', 'cornflowerblue', 'cornsilk', 'crimson', 'cyan',\n            // D\n            'darkblue', 'darkcyan', 'darkgoldenrod', 'darkgray', 'darkgreen', 'darkgrey', 'darkkhaki', 'darkmagenta',\n            'darkolivegreen', 'darkorange', 'darkorchid', 'darkred', 'darksalmon', 'darkseagreen', 'darkslateblue',\n            'darkslategray', 'darkslategrey', 'darkturquoise', 'darkviolet', 'deeppink', 'deepskyblue', 'dimgray',\n            'dimgrey', 'dodgerblue',\n            // F\n            'firebrick', 'floralwhite', 'forestgreen', 'fuchsia',\n            // G\n            'gainsboro', 'ghostwhite', 'gold', 'goldenrod', 'gray', 'green', 'greenyellow', 'grey',\n            // H\n            'honeydew', 'hotpink',\n            // I\n            'indianred', 'indigo', 'ivory',\n            // K\n            'khaki',\n            // L\n            'lavender', 'lavenderblush', 'lawngreen', 'lemonchiffon', 'lightblue', 'lightcoral', 'lightcyan',\n            'lightgoldenrodyellow', 'lightgray', 'lightgreen', 'lightgrey', 'lightpink', 'lightsalmon', 'lightseagreen',\n            'lightskyblue', 'lightslategray', 'lightslategrey', 'lightsteelblue', 'lightyellow', 'lime', 'limegreen',\n            'linen',\n            // M\n            'magenta', 'maroon', 'mediumaquamarine', 'mediumblue', 'mediumorchid', 'mediumpurple', 'mediumseagreen',\n            'mediumslateblue', 'mediumspringgreen', 'mediumturquoise', 'mediumvioletred', 'midnightblue', 'mintcream',\n            'mistyrose', 'moccasin',\n            // N\n            'navajowhite', 'navy',\n            // O\n            'oldlace', 'olive', 'olivedrab', 'orange', 'orangered', 'orchid',\n            // P\n            'palegoldenrod', 'palegreen', 'paleturquoise', 'palevioletred', 'papayawhip', 'peachpuff', 'peru', 'pink',\n            'plum', 'powderblue', 'purple',\n            // R\n            'red', 'rosybrown', 'royalblue',\n            // S\n            'saddlebrown', 'salmon', 'sandybrown', 'seagreen', 'seashell', 'sienna', 'silver', 'skyblue', 'slateblue',\n            'slategray', 'slategrey', 'snow', 'springgreen', 'steelblue',\n            // T\n            'tan', 'teal', 'thistle', 'tomato', 'transparent', 'turquoise',\n            // V\n            'violet',\n            // W\n            'wheat', 'white', 'whitesmoke',\n            // Y\n            'yellow', 'yellowgreen'\n        ],\n\n        /**\n         * Return true if the input value is a valid color\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * - type: The array of valid color types\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var types = options.type || this.SUPPORTED_TYPES;\n            if (!$.isArray(types)) {\n                types = types.replace(/s/g, '').split(',');\n            }\n\n            var method,\n                type,\n                isValid = false;\n\n            for (var i = 0; i < types.length; i++) {\n                type    = types[i];\n                method  = '_' + type.toLowerCase();\n                isValid = isValid || this[method](value);\n                if (isValid) {\n                    return true;\n                }\n            }\n\n            return false;\n        },\n\n        _hex: function(value) {\n            return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\n        },\n\n        _hsl: function(value) {\n            return /^hsl\\((\\s*(-?\\d+)\\s*,)(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,)(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*)\\)$/.test(value);\n        },\n\n        _hsla: function(value) {\n            return /^hsla\\((\\s*(-?\\d+)\\s*,)(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,){2}(\\s*(0?(\\.\\d+)?|1(\\.0+)?)\\s*)\\)$/.test(value);\n        },\n\n        _keyword: function(value) {\n            return $.inArray(value, this.KEYWORD_COLORS) >= 0;\n        },\n\n        _rgb: function(value) {\n            var regexInteger = /^rgb\\((\\s*(\\b([01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\b)\\s*,){2}(\\s*(\\b([01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\b)\\s*)\\)$/,\n                regexPercent = /^rgb\\((\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,){2}(\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*)\\)$/;\n            return regexInteger.test(value) || regexPercent.test(value);\n        },\n\n        _rgba: function(value) {\n            var regexInteger = /^rgba\\((\\s*(\\b([01]?\\d{1,2}|2[0-4]\\d|25[0-5])\\b)\\s*,){3}(\\s*(0?(\\.\\d+)?|1(\\.0+)?)\\s*)\\)$/,\n                regexPercent = /^rgba\\((\\s*(\\b(0?\\d{1,2}|100)\\b%)\\s*,){3}(\\s*(0?(\\.\\d+)?|1(\\.0+)?)\\s*)\\)$/;\n            return regexInteger.test(value) || regexPercent.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.creditCard = $.extend($.fn.bootstrapValidator.i18n.creditCard || {}, {\n        'default': 'Please enter a valid credit card number'\n    });\n\n    $.fn.bootstrapValidator.validators.creditCard = {\n        /**\n         * Return true if the input value is valid credit card number\n         * Based on https://gist.github.com/DiegoSalazar/4075533\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} [options] Can consist of the following key:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // Accept only digits, dashes or spaces\n            if (/[^0-9-\\s]+/.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\D/g, '');\n\n            if (!$.fn.bootstrapValidator.helpers.luhn(value)) {\n                return false;\n            }\n\n            // Validate the card number based on prefix (IIN ranges) and length\n            var cards = {\n                AMERICAN_EXPRESS: {\n                    length: [15],\n                    prefix: ['34', '37']\n                },\n                DINERS_CLUB: {\n                    length: [14],\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\n                },\n                DINERS_CLUB_US: {\n                    length: [16],\n                    prefix: ['54', '55']\n                },\n                DISCOVER: {\n                    length: [16],\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\n                             '62214', '62215', '62216', '62217', '62218', '62219',\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\n                             '62290', '62291', '622920', '622921', '622922', '622923',\n                             '622924', '622925', '644', '645', '646', '647', '648',\n                             '649', '65']\n                },\n                JCB: {\n                    length: [16],\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\n                },\n                LASER: {\n                    length: [16, 17, 18, 19],\n                    prefix: ['6304', '6706', '6771', '6709']\n                },\n                MAESTRO: {\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\n                },\n                MASTERCARD: {\n                    length: [16],\n                    prefix: ['51', '52', '53', '54', '55']\n                },\n                SOLO: {\n                    length: [16, 18, 19],\n                    prefix: ['6334', '6767']\n                },\n                UNIONPAY: {\n                    length: [16, 17, 18, 19],\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\n                             '622920', '622921', '622922', '622923', '622924', '622925']\n                },\n                VISA: {\n                    length: [16],\n                    prefix: ['4']\n                }\n            };\n\n            var type, i;\n            for (type in cards) {\n                for (i in cards[type].prefix) {\n                    if (value.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]     // Check the prefix\n                        && $.inArray(value.length, cards[type].length) !== -1)                      // and length\n                    {\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.cusip = $.extend($.fn.bootstrapValidator.i18n.cusip || {}, {\n        'default': 'Please enter a valid CUSIP number'\n    });\n\n    $.fn.bootstrapValidator.validators.cusip = {\n        /**\n         * Validate a CUSIP\n         * Examples:\n         * - Valid: 037833100, 931142103, 14149YAR8, 126650BG6\n         * - Invalid: 31430F200, 022615AC2\n         *\n         * @see http://en.wikipedia.org/wiki/CUSIP\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} [options] Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            value = value.toUpperCase();\n            if (!/^[0-9A-Z]{9}$/.test(value)) {\n                return false;\n            }\n\n            var converted = $.map(value.split(''), function(item) {\n                                var code = item.charCodeAt(0);\n                                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\n                                            // Replace A, B, C, ..., Z with 10, 11, ..., 35\n                                            ? (code - 'A'.charCodeAt(0) + 10)\n                                            : item;\n                            }),\n                length    = converted.length,\n                sum       = 0;\n            for (var i = 0; i < length - 1; i++) {\n                var num = parseInt(converted[i], 10);\n                if (i % 2 !== 0) {\n                    num *= 2;\n                }\n                if (num > 9) {\n                    num -= 9;\n                }\n                sum += num;\n            }\n\n            sum = (10 - (sum % 10)) % 10;\n            return sum === converted[length - 1];\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.cvv = $.extend($.fn.bootstrapValidator.i18n.cvv || {}, {\n        'default': 'Please enter a valid CVV number'\n    });\n\n    $.fn.bootstrapValidator.validators.cvv = {\n        html5Attributes: {\n            message: 'message',\n            ccfield: 'creditCardField'\n        },\n\n        /**\n         * Return true if the input value is a valid CVV number.\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - creditCardField: The credit card number field. It can be null\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            if (!/^[0-9]{3,4}$/.test(value)) {\n                return false;\n            }\n\n            if (!options.creditCardField) {\n                return true;\n            }\n\n            // Get the credit card number\n            var creditCard = validator.getFieldElements(options.creditCardField).val();\n            if (creditCard === '') {\n                return true;\n            }\n            \n            creditCard = creditCard.replace(/\\D/g, '');\n\n            // Supported credit card types\n            var cards = {\n                AMERICAN_EXPRESS: {\n                    length: [15],\n                    prefix: ['34', '37']\n                },\n                DINERS_CLUB: {\n                    length: [14],\n                    prefix: ['300', '301', '302', '303', '304', '305', '36']\n                },\n                DINERS_CLUB_US: {\n                    length: [16],\n                    prefix: ['54', '55']\n                },\n                DISCOVER: {\n                    length: [16],\n                    prefix: ['6011', '622126', '622127', '622128', '622129', '62213',\n                             '62214', '62215', '62216', '62217', '62218', '62219',\n                             '6222', '6223', '6224', '6225', '6226', '6227', '6228',\n                             '62290', '62291', '622920', '622921', '622922', '622923',\n                             '622924', '622925', '644', '645', '646', '647', '648',\n                             '649', '65']\n                },\n                JCB: {\n                    length: [16],\n                    prefix: ['3528', '3529', '353', '354', '355', '356', '357', '358']\n                },\n                LASER: {\n                    length: [16, 17, 18, 19],\n                    prefix: ['6304', '6706', '6771', '6709']\n                },\n                MAESTRO: {\n                    length: [12, 13, 14, 15, 16, 17, 18, 19],\n                    prefix: ['5018', '5020', '5038', '6304', '6759', '6761', '6762', '6763', '6764', '6765', '6766']\n                },\n                MASTERCARD: {\n                    length: [16],\n                    prefix: ['51', '52', '53', '54', '55']\n                },\n                SOLO: {\n                    length: [16, 18, 19],\n                    prefix: ['6334', '6767']\n                },\n                UNIONPAY: {\n                    length: [16, 17, 18, 19],\n                    prefix: ['622126', '622127', '622128', '622129', '62213', '62214',\n                             '62215', '62216', '62217', '62218', '62219', '6222', '6223',\n                             '6224', '6225', '6226', '6227', '6228', '62290', '62291',\n                             '622920', '622921', '622922', '622923', '622924', '622925']\n                },\n                VISA: {\n                    length: [16],\n                    prefix: ['4']\n                }\n            };\n            var type, i, creditCardType = null;\n            for (type in cards) {\n                for (i in cards[type].prefix) {\n                    if (creditCard.substr(0, cards[type].prefix[i].length) === cards[type].prefix[i]    // Check the prefix\n                        && $.inArray(creditCard.length, cards[type].length) !== -1)                     // and length\n                    {\n                        creditCardType = type;\n                        break;\n                    }\n                }\n            }\n\n            return (creditCardType === null)\n                        ? false\n                        : (('AMERICAN_EXPRESS' === creditCardType) ? (value.length === 4) : (value.length === 3));\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.date = $.extend($.fn.bootstrapValidator.i18n.date || {}, {\n        'default': 'Please enter a valid date',\n        min: 'Please enter a date after %s',\n        max: 'Please enter a date before %s',\n        range: 'Please enter a date in the range %s - %s'\n    });\n\n    $.fn.bootstrapValidator.validators.date = {\n        html5Attributes: {\n            message: 'message',\n            format: 'format',\n            min: 'min',\n            max: 'max',\n            separator: 'separator'\n        },\n\n        /**\n         * Return true if the input value is valid date\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * - min: the minimum date\n         * - max: the maximum date\n         * - separator: Use to separate the date, month, and year.\n         * By default, it is /\n         * - format: The date format. Default is MM/DD/YYYY\n         * The format can be:\n         *\n         * i) date: Consist of DD, MM, YYYY parts which are separated by the separator option\n         * ii) date and time:\n         * The time can consist of h, m, s parts which are separated by :\n         * ii) date, time and A (indicating AM or PM)\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            options.format = options.format || 'MM/DD/YYYY';\n\n            // #683: Force the format to YYYY-MM-DD as the default browser behaviour when using type=\"date\" attribute\n            if ($field.attr('type') === 'date') {\n                options.format = 'YYYY-MM-DD';\n            }\n\n            var formats    = options.format.split(' '),\n                dateFormat = formats[0],\n                timeFormat = (formats.length > 1) ? formats[1] : null,\n                amOrPm     = (formats.length > 2) ? formats[2] : null,\n                sections   = value.split(' '),\n                date       = sections[0],\n                time       = (sections.length > 1) ? sections[1] : null;\n\n            if (formats.length !== sections.length) {\n                return {\n                    valid: false,\n                    message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                };\n            }\n\n            // Determine the separator\n            var separator = options.separator;\n            if (!separator) {\n                separator = (date.indexOf('/') !== -1) ? '/' : ((date.indexOf('-') !== -1) ? '-' : null);\n            }\n            if (separator === null || date.indexOf(separator) === -1) {\n                return {\n                    valid: false,\n                    message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                };\n            }\n\n            // Determine the date\n            date       = date.split(separator);\n            dateFormat = dateFormat.split(separator);\n            if (date.length !== dateFormat.length) {\n                return {\n                    valid: false,\n                    message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                };\n            }\n\n            var year  = date[$.inArray('YYYY', dateFormat)],\n                month = date[$.inArray('MM', dateFormat)],\n                day   = date[$.inArray('DD', dateFormat)];\n\n            if (!year || !month || !day || year.length !== 4) {\n                return {\n                    valid: false,\n                    message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                };\n            }\n\n            // Determine the time\n            var minutes = null, hours = null, seconds = null;\n            if (timeFormat) {\n                timeFormat = timeFormat.split(':');\n                time       = time.split(':');\n\n                if (timeFormat.length !== time.length) {\n                    return {\n                        valid: false,\n                        message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                    };\n                }\n\n                hours   = time.length > 0 ? time[0] : null;\n                minutes = time.length > 1 ? time[1] : null;\n                seconds = time.length > 2 ? time[2] : null;\n\n                // Validate seconds\n                if (seconds) {\n                    if (isNaN(seconds) || seconds.length > 2) {\n                        return {\n                            valid: false,\n                            message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                        };\n                    }\n                    seconds = parseInt(seconds, 10);\n                    if (seconds < 0 || seconds > 60) {\n                        return {\n                            valid: false,\n                            message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                        };\n                    }\n                }\n\n                // Validate hours\n                if (hours) {\n                    if (isNaN(hours) || hours.length > 2) {\n                        return {\n                            valid: false,\n                            message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                        };\n                    }\n                    hours = parseInt(hours, 10);\n                    if (hours < 0 || hours >= 24 || (amOrPm && hours > 12)) {\n                        return {\n                            valid: false,\n                            message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                        };\n                    }\n                }\n\n                // Validate minutes\n                if (minutes) {\n                    if (isNaN(minutes) || minutes.length > 2) {\n                        return {\n                            valid: false,\n                            message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                        };\n                    }\n                    minutes = parseInt(minutes, 10);\n                    if (minutes < 0 || minutes > 59) {\n                        return {\n                            valid: false,\n                            message: options.message || $.fn.bootstrapValidator.i18n.date['default']\n                        };\n                    }\n                }\n            }\n\n            // Validate day, month, and year\n            var valid   = $.fn.bootstrapValidator.helpers.date(year, month, day),\n                message = options.message || $.fn.bootstrapValidator.i18n.date['default'];\n\n            // declare the date, min and max objects\n            var min       = null,\n                max       = null,\n                minOption = options.min,\n                maxOption = options.max;\n\n            if (minOption) {\n                if (isNaN(Date.parse(minOption))) {\n                    minOption = validator.getDynamicOption($field, minOption);\n                }\n                min = this._parseDate(minOption, dateFormat, separator);\n            }\n\n            if (maxOption) {\n                if (isNaN(Date.parse(maxOption))) {\n                    maxOption = validator.getDynamicOption($field, maxOption);\n                }\n                max = this._parseDate(maxOption, dateFormat, separator);\n            }\n\n            date = new Date(year, month, day, hours, minutes, seconds);\n\n            switch (true) {\n                case (minOption && !maxOption && valid):\n                    valid   = date.getTime() >= min.getTime();\n                    message = options.message || $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.date.min, minOption);\n                    break;\n\n                case (maxOption && !minOption && valid):\n                    valid   = date.getTime() <= max.getTime();\n                    message = options.message || $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.date.max, maxOption);\n                    break;\n\n                case (maxOption && minOption && valid):\n                    valid   = date.getTime() <= max.getTime() && date.getTime() >= min.getTime();\n                    message = options.message || $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.date.range, [minOption, maxOption]);\n                    break;\n\n                default:\n                    break;\n            }\n\n            return {\n                valid: valid,\n                message: message\n            };\n        },\n\n        /**\n         * Return a date object after parsing the date string\n         *\n         * @param {String} date   The date string to parse\n         * @param {String} format The date format\n         * The format can be:\n         *   - date: Consist of DD, MM, YYYY parts which are separated by the separator option\n         *   - date and time:\n         *     The time can consist of h, m, s parts which are separated by :\n         * @param {String} separator The separator used to separate the date, month, and year\n         * @returns {Date}\n         */\n        _parseDate: function(date, format, separator) {\n            var minutes     = 0, hours = 0, seconds = 0,\n                sections    = date.split(' '),\n                dateSection = sections[0],\n                timeSection = (sections.length > 1) ? sections[1] : null;\n\n            dateSection = dateSection.split(separator);\n            var year  = dateSection[$.inArray('YYYY', format)],\n                month = dateSection[$.inArray('MM', format)],\n                day   = dateSection[$.inArray('DD', format)];\n            if (timeSection) {\n                timeSection = timeSection.split(':');\n                hours       = timeSection.length > 0 ? timeSection[0] : null;\n                minutes     = timeSection.length > 1 ? timeSection[1] : null;\n                seconds     = timeSection.length > 2 ? timeSection[2] : null;\n            }\n\n            return new Date(year, month, day, hours, minutes, seconds);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.different = $.extend($.fn.bootstrapValidator.i18n.different || {}, {\n        'default': 'Please enter a different value'\n    });\n\n    $.fn.bootstrapValidator.validators.different = {\n        html5Attributes: {\n            message: 'message',\n            field: 'field'\n        },\n\n        /**\n         * Return true if the input value is different with given field's value\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consists of the following key:\n         * - field: The name of field that will be used to compare with current one\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var fields  = options.field.split(','),\n                isValid = true;\n\n            for (var i = 0; i < fields.length; i++) {\n                var compareWith = validator.getFieldElements(fields[i]);\n                if (compareWith == null || compareWith.length === 0) {\n                    continue;\n                }\n\n                var compareValue = compareWith.val();\n                if (value === compareValue) {\n                    isValid = false;\n                } else if (compareValue !== '') {\n                    validator.updateStatus(compareWith, validator.STATUS_VALID, 'different');\n                }\n            }\n\n            return isValid;\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.digits = $.extend($.fn.bootstrapValidator.i18n.digits || {}, {\n        'default': 'Please enter only digits'\n    });\n\n    $.fn.bootstrapValidator.validators.digits = {\n        /**\n         * Return true if the input value contains digits only\n         *\n         * @param {BootstrapValidator} validator Validate plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} [options]\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            return /^\\d+$/.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.ean = $.extend($.fn.bootstrapValidator.i18n.ean || {}, {\n        'default': 'Please enter a valid EAN number'\n    });\n\n    $.fn.bootstrapValidator.validators.ean = {\n        /**\n         * Validate EAN (International Article Number)\n         * Examples:\n         * - Valid: 73513537, 9780471117094, 4006381333931\n         * - Invalid: 73513536\n         *\n         * @see http://en.wikipedia.org/wiki/European_Article_Number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            if (!/^(\\d{8}|\\d{12}|\\d{13})$/.test(value)) {\n                return false;\n            }\n\n            var length = value.length,\n                sum    = 0,\n                weight = (length === 8) ? [3, 1] : [1, 3];\n            for (var i = 0; i < length - 1; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\n            }\n            sum = (10 - sum % 10) % 10;\n            return (sum + '' === value.charAt(length - 1));\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.emailAddress = $.extend($.fn.bootstrapValidator.i18n.emailAddress || {}, {\n        'default': 'Please enter a valid email address'\n    });\n\n    $.fn.bootstrapValidator.validators.emailAddress = {\n        html5Attributes: {\n            message: 'message',\n            multiple: 'multiple',\n            separator: 'separator'\n        },\n\n        enableByHtml5: function($field) {\n            return ('email' === $field.attr('type'));\n        },\n\n        /**\n         * Return true if and only if the input value is a valid email address\n         *\n         * @param {BootstrapValidator} validator Validate plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} [options]\n         * - multiple: Allow multiple email addresses, separated by a comma or semicolon; default is false.\n         * - separator: Regex for character or characters expected as separator between addresses; default is comma /[,;]/, i.e. comma or semicolon.\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // Email address regular expression\n            // http://stackoverflow.com/questions/46155/validate-email-address-in-javascript\n            var emailRegExp   = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,\n                allowMultiple = options.multiple === true || options.multiple === 'true';\n\n            if (allowMultiple) {\n                var separator = options.separator || /[,;]/,\n                    addresses = this._splitEmailAddresses(value, separator);\n\n                for (var i = 0; i < addresses.length; i++) {\n                    if (!emailRegExp.test(addresses[i])) {\n                        return false;\n                    }\n                }\n\n                return true;\n            } else {\n                return emailRegExp.test(value);\n            }\n        },\n\n        _splitEmailAddresses: function(emailAddresses, separator) {\n            var quotedFragments     = emailAddresses.split(/\"/),\n                quotedFragmentCount = quotedFragments.length,\n                emailAddressArray   = [],\n                nextEmailAddress    = '';\n\n            for (var i = 0; i < quotedFragmentCount; i++) {\n                if (i % 2 === 0) {\n                    var splitEmailAddressFragments     = quotedFragments[i].split(separator),\n                        splitEmailAddressFragmentCount = splitEmailAddressFragments.length;\n\n                    if (splitEmailAddressFragmentCount === 1) {\n                        nextEmailAddress += splitEmailAddressFragments[0];\n                    } else {\n                        emailAddressArray.push(nextEmailAddress + splitEmailAddressFragments[0]);\n\n                        for (var j = 1; j < splitEmailAddressFragmentCount - 1; j++) {\n                            emailAddressArray.push(splitEmailAddressFragments[j]);\n                        }\n                        nextEmailAddress = splitEmailAddressFragments[splitEmailAddressFragmentCount - 1];\n                    }\n                } else {\n                    nextEmailAddress += '\"' + quotedFragments[i];\n                    if (i < quotedFragmentCount - 1) {\n                        nextEmailAddress += '\"';\n                    }\n                }\n            }\n\n            emailAddressArray.push(nextEmailAddress);\n            return emailAddressArray;\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.file = $.extend($.fn.bootstrapValidator.i18n.file || {}, {\n        'default': 'Please choose a valid file'\n    });\n\n    $.fn.bootstrapValidator.validators.file = {\n        html5Attributes: {\n            extension: 'extension',\n            maxfiles: 'maxFiles',\n            minfiles: 'minFiles',\n            maxsize: 'maxSize',\n            minsize: 'minSize',\n            maxtotalsize: 'maxTotalSize',\n            mintotalsize: 'minTotalSize',\n            message: 'message',\n            type: 'type'\n        },\n\n        /**\n         * Validate upload file. Use HTML 5 API if the browser supports\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - extension: The allowed extensions, separated by a comma\n         * - maxFiles: The maximum number of files\n         * - minFiles: The minimum number of files\n         * - maxSize: The maximum size in bytes\n         * - minSize: The minimum size in bytes\n         * - maxTotalSize: The maximum size in bytes for all files\n         * - minTotalSize: The minimum size in bytes for all files\n         * - message: The invalid message\n         * - type: The allowed MIME type, separated by a comma\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var ext,\n                extensions = options.extension ? options.extension.toLowerCase().split(',') : null,\n                types      = options.type      ? options.type.toLowerCase().split(',')      : null,\n                html5      = (window.File && window.FileList && window.FileReader);\n\n            if (html5) {\n                // Get FileList instance\n                var files     = $field.get(0).files,\n                    total     = files.length,\n                    totalSize = 0;\n\n                if ((options.maxFiles && total > parseInt(options.maxFiles, 10))        // Check the maxFiles\n                    || (options.minFiles && total < parseInt(options.minFiles, 10)))    // Check the minFiles\n                {\n                    return false;\n                }\n\n                for (var i = 0; i < total; i++) {\n                    totalSize += files[i].size;\n                    ext        = files[i].name.substr(files[i].name.lastIndexOf('.') + 1);\n\n                    if ((options.minSize && files[i].size < parseInt(options.minSize, 10))                      // Check the minSize\n                        || (options.maxSize && files[i].size > parseInt(options.maxSize, 10))                   // Check the maxSize\n                        || (extensions && $.inArray(ext.toLowerCase(), extensions) === -1)                      // Check file extension\n                        || (files[i].type && types && $.inArray(files[i].type.toLowerCase(), types) === -1))    // Check file type\n                    {\n                        return false;\n                    }\n                }\n\n                if ((options.maxTotalSize && totalSize > parseInt(options.maxTotalSize, 10))        // Check the maxTotalSize\n                    || (options.minTotalSize && totalSize < parseInt(options.minTotalSize, 10)))    // Check the minTotalSize\n                {\n                    return false;\n                }\n            } else {\n                // Check file extension\n                ext = value.substr(value.lastIndexOf('.') + 1);\n                if (extensions && $.inArray(ext.toLowerCase(), extensions) === -1) {\n                    return false;\n                }\n            }\n\n            return true;\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.greaterThan = $.extend($.fn.bootstrapValidator.i18n.greaterThan || {}, {\n        'default': 'Please enter a value greater than or equal to %s',\n        notInclusive: 'Please enter a value greater than %s'\n    });\n\n    $.fn.bootstrapValidator.validators.greaterThan = {\n        html5Attributes: {\n            message: 'message',\n            value: 'value',\n            inclusive: 'inclusive'\n        },\n\n        enableByHtml5: function($field) {\n            var type = $field.attr('type'),\n                min  = $field.attr('min');\n            if (min && type !== 'date') {\n                return {\n                    value: min\n                };\n            }\n\n            return false;\n        },\n\n        /**\n         * Return true if the input value is greater than or equals to given number\n         *\n         * @param {BootstrapValidator} validator Validate plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - value: Define the number to compare with. It can be\n         *      - A number\n         *      - Name of field which its value defines the number\n         *      - Name of callback function that returns the number\n         *      - A callback function that returns the number\n         *\n         * - inclusive [optional]: Can be true or false. Default is true\n         * - message: The invalid message\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n            \n            value = this._format(value);\n            if (!$.isNumeric(value)) {\n                return false;\n            }\n\n            var compareTo      = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value),\n                compareToValue = this._format(compareTo);\n\n            value = parseFloat(value);\n\t\t\treturn (options.inclusive === true || options.inclusive === undefined)\n                    ? {\n                        valid: value >= compareToValue,\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan['default'], compareTo)\n                    }\n                    : {\n                        valid: value > compareToValue,\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.greaterThan.notInclusive, compareTo)\n                    };\n        },\n\n        _format: function(value) {\n            return (value + '').replace(',', '.');\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.grid = $.extend($.fn.bootstrapValidator.i18n.grid || {}, {\n        'default': 'Please enter a valid GRId number'\n    });\n\n    $.fn.bootstrapValidator.validators.grid = {\n        /**\n         * Validate GRId (Global Release Identifier)\n         * Examples:\n         * - Valid: A12425GABC1234002M, A1-2425G-ABC1234002-M, A1 2425G ABC1234002 M, Grid:A1-2425G-ABC1234002-M\n         * - Invalid: A1-2425G-ABC1234002-Q\n         *\n         * @see http://en.wikipedia.org/wiki/Global_Release_Identifier\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            value = value.toUpperCase();\n            if (!/^[GRID:]*([0-9A-Z]{2})[-\\s]*([0-9A-Z]{5})[-\\s]*([0-9A-Z]{10})[-\\s]*([0-9A-Z]{1})$/g.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\s/g, '').replace(/-/g, '');\n            if ('GRID:' === value.substr(0, 5)) {\n                value = value.substr(5);\n            }\n            return $.fn.bootstrapValidator.helpers.mod37And36(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.hex = $.extend($.fn.bootstrapValidator.i18n.hex || {}, {\n        'default': 'Please enter a valid hexadecimal number'\n    });\n\n    $.fn.bootstrapValidator.validators.hex = {\n        /**\n         * Return true if and only if the input value is a valid hexadecimal number\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            return /^[0-9a-fA-F]+$/.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.hexColor = $.extend($.fn.bootstrapValidator.i18n.hexColor || {}, {\n        'default': 'Please enter a valid hex color'\n    });\n\n    $.fn.bootstrapValidator.validators.hexColor = {\n        enableByHtml5: function($field) {\n            return ('color' === $field.attr('type'));\n        },\n\n        /**\n         * Return true if the input value is a valid hex color\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            return ('color' === $field.attr('type'))\n                        // Only accept 6 hex character values due to the HTML 5 spec\n                        // See http://www.w3.org/TR/html-markup/input.color.html#input.color.attrs.value\n                        ? /^#[0-9A-F]{6}$/i.test(value)\n                        : /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.iban = $.extend($.fn.bootstrapValidator.i18n.iban || {}, {\n        'default': 'Please enter a valid IBAN number',\n        countryNotSupported: 'The country code %s is not supported',\n        country: 'Please enter a valid IBAN number in %s',\n        countries: {\n            AD: 'Andorra',\n            AE: 'United Arab Emirates',\n            AL: 'Albania',\n            AO: 'Angola',\n            AT: 'Austria',\n            AZ: 'Azerbaijan',\n            BA: 'Bosnia and Herzegovina',\n            BE: 'Belgium',\n            BF: 'Burkina Faso',\n            BG: 'Bulgaria',\n            BH: 'Bahrain',\n            BI: 'Burundi',\n            BJ: 'Benin',\n            BR: 'Brazil',\n            CH: 'Switzerland',\n            CI: 'Ivory Coast',\n            CM: 'Cameroon',\n            CR: 'Costa Rica',\n            CV: 'Cape Verde',\n            CY: 'Cyprus',\n            CZ: 'Czech Republic',\n            DE: 'Germany',\n            DK: 'Denmark',\n            DO: 'Dominican Republic',\n            DZ: 'Algeria',\n            EE: 'Estonia',\n            ES: 'Spain',\n            FI: 'Finland',\n            FO: 'Faroe Islands',\n            FR: 'France',\n            GB: 'United Kingdom',\n            GE: 'Georgia',\n            GI: 'Gibraltar',\n            GL: 'Greenland',\n            GR: 'Greece',\n            GT: 'Guatemala',\n            HR: 'Croatia',\n            HU: 'Hungary',\n            IE: 'Ireland',\n            IL: 'Israel',\n            IR: 'Iran',\n            IS: 'Iceland',\n            IT: 'Italy',\n            JO: 'Jordan',\n            KW: 'Kuwait',\n            KZ: 'Kazakhstan',\n            LB: 'Lebanon',\n            LI: 'Liechtenstein',\n            LT: 'Lithuania',\n            LU: 'Luxembourg',\n            LV: 'Latvia',\n            MC: 'Monaco',\n            MD: 'Moldova',\n            ME: 'Montenegro',\n            MG: 'Madagascar',\n            MK: 'Macedonia',\n            ML: 'Mali',\n            MR: 'Mauritania',\n            MT: 'Malta',\n            MU: 'Mauritius',\n            MZ: 'Mozambique',\n            NL: 'Netherlands',\n            NO: 'Norway',\n            PK: 'Pakistan',\n            PL: 'Poland',\n            PS: 'Palestine',\n            PT: 'Portugal',\n            QA: 'Qatar',\n            RO: 'Romania',\n            RS: 'Serbia',\n            SA: 'Saudi Arabia',\n            SE: 'Sweden',\n            SI: 'Slovenia',\n            SK: 'Slovakia',\n            SM: 'San Marino',\n            SN: 'Senegal',\n            TN: 'Tunisia',\n            TR: 'Turkey',\n            VG: 'Virgin Islands, British'\n        }\n    });\n\n    $.fn.bootstrapValidator.validators.iban = {\n        html5Attributes: {\n            message: 'message',\n            country: 'country'\n        },\n\n        // http://www.swift.com/dsp/resources/documents/IBAN_Registry.pdf\n        // http://en.wikipedia.org/wiki/International_Bank_Account_Number#IBAN_formats_by_country\n        REGEX: {\n            AD: 'AD[0-9]{2}[0-9]{4}[0-9]{4}[A-Z0-9]{12}',                       // Andorra\n            AE: 'AE[0-9]{2}[0-9]{3}[0-9]{16}',                                  // United Arab Emirates\n            AL: 'AL[0-9]{2}[0-9]{8}[A-Z0-9]{16}',                               // Albania\n            AO: 'AO[0-9]{2}[0-9]{21}',                                          // Angola\n            AT: 'AT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Austria\n            AZ: 'AZ[0-9]{2}[A-Z]{4}[A-Z0-9]{20}',                               // Azerbaijan\n            BA: 'BA[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{8}[0-9]{2}',                   // Bosnia and Herzegovina\n            BE: 'BE[0-9]{2}[0-9]{3}[0-9]{7}[0-9]{2}',                           // Belgium\n            BF: 'BF[0-9]{2}[0-9]{23}',                                          // Burkina Faso\n            BG: 'BG[0-9]{2}[A-Z]{4}[0-9]{4}[0-9]{2}[A-Z0-9]{8}',                // Bulgaria\n            BH: 'BH[0-9]{2}[A-Z]{4}[A-Z0-9]{14}',                               // Bahrain\n            BI: 'BI[0-9]{2}[0-9]{12}',                                          // Burundi\n            BJ: 'BJ[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Benin\n            BR: 'BR[0-9]{2}[0-9]{8}[0-9]{5}[0-9]{10}[A-Z][A-Z0-9]',             // Brazil\n            CH: 'CH[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Switzerland\n            CI: 'CI[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Ivory Coast\n            CM: 'CM[0-9]{2}[0-9]{23}',                                          // Cameroon\n            CR: 'CR[0-9]{2}[0-9]{3}[0-9]{14}',                                  // Costa Rica\n            CV: 'CV[0-9]{2}[0-9]{21}',                                          // Cape Verde\n            CY: 'CY[0-9]{2}[0-9]{3}[0-9]{5}[A-Z0-9]{16}',                       // Cyprus\n            CZ: 'CZ[0-9]{2}[0-9]{20}',                                          // Czech Republic\n            DE: 'DE[0-9]{2}[0-9]{8}[0-9]{10}',                                  // Germany\n            DK: 'DK[0-9]{2}[0-9]{14}',                                          // Denmark\n            DO: 'DO[0-9]{2}[A-Z0-9]{4}[0-9]{20}',                               // Dominican Republic\n            DZ: 'DZ[0-9]{2}[0-9]{20}',                                          // Algeria\n            EE: 'EE[0-9]{2}[0-9]{2}[0-9]{2}[0-9]{11}[0-9]{1}',                  // Estonia\n            ES: 'ES[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{1}[0-9]{1}[0-9]{10}',          // Spain\n            FI: 'FI[0-9]{2}[0-9]{6}[0-9]{7}[0-9]{1}',                           // Finland\n            FO: 'FO[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Faroe Islands\n            FR: 'FR[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // France\n            GB: 'GB[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // United Kingdom\n            GE: 'GE[0-9]{2}[A-Z]{2}[0-9]{16}',                                  // Georgia\n            GI: 'GI[0-9]{2}[A-Z]{4}[A-Z0-9]{15}',                               // Gibraltar\n            GL: 'GL[0-9]{2}[0-9]{4}[0-9]{9}[0-9]{1}',                           // Greenland\n            GR: 'GR[0-9]{2}[0-9]{3}[0-9]{4}[A-Z0-9]{16}',                       // Greece\n            GT: 'GT[0-9]{2}[A-Z0-9]{4}[A-Z0-9]{20}',                            // Guatemala\n            HR: 'HR[0-9]{2}[0-9]{7}[0-9]{10}',                                  // Croatia\n            HU: 'HU[0-9]{2}[0-9]{3}[0-9]{4}[0-9]{1}[0-9]{15}[0-9]{1}',          // Hungary\n            IE: 'IE[0-9]{2}[A-Z]{4}[0-9]{6}[0-9]{8}',                           // Ireland\n            IL: 'IL[0-9]{2}[0-9]{3}[0-9]{3}[0-9]{13}',                          // Israel\n            IR: 'IR[0-9]{2}[0-9]{22}',                                          // Iran\n            IS: 'IS[0-9]{2}[0-9]{4}[0-9]{2}[0-9]{6}[0-9]{10}',                  // Iceland\n            IT: 'IT[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // Italy\n            JO: 'JO[0-9]{2}[A-Z]{4}[0-9]{4}[0]{8}[A-Z0-9]{10}',                 // Jordan\n            KW: 'KW[0-9]{2}[A-Z]{4}[0-9]{22}',                                  // Kuwait\n            KZ: 'KZ[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Kazakhstan\n            LB: 'LB[0-9]{2}[0-9]{4}[A-Z0-9]{20}',                               // Lebanon\n            LI: 'LI[0-9]{2}[0-9]{5}[A-Z0-9]{12}',                               // Liechtenstein\n            LT: 'LT[0-9]{2}[0-9]{5}[0-9]{11}',                                  // Lithuania\n            LU: 'LU[0-9]{2}[0-9]{3}[A-Z0-9]{13}',                               // Luxembourg\n            LV: 'LV[0-9]{2}[A-Z]{4}[A-Z0-9]{13}',                               // Latvia\n            MC: 'MC[0-9]{2}[0-9]{5}[0-9]{5}[A-Z0-9]{11}[0-9]{2}',               // Monaco\n            MD: 'MD[0-9]{2}[A-Z0-9]{20}',                                       // Moldova\n            ME: 'ME[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Montenegro\n            MG: 'MG[0-9]{2}[0-9]{23}',                                          // Madagascar\n            MK: 'MK[0-9]{2}[0-9]{3}[A-Z0-9]{10}[0-9]{2}',                       // Macedonia\n            ML: 'ML[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Mali\n            MR: 'MR13[0-9]{5}[0-9]{5}[0-9]{11}[0-9]{2}',                        // Mauritania\n            MT: 'MT[0-9]{2}[A-Z]{4}[0-9]{5}[A-Z0-9]{18}',                       // Malta\n            MU: 'MU[0-9]{2}[A-Z]{4}[0-9]{2}[0-9]{2}[0-9]{12}[0-9]{3}[A-Z]{3}',  // Mauritius\n            MZ: 'MZ[0-9]{2}[0-9]{21}',                                          // Mozambique\n            NL: 'NL[0-9]{2}[A-Z]{4}[0-9]{10}',                                  // Netherlands\n            NO: 'NO[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{1}',                           // Norway\n            PK: 'PK[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Pakistan\n            PL: 'PL[0-9]{2}[0-9]{8}[0-9]{16}',                                  // Poland\n            PS: 'PS[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Palestinian\n            PT: 'PT[0-9]{2}[0-9]{4}[0-9]{4}[0-9]{11}[0-9]{2}',                  // Portugal\n            QA: 'QA[0-9]{2}[A-Z]{4}[A-Z0-9]{21}',                               // Qatar\n            RO: 'RO[0-9]{2}[A-Z]{4}[A-Z0-9]{16}',                               // Romania\n            RS: 'RS[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                          // Serbia\n            SA: 'SA[0-9]{2}[0-9]{2}[A-Z0-9]{18}',                               // Saudi Arabia\n            SE: 'SE[0-9]{2}[0-9]{3}[0-9]{16}[0-9]{1}',                          // Sweden\n            SI: 'SI[0-9]{2}[0-9]{5}[0-9]{8}[0-9]{2}',                           // Slovenia\n            SK: 'SK[0-9]{2}[0-9]{4}[0-9]{6}[0-9]{10}',                          // Slovakia\n            SM: 'SM[0-9]{2}[A-Z]{1}[0-9]{5}[0-9]{5}[A-Z0-9]{12}',               // San Marino\n            SN: 'SN[0-9]{2}[A-Z]{1}[0-9]{23}',                                  // Senegal\n            TN: 'TN59[0-9]{2}[0-9]{3}[0-9]{13}[0-9]{2}',                        // Tunisia\n            TR: 'TR[0-9]{2}[0-9]{5}[A-Z0-9]{1}[A-Z0-9]{16}',                    // Turkey\n            VG: 'VG[0-9]{2}[A-Z]{4}[0-9]{16}'                                   // Virgin Islands, British\n        },\n\n        /**\n         * Validate an International Bank Account Number (IBAN)\n         * To test it, take the sample IBAN from\n         * http://www.nordea.com/Our+services/International+products+and+services/Cash+Management/IBAN+countries/908462.html\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * - country: The ISO 3166-1 country code. It can be\n         *      - A country code\n         *      - Name of field which its value defines the country code\n         *      - Name of callback function that returns the country code\n         *      - A callback function that returns the country code\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            value = value.replace(/[^a-zA-Z0-9]/g, '').toUpperCase();\n            var country = options.country;\n            if (!country) {\n                country = value.substr(0, 2);\n            } else if (typeof country !== 'string' || !this.REGEX[country]) {\n                // Determine the country code\n                country = validator.getDynamicOption($field, country);\n            }\n\n            if (!this.REGEX[country]) {\n                return {\n                    valid: false,\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.iban.countryNotSupported, country)\n                };\n            }\n\n            if (!(new RegExp('^' + this.REGEX[country] + '$')).test(value)) {\n                return {\n                    valid: false,\n                    message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\n                };\n            }\n\n            value = value.substr(4) + value.substr(0, 4);\n            value = $.map(value.split(''), function(n) {\n                var code = n.charCodeAt(0);\n                return (code >= 'A'.charCodeAt(0) && code <= 'Z'.charCodeAt(0))\n                        // Replace A, B, C, ..., Z with 10, 11, ..., 35\n                        ? (code - 'A'.charCodeAt(0) + 10)\n                        : n;\n            });\n            value = value.join('');\n\n            var temp   = parseInt(value.substr(0, 1), 10),\n                length = value.length;\n            for (var i = 1; i < length; ++i) {\n                temp = (temp * 10 + parseInt(value.substr(i, 1), 10)) % 97;\n            }\n\n            return {\n                valid: (temp === 1),\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.iban.country, $.fn.bootstrapValidator.i18n.iban.countries[country])\n            };\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.id = $.extend($.fn.bootstrapValidator.i18n.id || {}, {\n        'default': 'Please enter a valid identification number',\n        countryNotSupported: 'The country code %s is not supported',\n        country: 'Please enter a valid identification number in %s',\n        countries: {\n            BA: 'Bosnia and Herzegovina',\n            BG: 'Bulgaria',\n            BR: 'Brazil',\n            CH: 'Switzerland',\n            CL: 'Chile',\n            CN: 'China',\n            CZ: 'Czech Republic',\n            DK: 'Denmark',\n            EE: 'Estonia',\n            ES: 'Spain',\n            FI: 'Finland',\n            HR: 'Croatia',\n            IE: 'Ireland',\n            IS: 'Iceland',\n            LT: 'Lithuania',\n            LV: 'Latvia',\n            ME: 'Montenegro',\n            MK: 'Macedonia',\n            NL: 'Netherlands',\n            RO: 'Romania',\n            RS: 'Serbia',\n            SE: 'Sweden',\n            SI: 'Slovenia',\n            SK: 'Slovakia',\n            SM: 'San Marino',\n            TH: 'Thailand',\n            ZA: 'South Africa'\n        }\n    });\n\n    $.fn.bootstrapValidator.validators.id = {\n        html5Attributes: {\n            message: 'message',\n            country: 'country'\n        },\n\n        // Supported country codes\n        COUNTRY_CODES: [\n            'BA', 'BG', 'BR', 'CH', 'CL', 'CN', 'CZ', 'DK', 'EE', 'ES', 'FI', 'HR', 'IE', 'IS', 'LT', 'LV', 'ME', 'MK', 'NL',\n            'RO', 'RS', 'SE', 'SI', 'SK', 'SM', 'TH', 'ZA'\n        ],\n\n        /**\n         * Validate identification number in different countries\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * - country: The ISO 3166-1 country code. It can be\n         *      - One of country code defined in COUNTRY_CODES\n         *      - Name of field which its value defines the country code\n         *      - Name of callback function that returns the country code\n         *      - A callback function that returns the country code\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var country = options.country;\n            if (!country) {\n                country = value.substr(0, 2);\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n                // Determine the country code\n                country = validator.getDynamicOption($field, country);\n            }\n\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\n                return { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.id.countryNotSupported, country) };\n            }\n\n            var method  = ['_', country.toLowerCase()].join('');\n            return this[method](value)\n                    ? true\n                    : {\n                        valid: false,\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.id.country, $.fn.bootstrapValidator.i18n.id.countries[country.toUpperCase()])\n                    };\n        },\n\n        /**\n         * Validate Unique Master Citizen Number which uses in\n         * - Bosnia and Herzegovina (country code: BA)\n         * - Macedonia (MK)\n         * - Montenegro (ME)\n         * - Serbia (RS)\n         * - Slovenia (SI)\n         *\n         * @see http://en.wikipedia.org/wiki/Unique_Master_Citizen_Number\n         * @param {String} value The ID\n         * @param {String} countryCode The ISO country code, can be BA, MK, ME, RS, SI\n         * @returns {Boolean}\n         */\n        _validateJMBG: function(value, countryCode) {\n            if (!/^\\d{13}$/.test(value)) {\n                return false;\n            }\n            var day   = parseInt(value.substr(0, 2), 10),\n                month = parseInt(value.substr(2, 2), 10),\n                year  = parseInt(value.substr(4, 3), 10),\n                rr    = parseInt(value.substr(7, 2), 10),\n                k     = parseInt(value.substr(12, 1), 10);\n\n            // Validate date of birth\n            // FIXME: Validate the year of birth\n            if (day > 31 || month > 12) {\n                return false;\n            }\n\n            // Validate checksum\n            var sum = 0;\n            for (var i = 0; i < 6; i++) {\n                sum += (7 - i) * (parseInt(value.charAt(i), 10) + parseInt(value.charAt(i + 6), 10));\n            }\n            sum = 11 - sum % 11;\n            if (sum === 10 || sum === 11) {\n                sum = 0;\n            }\n            if (sum !== k) {\n                return false;\n            }\n\n            // Validate political region\n            // rr is the political region of birth, which can be in ranges:\n            // 10-19: Bosnia and Herzegovina\n            // 20-29: Montenegro\n            // 30-39: Croatia (not used anymore)\n            // 41-49: Macedonia\n            // 50-59: Slovenia (only 50 is used)\n            // 70-79: Central Serbia\n            // 80-89: Serbian province of Vojvodina\n            // 90-99: Kosovo\n            switch (countryCode.toUpperCase()) {\n                case 'BA':\n                    return (10 <= rr && rr <= 19);\n                case 'MK':\n                    return (41 <= rr && rr <= 49);\n                case 'ME':\n                    return (20 <= rr && rr <= 29);\n                case 'RS':\n                    return (70 <= rr && rr <= 99);\n                case 'SI':\n                    return (50 <= rr && rr <= 59);\n                default:\n                    return true;\n            }\n        },\n\n        _ba: function(value) {\n            return this._validateJMBG(value, 'BA');\n        },\n        _mk: function(value) {\n            return this._validateJMBG(value, 'MK');\n        },\n        _me: function(value) {\n            return this._validateJMBG(value, 'ME');\n        },\n        _rs: function(value) {\n            return this._validateJMBG(value, 'RS');\n        },\n\n        /**\n         * Examples: 0101006500006\n         */\n        _si: function(value) {\n            return this._validateJMBG(value, 'SI');\n        },\n\n        /**\n         * Validate Bulgarian national identification number (EGN)\n         * Examples:\n         * - Valid: 7523169263, 8032056031, 803205 603 1, 8001010008, 7501020018, 7552010005, 7542011030\n         * - Invalid: 8019010008\n         *\n         * @see http://en.wikipedia.org/wiki/Uniform_civil_number\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _bg: function(value) {\n            if (!/^\\d{10}$/.test(value) && !/^\\d{6}\\s\\d{3}\\s\\d{1}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\s/g, '');\n            // Check the birth date\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\n                month = parseInt(value.substr(2, 2), 10),\n                day   = parseInt(value.substr(4, 2), 10);\n            if (month > 40) {\n                year += 100;\n                month -= 40;\n            } else if (month > 20) {\n                year -= 100;\n                month -= 20;\n            }\n\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n            for (var i = 0; i < 9; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = (sum % 11) % 10;\n            return (sum + '' === value.substr(9, 1));\n        },\n\n        /**\n         * Validate Brazilian national identification number (CPF)\n         * Examples:\n         * - Valid: 39053344705, 390.533.447-05, 111.444.777-35\n         * - Invalid: 231.002.999-00\n         *\n         * @see http://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _br: function(value) {\n            if (/^1{11}|2{11}|3{11}|4{11}|5{11}|6{11}|7{11}|8{11}|9{11}|0{11}$/.test(value)) {\n                return false;\n            }\n            if (!/^\\d{11}$/.test(value) && !/^\\d{3}\\.\\d{3}\\.\\d{3}-\\d{2}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\./g, '').replace(/-/g, '');\n\n            var d1 = 0;\n            for (var i = 0; i < 9; i++) {\n                d1 += (10 - i) * parseInt(value.charAt(i), 10);\n            }\n            d1 = 11 - d1 % 11;\n            if (d1 === 10 || d1 === 11) {\n                d1 = 0;\n            }\n            if (d1 + '' !== value.charAt(9)) {\n                return false;\n            }\n\n            var d2 = 0;\n            for (i = 0; i < 10; i++) {\n                d2 += (11 - i) * parseInt(value.charAt(i), 10);\n            }\n            d2 = 11 - d2 % 11;\n            if (d2 === 10 || d2 === 11) {\n                d2 = 0;\n            }\n\n            return (d2 + '' === value.charAt(10));\n        },\n\n        /**\n         * Validate Swiss Social Security Number (AHV-Nr/No AVS)\n         * Examples:\n         * - Valid: 756.1234.5678.95, 7561234567895\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Switzerland\n         * @see http://www.bsv.admin.ch/themen/ahv/00011/02185/index.html?lang=de\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _ch: function(value) {\n            if (!/^756[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{4}[\\.]{0,1}[0-9]{2}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\D/g, '').substr(3);\n            var length = value.length,\n                sum    = 0,\n                weight = (length === 8) ? [3, 1] : [1, 3];\n            for (var i = 0; i < length - 1; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\n            }\n            sum = 10 - sum % 10;\n            return (sum + '' === value.charAt(length - 1));\n        },\n\n        /**\n         * Validate Chilean national identification number (RUN/RUT)\n         * Examples:\n         * - Valid: 76086428-5, 22060449-7, 12531909-2\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Chile\n         * @see https://palena.sii.cl/cvc/dte/ee_empresas_emisoras.html for samples\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _cl: function(value) {\n            if (!/^\\d{7,8}[-]{0,1}[0-9K]$/i.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\-/g, '');\n            while (value.length < 9) {\n                value = '0' + value;\n            }\n            var sum    = 0,\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = 11 - sum % 11;\n            if (sum === 11) {\n                sum = 0;\n            } else if (sum === 10) {\n                sum = 'K';\n            }\n            return sum + '' === value.charAt(8).toUpperCase();\n        },\n\n        /**\n         * Validate Chinese citizen identification number\n         *\n         * Rules:\n         * - For current 18-digit system (since 1st Oct 1999, defined by GB11643—1999 national standard):\n         *     - Digit 0-5: Must be a valid administrative division code of China PR.\n         *     - Digit 6-13: Must be a valid YYYYMMDD date of birth. A future date is tolerated.\n         *     - Digit 14-16: Order code, any integer.\n         *     - Digit 17: An ISO 7064:1983, MOD 11-2 checksum.\n         *       Both upper/lower case of X are tolerated.\n         * - For deprecated 15-digit system:\n         *     - Digit 0-5: Must be a valid administrative division code of China PR.\n         *     - Digit 6-11: Must be a valid YYMMDD date of birth, indicating the year of 19XX.\n         *     - Digit 12-14: Order code, any integer.\n         * Lists of valid administrative division codes of China PR can be seen here:\n         * <http://www.stats.gov.cn/tjsj/tjbz/xzqhdm/>\n         * Published and maintained by National Bureau of Statistics of China PR.\n         * NOTE: Current and deprecated codes MUST BOTH be considered valid.\n         * Many Chinese citizens born in once existed administrative divisions!\n         *\n         * @see http://en.wikipedia.org/wiki/Resident_Identity_Card#Identity_card_number\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _cn: function(value) {\n            // Basic format check (18 or 15 digits, considering X in checksum)\n            value = value.trim();\n            if (!/^\\d{15}$/.test(value) && !/^\\d{17}[\\dXx]{1}$/.test(value)) {\n                return false;\n            }\n            \n            // Check China PR Administrative division code\n            var adminDivisionCodes = {\n                11: {\n                    0: [0],\n                    1: [[0, 9], [11, 17]],\n                    2: [0, 28, 29]\n                },\n                12: {\n                    0: [0],\n                    1: [[0, 16]],\n                    2: [0, 21, 23, 25]\n                },\n                13: {\n                    0: [0],\n                    1: [[0, 5], 7, 8, 21, [23, 33], [81, 85]],\n                    2: [[0, 5], [7, 9], [23, 25], 27, 29, 30, 81, 83],\n                    3: [[0, 4], [21, 24]],\n                    4: [[0, 4], 6, 21, [23, 35], 81],\n                    5: [[0, 3], [21, 35], 81, 82],\n                    6: [[0, 4], [21, 38], [81, 84]],\n                    7: [[0, 3], 5, 6, [21, 33]],\n                    8: [[0, 4], [21, 28]],\n                    9: [[0, 3], [21, 30], [81, 84]],\n                    10: [[0, 3], [22, 26], 28, 81, 82],\n                    11: [[0, 2], [21, 28], 81, 82]\n                },\n                14: {\n                    0: [0],\n                    1: [0, 1, [5, 10], [21, 23], 81],\n                    2: [[0, 3], 11, 12, [21, 27]],\n                    3: [[0, 3], 11, 21, 22],\n                    4: [[0, 2], 11, 21, [23, 31], 81],\n                    5: [[0, 2], 21, 22, 24, 25, 81],\n                    6: [[0, 3], [21, 24]],\n                    7: [[0, 2], [21, 29], 81],\n                    8: [[0, 2], [21, 30], 81, 82],\n                    9: [[0, 2], [21, 32], 81],\n                    10: [[0, 2], [21, 34], 81, 82],\n                    11: [[0, 2], [21, 30], 81, 82],\n                    23: [[0, 3], 22, 23, [25, 30], 32, 33]\n                },\n                15: {\n                    0: [0],\n                    1: [[0, 5], [21, 25]],\n                    2: [[0, 7], [21, 23]],\n                    3: [[0, 4]],\n                    4: [[0, 4], [21, 26], [28, 30]],\n                    5: [[0, 2], [21, 26], 81],\n                    6: [[0, 2], [21, 27]],\n                    7: [[0, 3], [21, 27], [81, 85]],\n                    8: [[0, 2], [21, 26]],\n                    9: [[0, 2], [21, 29], 81],\n                    22: [[0, 2], [21, 24]],\n                    25: [[0, 2], [22, 31]],\n                    26: [[0, 2], [24, 27], [29, 32], 34],\n                    28: [0, 1, [22, 27]],\n                    29: [0, [21, 23]]\n                },\n                21: {\n                    0: [0],\n                    1: [[0, 6], [11, 14], [22, 24], 81],\n                    2: [[0, 4], [11, 13], 24, [81, 83]],\n                    3: [[0, 4], 11, 21, 23, 81],\n                    4: [[0, 4], 11, [21, 23]],\n                    5: [[0, 5], 21, 22],\n                    6: [[0, 4], 24, 81, 82],\n                    7: [[0, 3], 11, 26, 27, 81, 82],\n                    8: [[0, 4], 11, 81, 82],\n                    9: [[0, 5], 11, 21, 22],\n                    10: [[0, 5], 11, 21, 81],\n                    11: [[0, 3], 21, 22],\n                    12: [[0, 2], 4, 21, 23, 24, 81, 82],\n                    13: [[0, 3], 21, 22, 24, 81, 82],\n                    14: [[0, 4], 21, 22, 81]\n                },\n                22: {\n                    0: [0],\n                    1: [[0, 6], 12, 22, [81, 83]],\n                    2: [[0, 4], 11, 21, [81, 84]],\n                    3: [[0, 3], 22, 23, 81, 82],\n                    4: [[0, 3], 21, 22],\n                    5: [[0, 3], 21, 23, 24, 81, 82],\n                    6: [[0, 2], 4, 5, [21, 23], 25, 81],\n                    7: [[0, 2], [21, 24], 81],\n                    8: [[0, 2], 21, 22, 81, 82],\n                    24: [[0, 6], 24, 26]\n                },\n                23: {\n                    0: [0],\n                    1: [[0, 12], 21, [23, 29], [81, 84]],\n                    2: [[0, 8], 21, [23, 25], 27, [29, 31], 81],\n                    3: [[0, 7], 21, 81, 82],\n                    4: [[0, 7], 21, 22],\n                    5: [[0, 3], 5, 6, [21, 24]],\n                    6: [[0, 6], [21, 24]],\n                    7: [[0, 16], 22, 81],\n                    8: [[0, 5], 11, 22, 26, 28, 33, 81, 82],\n                    9: [[0, 4], 21],\n                    10: [[0, 5], 24, 25, 81, [83, 85]],\n                    11: [[0, 2], 21, 23, 24, 81, 82],\n                    12: [[0, 2], [21, 26], [81, 83]],\n                    27: [[0, 4], [21, 23]]\n                },\n                31: {\n                    0: [0],\n                    1: [0, 1, [3, 10], [12, 20]],\n                    2: [0, 30]\n                },\n                32: {\n                    0: [0],\n                    1: [[0, 7], 11, [13, 18], 24, 25],\n                    2: [[0, 6], 11, 81, 82],\n                    3: [[0, 5], 11, 12, [21, 24], 81, 82],\n                    4: [[0, 2], 4, 5, 11, 12, 81, 82],\n                    5: [[0, 9], [81, 85]],\n                    6: [[0, 2], 11, 12, 21, 23, [81, 84]],\n                    7: [0, 1, 3, 5, 6, [21, 24]],\n                    8: [[0, 4], 11, 26, [29, 31]],\n                    9: [[0, 3], [21, 25], 28, 81, 82],\n                    10: [[0, 3], 11, 12, 23, 81, 84, 88],\n                    11: [[0, 2], 11, 12, [81, 83]],\n                    12: [[0, 4], [81, 84]],\n                    13: [[0, 2], 11, [21, 24]]\n                },\n                33: {\n                    0: [0],\n                    1: [[0, 6], [8, 10], 22, 27, 82, 83, 85],\n                    2: [0, 1, [3, 6], 11, 12, 25, 26, [81, 83]],\n                    3: [[0, 4], 22, 24, [26, 29], 81, 82],\n                    4: [[0, 2], 11, 21, 24, [81, 83]],\n                    5: [[0, 3], [21, 23]],\n                    6: [[0, 2], 21, 24, [81, 83]],\n                    7: [[0, 3], 23, 26, 27, [81, 84]],\n                    8: [[0, 3], 22, 24, 25, 81],\n                    9: [[0, 3], 21, 22],\n                    10: [[0, 4], [21, 24], 81, 82],\n                    11: [[0, 2], [21, 27], 81]\n                },\n                34: {\n                    0: [0],\n                    1: [[0, 4], 11, [21, 24], 81],\n                    2: [[0, 4], 7, 8, [21, 23], 25],\n                    3: [[0, 4], 11, [21, 23]],\n                    4: [[0, 6], 21],\n                    5: [[0, 4], 6, [21, 23]],\n                    6: [[0, 4], 21],\n                    7: [[0, 3], 11, 21],\n                    8: [[0, 3], 11, [22, 28], 81],\n                    10: [[0, 4], [21, 24]],\n                    11: [[0, 3], 22, [24, 26], 81, 82],\n                    12: [[0, 4], 21, 22, 25, 26, 82],\n                    13: [[0, 2], [21, 24]],\n                    14: [[0, 2], [21, 24]],\n                    15: [[0, 3], [21, 25]],\n                    16: [[0, 2], [21, 23]],\n                    17: [[0, 2], [21, 23]],\n                    18: [[0, 2], [21, 25], 81]\n                },\n                35: {\n                    0: [0],\n                    1: [[0, 5], 11, [21, 25], 28, 81, 82],\n                    2: [[0, 6], [11, 13]],\n                    3: [[0, 5], 22],\n                    4: [[0, 3], 21, [23, 30], 81],\n                    5: [[0, 5], 21, [24, 27], [81, 83]],\n                    6: [[0, 3], [22, 29], 81],\n                    7: [[0, 2], [21, 25], [81, 84]],\n                    8: [[0, 2], [21, 25], 81],\n                    9: [[0, 2], [21, 26], 81, 82]\n                },\n                36: {\n                    0: [0],\n                    1: [[0, 5], 11, [21, 24]],\n                    2: [[0, 3], 22, 81],\n                    3: [[0, 2], 13, [21, 23]],\n                    4: [[0, 3], 21, [23, 30], 81, 82],\n                    5: [[0, 2], 21],\n                    6: [[0, 2], 22, 81],\n                    7: [[0, 2], [21, 35], 81, 82],\n                    8: [[0, 3], [21, 30], 81],\n                    9: [[0, 2], [21, 26], [81, 83]],\n                    10: [[0, 2], [21, 30]],\n                    11: [[0, 2], [21, 30], 81]\n                },\n                37: {\n                    0: [0],\n                    1: [[0, 5], 12, 13, [24, 26], 81],\n                    2: [[0, 3], 5, [11, 14], [81, 85]],\n                    3: [[0, 6], [21, 23]],\n                    4: [[0, 6], 81],\n                    5: [[0, 3], [21, 23]],\n                    6: [[0, 2], [11, 13], 34, [81, 87]],\n                    7: [[0, 5], 24, 25, [81, 86]],\n                    8: [[0, 2], 11, [26, 32], [81, 83]],\n                    9: [[0, 3], 11, 21, 23, 82, 83],\n                    10: [[0, 2], [81, 83]],\n                    11: [[0, 3], 21, 22],\n                    12: [[0, 3]],\n                    13: [[0, 2], 11, 12, [21, 29]],\n                    14: [[0, 2], [21, 28], 81, 82],\n                    15: [[0, 2], [21, 26], 81],\n                    16: [[0, 2], [21, 26]],\n                    17: [[0, 2], [21, 28]]\n                },\n                41: {\n                    0: [0],\n                    1: [[0, 6], 8, 22, [81, 85]],\n                    2: [[0, 5], 11, [21, 25]],\n                    3: [[0, 7], 11, [22, 29], 81],\n                    4: [[0, 4], 11, [21, 23], 25, 81, 82],\n                    5: [[0, 3], 5, 6, 22, 23, 26, 27, 81],\n                    6: [[0, 3], 11, 21, 22],\n                    7: [[0, 4], 11, 21, [24, 28], 81, 82],\n                    8: [[0, 4], 11, [21, 23], 25, [81, 83]],\n                    9: [[0, 2], 22, 23, [26, 28]],\n                    10: [[0, 2], [23, 25], 81, 82],\n                    11: [[0, 4], [21, 23]],\n                    12: [[0, 2], 21, 22, 24, 81, 82],\n                    13: [[0, 3], [21, 30], 81],\n                    14: [[0, 3], [21, 26], 81],\n                    15: [[0, 3], [21, 28]],\n                    16: [[0, 2], [21, 28], 81],\n                    17: [[0, 2], [21, 29]],\n                    90: [0, 1]\n                },\n                42: {\n                    0: [0],\n                    1: [[0, 7], [11, 17]],\n                    2: [[0, 5], 22, 81],\n                    3: [[0, 3], [21, 25], 81],\n                    5: [[0, 6], [25, 29], [81, 83]],\n                    6: [[0, 2], 6, 7, [24, 26], [82, 84]],\n                    7: [[0, 4]],\n                    8: [[0, 2], 4, 21, 22, 81],\n                    9: [[0, 2], [21, 23], 81, 82, 84],\n                    10: [[0, 3], [22, 24], 81, 83, 87],\n                    11: [[0, 2], [21, 27], 81, 82],\n                    12: [[0, 2], [21, 24], 81],\n                    13: [[0, 3], 21, 81],\n                    28: [[0, 2], 22, 23, [25, 28]],\n                    90: [0, [4, 6], 21]\n                },\n                43: {\n                    0: [0],\n                    1: [[0, 5], 11, 12, 21, 22, 24, 81],\n                    2: [[0, 4], 11, 21, [23, 25], 81],\n                    3: [[0, 2], 4, 21, 81, 82],\n                    4: [0, 1, [5, 8], 12, [21, 24], 26, 81, 82],\n                    5: [[0, 3], 11, [21, 25], [27, 29], 81],\n                    6: [[0, 3], 11, 21, 23, 24, 26, 81, 82],\n                    7: [[0, 3], [21, 26], 81],\n                    8: [[0, 2], 11, 21, 22],\n                    9: [[0, 3], [21, 23], 81],\n                    10: [[0, 3], [21, 28], 81],\n                    11: [[0, 3], [21, 29]],\n                    12: [[0, 2], [21, 30], 81],\n                    13: [[0, 2], 21, 22, 81, 82],\n                    31: [0, 1, [22, 27], 30]\n                },\n                44: {\n                    0: [0],\n                    1: [[0, 7], [11, 16], 83, 84],\n                    2: [[0, 5], 21, 22, 24, 29, 32, 33, 81, 82],\n                    3: [0, 1, [3, 8]],\n                    4: [[0, 4]],\n                    5: [0, 1, [6, 15], 23, 82, 83],\n                    6: [0, 1, [4, 8]],\n                    7: [0, 1, [3, 5], 81, [83, 85]],\n                    8: [[0, 4], 11, 23, 25, [81, 83]],\n                    9: [[0, 3], 23, [81, 83]],\n                    12: [[0, 3], [23, 26], 83, 84],\n                    13: [[0, 3], [22, 24], 81],\n                    14: [[0, 2], [21, 24], 26, 27, 81],\n                    15: [[0, 2], 21, 23, 81],\n                    16: [[0, 2], [21, 25]],\n                    17: [[0, 2], 21, 23, 81],\n                    18: [[0, 3], 21, 23, [25, 27], 81, 82],\n                    19: [0],\n                    20: [0],\n                    51: [[0, 3], 21, 22],\n                    52: [[0, 3], 21, 22, 24, 81],\n                    53: [[0, 2], [21, 23], 81]\n                },\n                45: {\n                    0: [0],\n                    1: [[0, 9], [21, 27]],\n                    2: [[0, 5], [21, 26]],\n                    3: [[0, 5], 11, 12, [21, 32]],\n                    4: [0, 1, [3, 6], 11, [21, 23], 81],\n                    5: [[0, 3], 12, 21],\n                    6: [[0, 3], 21, 81],\n                    7: [[0, 3], 21, 22],\n                    8: [[0, 4], 21, 81],\n                    9: [[0, 3], [21, 24], 81],\n                    10: [[0, 2], [21, 31]],\n                    11: [[0, 2], [21, 23]],\n                    12: [[0, 2], [21, 29], 81],\n                    13: [[0, 2], [21, 24], 81],\n                    14: [[0, 2], [21, 25], 81]\n                },\n                46: {\n                    0: [0],\n                    1: [0, 1, [5, 8]],\n                    2: [0, 1],\n                    3: [0, [21, 23]],\n                    90: [[0, 3], [5, 7], [21, 39]]\n                },\n                50: {\n                    0: [0],\n                    1: [[0, 19]],\n                    2: [0, [22, 38], [40, 43]],\n                    3: [0, [81, 84]]\n                },\n                51: {\n                    0: [0],\n                    1: [0, 1, [4, 8], [12, 15], [21, 24], 29, 31, 32, [81, 84]],\n                    3: [[0, 4], 11, 21, 22],\n                    4: [[0, 3], 11, 21, 22],\n                    5: [[0, 4], 21, 22, 24, 25],\n                    6: [0, 1, 3, 23, 26, [81, 83]],\n                    7: [0, 1, 3, 4, [22, 27], 81],\n                    8: [[0, 2], 11, 12, [21, 24]],\n                    9: [[0, 4], [21, 23]],\n                    10: [[0, 2], 11, 24, 25, 28],\n                    11: [[0, 2], [11, 13], 23, 24, 26, 29, 32, 33, 81],\n                    13: [[0, 4], [21, 25], 81],\n                    14: [[0, 2], [21, 25]],\n                    15: [[0, 3], [21, 29]],\n                    16: [[0, 3], [21, 23], 81],\n                    17: [[0, 3], [21, 25], 81],\n                    18: [[0, 3], [21, 27]],\n                    19: [[0, 3], [21, 23]],\n                    20: [[0, 2], 21, 22, 81],\n                    32: [0, [21, 33]],\n                    33: [0, [21, 38]],\n                    34: [0, 1, [22, 37]]\n                },\n                52: {\n                    0: [0],\n                    1: [[0, 3], [11, 15], [21, 23], 81],\n                    2: [0, 1, 3, 21, 22],\n                    3: [[0, 3], [21, 30], 81, 82],\n                    4: [[0, 2], [21, 25]],\n                    5: [[0, 2], [21, 27]],\n                    6: [[0, 3], [21, 28]],\n                    22: [0, 1, [22, 30]],\n                    23: [0, 1, [22, 28]],\n                    24: [0, 1, [22, 28]],\n                    26: [0, 1, [22, 36]],\n                    27: [[0, 2], 22, 23, [25, 32]]\n                },\n                53: {\n                    0: [0],\n                    1: [[0, 3], [11, 14], 21, 22, [24, 29], 81],\n                    3: [[0, 2], [21, 26], 28, 81],\n                    4: [[0, 2], [21, 28]],\n                    5: [[0, 2], [21, 24]],\n                    6: [[0, 2], [21, 30]],\n                    7: [[0, 2], [21, 24]],\n                    8: [[0, 2], [21, 29]],\n                    9: [[0, 2], [21, 27]],\n                    23: [0, 1, [22, 29], 31],\n                    25: [[0, 4], [22, 32]],\n                    26: [0, 1, [21, 28]],\n                    27: [0, 1, [22, 30]], 28: [0, 1, 22, 23],\n                    29: [0, 1, [22, 32]],\n                    31: [0, 2, 3, [22, 24]],\n                    34: [0, [21, 23]],\n                    33: [0, 21, [23, 25]],\n                    35: [0, [21, 28]]\n                },\n                54: {\n                    0: [0],\n                    1: [[0, 2], [21, 27]],\n                    21: [0, [21, 29], 32, 33],\n                    22: [0, [21, 29], [31, 33]],\n                    23: [0, 1, [22, 38]],\n                    24: [0, [21, 31]],\n                    25: [0, [21, 27]],\n                    26: [0, [21, 27]]\n                },\n                61: {\n                    0: [0],\n                    1: [[0, 4], [11, 16], 22, [24, 26]],\n                    2: [[0, 4], 22],\n                    3: [[0, 4], [21, 24], [26, 31]],\n                    4: [[0, 4], [22, 31], 81],\n                    5: [[0, 2], [21, 28], 81, 82],\n                    6: [[0, 2], [21, 32]],\n                    7: [[0, 2], [21, 30]],\n                    8: [[0, 2], [21, 31]],\n                    9: [[0, 2], [21, 29]],\n                    10: [[0, 2], [21, 26]]\n                },\n                62: {\n                    0: [0],\n                    1: [[0, 5], 11, [21, 23]],\n                    2: [0, 1],\n                    3: [[0, 2], 21],\n                    4: [[0, 3], [21, 23]],\n                    5: [[0, 3], [21, 25]],\n                    6: [[0, 2], [21, 23]],\n                    7: [[0, 2], [21, 25]],\n                    8: [[0, 2], [21, 26]],\n                    9: [[0, 2], [21, 24], 81, 82],\n                    10: [[0, 2], [21, 27]],\n                    11: [[0, 2], [21, 26]],\n                    12: [[0, 2], [21, 28]],\n                    24: [0, 21, [24, 29]],\n                    26: [0, 21, [23, 30]],\n                    29: [0, 1, [21, 27]],\n                    30: [0, 1, [21, 27]]\n                },\n                63: {\n                    0: [0],\n                    1: [[0, 5], [21, 23]],\n                    2: [0, 2, [21, 25]],\n                    21: [0, [21, 23], [26, 28]],\n                    22: [0, [21, 24]],\n                    23: [0, [21, 24]],\n                    25: [0, [21, 25]],\n                    26: [0, [21, 26]],\n                    27: [0, 1, [21, 26]],\n                    28: [[0, 2], [21, 23]]\n                },\n                64: {\n                    0: [0],\n                    1: [0, 1, [4, 6], 21, 22, 81],\n                    2: [[0, 3], 5, [21, 23]],\n                    3: [[0, 3], [21, 24], 81],\n                    4: [[0, 2], [21, 25]],\n                    5: [[0, 2], 21, 22]\n                },\n                65: {\n                    0: [0],\n                    1: [[0, 9], 21],\n                    2: [[0, 5]],\n                    21: [0, 1, 22, 23],\n                    22: [0, 1, 22, 23],\n                    23: [[0, 3], [23, 25], 27, 28],\n                    28: [0, 1, [22, 29]],\n                    29: [0, 1, [22, 29]],\n                    30: [0, 1, [22, 24]], 31: [0, 1, [21, 31]],\n                    32: [0, 1, [21, 27]],\n                    40: [0, 2, 3, [21, 28]],\n                    42: [[0, 2], 21, [23, 26]],\n                    43: [0, 1, [21, 26]],\n                    90: [[0, 4]], 27: [[0, 2], 22, 23]\n                },\n                71: { 0: [0] },\n                81: { 0: [0] },\n                82: { 0: [0] }\n            };\n            \n            var provincial  = parseInt(value.substr(0, 2), 10),\n                prefectural = parseInt(value.substr(2, 2), 10),\n                county      = parseInt(value.substr(4, 2), 10);\n            \n            if (!adminDivisionCodes[provincial] || !adminDivisionCodes[provincial][prefectural]) {\n                return false;\n            }\n            var inRange  = false,\n                rangeDef = adminDivisionCodes[provincial][prefectural];\n            for (var i = 0; i < rangeDef.length; i++) {\n                if (($.isArray(rangeDef[i]) && rangeDef[i][0] <= county && county <= rangeDef[i][1])\n                    || (!$.isArray(rangeDef[i]) && county === rangeDef[i]))\n                {\n                    inRange = true;\n                    break;\n                }\n            }\n\n            if (!inRange) {\n                return false;\n            }\n            \n            // Check date of birth\n            var dob;\n            if (value.length === 18) {\n                dob = value.substr(6, 8);\n            } else /* length == 15 */ { \n                dob = '19' + value.substr(6, 6);\n            }\n            var year  = parseInt(dob.substr(0, 4), 10),\n                month = parseInt(dob.substr(4, 2), 10),\n                day   = parseInt(dob.substr(6, 2), 10);\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                return false;\n            }\n            \n            // Check checksum (18-digit system only)\n            if (value.length === 18) {\n                var sum    = 0,\n                    weight = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2];\n                for (i = 0; i < 17; i++) {\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\n                }\n                sum = (12 - (sum % 11)) % 11;\n                var checksum = (value.charAt(17).toUpperCase() !== 'X') ? parseInt(value.charAt(17), 10) : 10;\n                return checksum === sum;\n            }\n            \n            return true;\n        },\n        \n        /**\n         * Validate Czech national identification number (RC)\n         * Examples:\n         * - Valid: 7103192745, 991231123\n         * - Invalid: 1103492745, 590312123\n         *\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _cz: function(value) {\n            if (!/^\\d{9,10}$/.test(value)) {\n                return false;\n            }\n            var year  = 1900 + parseInt(value.substr(0, 2), 10),\n                month = parseInt(value.substr(2, 2), 10) % 50 % 20,\n                day   = parseInt(value.substr(4, 2), 10);\n            if (value.length === 9) {\n                if (year >= 1980) {\n                    year -= 100;\n                }\n                if (year > 1953) {\n                    return false;\n                }\n            } else if (year < 1954) {\n                year += 100;\n            }\n\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                return false;\n            }\n\n            // Check that the birth date is not in the future\n            if (value.length === 10) {\n                var check = parseInt(value.substr(0, 9), 10) % 11;\n                if (year < 1985) {\n                    check = check % 10;\n                }\n                return (check + '' === value.substr(9, 1));\n            }\n\n            return true;\n        },\n\n        /**\n         * Validate Danish Personal Identification number (CPR)\n         * Examples:\n         * - Valid: 2110625629, 211062-5629\n         * - Invalid: 511062-5629\n         *\n         * @see https://en.wikipedia.org/wiki/Personal_identification_number_(Denmark)\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _dk: function(value) {\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/-/g, '');\n            var day   = parseInt(value.substr(0, 2), 10),\n                month = parseInt(value.substr(2, 2), 10),\n                year  = parseInt(value.substr(4, 2), 10);\n\n            switch (true) {\n                case ('5678'.indexOf(value.charAt(6)) !== -1 && year >= 58):\n                    year += 1800;\n                    break;\n                case ('0123'.indexOf(value.charAt(6)) !== -1):\n                case ('49'.indexOf(value.charAt(6)) !== -1 && year >= 37):\n                    year += 1900;\n                    break;\n                default:\n                    year += 2000;\n                    break;\n            }\n\n            return $.fn.bootstrapValidator.helpers.date(year, month, day);\n        },\n\n        /**\n         * Validate Estonian Personal Identification Code (isikukood)\n         * Examples:\n         * - Valid: 37605030299\n         *\n         * @see http://et.wikipedia.org/wiki/Isikukood\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _ee: function(value) {\n            // Use the same format as Lithuanian Personal Code\n            return this._lt(value);\n        },\n\n        /**\n         * Validate Spanish personal identity code (DNI)\n         * Support i) DNI (for Spanish citizens) and ii) NIE (for foreign people)\n         *\n         * Examples:\n         * - Valid: i) 54362315K, 54362315-K; ii) X2482300W, X-2482300W, X-2482300-W\n         * - Invalid: i) 54362315Z; ii) X-2482300A\n         *\n         * @see https://en.wikipedia.org/wiki/National_identification_number#Spain\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _es: function(value) {\n            if (!/^[0-9A-Z]{8}[-]{0,1}[0-9A-Z]$/.test(value)                    // DNI\n                && !/^[XYZ][-]{0,1}[0-9]{7}[-]{0,1}[0-9A-Z]$/.test(value)) {    // NIE\n                return false;\n            }\n\n            value = value.replace(/-/g, '');\n            var index = 'XYZ'.indexOf(value.charAt(0));\n            if (index !== -1) {\n                // It is NIE number\n                value = index + value.substr(1) + '';\n            }\n\n            var check = parseInt(value.substr(0, 8), 10);\n            check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n            return (check === value.substr(8, 1));\n        },\n\n        /**\n         * Validate Finnish Personal Identity Code (HETU)\n         * Examples:\n         * - Valid: 311280-888Y, 131052-308T\n         * - Invalid: 131052-308U, 310252-308Y\n         *\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _fi: function(value) {\n            if (!/^[0-9]{6}[-+A][0-9]{3}[0-9ABCDEFHJKLMNPRSTUVWXY]$/.test(value)) {\n                return false;\n            }\n            var day       = parseInt(value.substr(0, 2), 10),\n                month     = parseInt(value.substr(2, 2), 10),\n                year      = parseInt(value.substr(4, 2), 10),\n                centuries = {\n                    '+': 1800,\n                    '-': 1900,\n                    'A': 2000\n                };\n            year = centuries[value.charAt(6)] + year;\n\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                return false;\n            }\n\n            var individual = parseInt(value.substr(7, 3), 10);\n            if (individual < 2) {\n                return false;\n            }\n            var n = value.substr(0, 6) + value.substr(7, 3) + '';\n            n = parseInt(n, 10);\n            return '0123456789ABCDEFHJKLMNPRSTUVWXY'.charAt(n % 31) === value.charAt(10);\n        },\n\n        /**\n         * Validate Croatian personal identification number (OIB)\n         * Examples:\n         * - Valid: 33392005961\n         * - Invalid: 33392005962\n         *\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _hr: function(value) {\n            if (!/^[0-9]{11}$/.test(value)) {\n                return false;\n            }\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\n        },\n\n        /**\n         * Validate Irish Personal Public Service Number (PPS)\n         * Examples:\n         * - Valid: 6433435F, 6433435FT, 6433435FW, 6433435OA, 6433435IH, 1234567TW, 1234567FA\n         * - Invalid: 6433435E, 6433435VH\n         *\n         * @see https://en.wikipedia.org/wiki/Personal_Public_Service_Number\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _ie: function(value) {\n            if (!/^\\d{7}[A-W][AHWTX]?$/.test(value)) {\n                return false;\n            }\n\n            var getCheckDigit = function(value) {\n                while (value.length < 7) {\n                    value = '0' + value;\n                }\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\n                    sum      = 0;\n                for (var i = 0; i < 7; i++) {\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\n                }\n                sum += 9 * alphabet.indexOf(value.substr(7));\n                return alphabet[sum % 23];\n            };\n\n            // 2013 format\n            if (value.length === 9 && ('A' === value.charAt(8) || 'H' === value.charAt(8))) {\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\n            }\n            // The old format\n            else {\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7));\n            }\n        },\n\n        /**\n         * Validate Iceland national identification number (Kennitala)\n         * Examples:\n         * - Valid: 120174-3399, 1201743399, 0902862349\n         *\n         * @see http://en.wikipedia.org/wiki/Kennitala\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _is: function(value) {\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{4}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/-/g, '');\n            var day     = parseInt(value.substr(0, 2), 10),\n                month   = parseInt(value.substr(2, 2), 10),\n                year    = parseInt(value.substr(4, 2), 10),\n                century = parseInt(value.charAt(9), 10);\n\n            year = (century === 9) ? (1900 + year) : ((20 + century) * 100 + year);\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\n                return false;\n            }\n            // Validate the check digit\n            var sum    = 0,\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = 11 - sum % 11;\n            return (sum + '' === value.charAt(8));\n        },\n\n        /**\n         * Validate Lithuanian Personal Code (Asmens kodas)\n         * Examples:\n         * - Valid: 38703181745\n         * - Invalid: 38703181746, 78703181745, 38703421745\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Lithuania\n         * @see http://www.adomas.org/midi2007/pcode.html\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _lt: function(value) {\n            if (!/^[0-9]{11}$/.test(value)) {\n                return false;\n            }\n            var gender  = parseInt(value.charAt(0), 10),\n                year    = parseInt(value.substr(1, 2), 10),\n                month   = parseInt(value.substr(3, 2), 10),\n                day     = parseInt(value.substr(5, 2), 10),\n                century = (gender % 2 === 0) ? (17 + gender / 2) : (17 + (gender + 1) / 2);\n            year = century * 100 + year;\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\n                return false;\n            }\n\n            // Validate the check digit\n            var sum    = 0,\n                weight = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1];\n            for (var i = 0; i < 10; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = sum % 11;\n            if (sum !== 10) {\n                return sum + '' === value.charAt(10);\n            }\n\n            // Re-calculate the check digit\n            sum    = 0;\n            weight = [3, 4, 5, 6, 7, 8, 9, 1, 2, 3];\n            for (i = 0; i < 10; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = sum % 11;\n            if (sum === 10) {\n                sum = 0;\n            }\n            return (sum + '' === value.charAt(10));\n        },\n\n        /**\n         * Validate Latvian Personal Code (Personas kods)\n         * Examples:\n         * - Valid: 161175-19997, 16117519997\n         * - Invalid: 161375-19997\n         *\n         * @see http://laacz.lv/2006/11/25/pk-parbaudes-algoritms/\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _lv: function(value) {\n            if (!/^[0-9]{6}[-]{0,1}[0-9]{5}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\D/g, '');\n            // Check birth date\n            var day   = parseInt(value.substr(0, 2), 10),\n                month = parseInt(value.substr(2, 2), 10),\n                year  = parseInt(value.substr(4, 2), 10);\n            year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\n\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day, true)) {\n                return false;\n            }\n\n            // Check personal code\n            var sum    = 0,\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\n            for (var i = 0; i < 10; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = (sum + 1) % 11 % 10;\n            return (sum + '' === value.charAt(10));\n        },\n\n        /**\n         * Validate Dutch national identification number (BSN)\n         * Examples:\n         * - Valid: 111222333, 941331490, 9413.31.490\n         * - Invalid: 111252333\n         *\n         * @see https://nl.wikipedia.org/wiki/Burgerservicenummer\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _nl: function(value) {\n            while (value.length < 9) {\n                value = '0' + value;\n            }\n            if (!/^[0-9]{4}[.]{0,1}[0-9]{2}[.]{0,1}[0-9]{3}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/\\./g, '');\n            if (parseInt(value, 10) === 0) {\n                return false;\n            }\n            var sum    = 0,\n                length = value.length;\n            for (var i = 0; i < length - 1; i++) {\n                sum += (9 - i) * parseInt(value.charAt(i), 10);\n            }\n            sum = sum % 11;\n            if (sum === 10) {\n                sum = 0;\n            }\n            return (sum + '' === value.charAt(length - 1));\n        },\n\n        /**\n         * Validate Romanian numerical personal code (CNP)\n         * Examples:\n         * - Valid: 1630615123457, 1800101221144\n         * - Invalid: 8800101221144, 1632215123457, 1630615123458\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Romania\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _ro: function(value) {\n            if (!/^[0-9]{13}$/.test(value)) {\n                return false;\n            }\n            var gender = parseInt(value.charAt(0), 10);\n            if (gender === 0 || gender === 7 || gender === 8) {\n                return false;\n            }\n\n            // Determine the date of birth\n            var year      = parseInt(value.substr(1, 2), 10),\n                month     = parseInt(value.substr(3, 2), 10),\n                day       = parseInt(value.substr(5, 2), 10),\n                // The year of date is determined base on the gender\n                centuries = {\n                    '1': 1900,  // Male born between 1900 and 1999\n                    '2': 1900,  // Female born between 1900 and 1999\n                    '3': 1800,  // Male born between 1800 and 1899\n                    '4': 1800,  // Female born between 1800 and 1899\n                    '5': 2000,  // Male born after 2000\n                    '6': 2000   // Female born after 2000\n                };\n            if (day > 31 && month > 12) {\n                return false;\n            }\n            if (gender !== 9) {\n                year = centuries[gender + ''] + year;\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                    return false;\n                }\n            }\n\n            // Validate the check digit\n            var sum    = 0,\n                weight = [2, 7, 9, 1, 4, 6, 3, 5, 8, 2, 7, 9],\n                length = value.length;\n            for (var i = 0; i < length - 1; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = sum % 11;\n            if (sum === 10) {\n                sum = 1;\n            }\n            return (sum + '' === value.charAt(length - 1));\n        },\n\n        /**\n         * Validate Swedish personal identity number (personnummer)\n         * Examples:\n         * - Valid: 8112289874, 811228-9874, 811228+9874\n         * - Invalid: 811228-9873\n         *\n         * @see http://en.wikipedia.org/wiki/Personal_identity_number_(Sweden)\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _se: function(value) {\n            if (!/^[0-9]{10}$/.test(value) && !/^[0-9]{6}[-|+][0-9]{4}$/.test(value)) {\n                return false;\n            }\n            value = value.replace(/[^0-9]/g, '');\n\n            var year  = parseInt(value.substr(0, 2), 10) + 1900,\n                month = parseInt(value.substr(2, 2), 10),\n                day   = parseInt(value.substr(4, 2), 10);\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                return false;\n            }\n\n            // Validate the last check digit\n            return $.fn.bootstrapValidator.helpers.luhn(value);\n        },\n\n        /**\n         * Validate Slovak national identifier number (RC)\n         * Examples:\n         * - Valid: 7103192745, 991231123\n         * - Invalid: 7103192746, 1103492745\n         *\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _sk: function(value) {\n            // Slovakia uses the same format as Czech Republic\n            return this._cz(value);\n        },\n\n        /**\n         * Validate San Marino citizen number\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number#San_Marino\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _sm: function(value) {\n            return /^\\d{5}$/.test(value);\n        },\n\n        /**\n         * Validate Thailand citizen number\n         * Examples:\n         * - Valid: 7145620509547, 3688699975685, 2368719339716\n         * - Invalid: 1100800092310\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number#Thailand\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _th: function(value) {\n            if (value.length !== 13) {\n                return false;\n            }\n\n            var sum = 0;\n            for (var i = 0; i < 12; i++) {\n                sum += parseInt(value.charAt(i), 10) * (13 - i);\n            }\n\n            return (11 - sum % 11) % 10 === parseInt(value.charAt(12), 10);\n        },\n\n        /**\n         * Validate South African ID\n         * Example:\n         * - Valid: 8001015009087\n         * - Invalid: 8001015009287, 8001015009086\n         *\n         * @see http://en.wikipedia.org/wiki/National_identification_number#South_Africa\n         * @param {String} value The ID\n         * @returns {Boolean}\n         */\n        _za: function(value) {\n            if (!/^[0-9]{10}[0|1][8|9][0-9]$/.test(value)) {\n                return false;\n            }\n            var year        = parseInt(value.substr(0, 2), 10),\n                currentYear = new Date().getFullYear() % 100,\n                month       = parseInt(value.substr(2, 2), 10),\n                day         = parseInt(value.substr(4, 2), 10);\n            year = (year >= currentYear) ? (year + 1900) : (year + 2000);\n\n            if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                return false;\n            }\n\n            // Validate the last check digit\n            return $.fn.bootstrapValidator.helpers.luhn(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.identical = $.extend($.fn.bootstrapValidator.i18n.identical || {}, {\n        'default': 'Please enter the same value'\n    });\n\n    $.fn.bootstrapValidator.validators.identical = {\n        html5Attributes: {\n            message: 'message',\n            field: 'field'\n        },\n\n        /**\n         * Check if input value equals to value of particular one\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consists of the following key:\n         * - field: The name of field that will be used to compare with current one\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var compareWith = validator.getFieldElements(options.field);\n            if (compareWith === null || compareWith.length === 0) {\n                return true;\n            }\n\n            if (value === compareWith.val()) {\n                validator.updateStatus(options.field, validator.STATUS_VALID, 'identical');\n                return true;\n            } else {\n                return false;\n            }\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.imei = $.extend($.fn.bootstrapValidator.i18n.imei || {}, {\n        'default': 'Please enter a valid IMEI number'\n    });\n\n    $.fn.bootstrapValidator.validators.imei = {\n        /**\n         * Validate IMEI (International Mobile Station Equipment Identity)\n         * Examples:\n         * - Valid: 35-209900-176148-1, 35-209900-176148-23, 3568680000414120, 490154203237518\n         * - Invalid: 490154203237517\n         *\n         * @see http://en.wikipedia.org/wiki/International_Mobile_Station_Equipment_Identity\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            switch (true) {\n                case /^\\d{15}$/.test(value):\n                case /^\\d{2}-\\d{6}-\\d{6}-\\d{1}$/.test(value):\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}\\s\\d{1}$/.test(value):\n                    value = value.replace(/[^0-9]/g, '');\n                    return $.fn.bootstrapValidator.helpers.luhn(value);\n\n                case /^\\d{14}$/.test(value):\n                case /^\\d{16}$/.test(value):\n                case /^\\d{2}-\\d{6}-\\d{6}(|-\\d{2})$/.test(value):\n                case /^\\d{2}\\s\\d{6}\\s\\d{6}(|\\s\\d{2})$/.test(value):\n                    return true;\n\n                default:\n                    return false;\n            }\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.imo = $.extend($.fn.bootstrapValidator.i18n.imo || {}, {\n        'default': 'Please enter a valid IMO number'\n    });\n\n    $.fn.bootstrapValidator.validators.imo = {\n        /**\n         * Validate IMO (International Maritime Organization)\n         * Examples:\n         * - Valid: IMO 8814275, IMO 9176187\n         * - Invalid: IMO 8814274\n         *\n         * @see http://en.wikipedia.org/wiki/IMO_Number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            if (!/^IMO \\d{7}$/i.test(value)) {\n                return false;\n            }\n            \n            // Grab just the digits\n            var sum    = 0,\n                digits = value.replace(/^.*(\\d{7})$/, '$1');\n            \n            // Go over each char, multiplying by the inverse of it's position\n            // IMO 9176187\n            // (9 * 7) + (1 * 6) + (7 * 5) + (6 * 4) + (1 * 3) + (8 * 2) = 147\n            // Take the last digit of that, that's the check digit (7)\n            for (var i = 6; i >= 1; i--) {\n                sum += (digits.slice((6 - i), -i) * (i + 1));\n            }\n\n            return sum % 10 === parseInt(digits.charAt(6), 10);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.integer = $.extend($.fn.bootstrapValidator.i18n.integer || {}, {\n        'default': 'Please enter a valid number'\n    });\n\n    $.fn.bootstrapValidator.validators.integer = {\n        enableByHtml5: function($field) {\n            return ('number' === $field.attr('type')) && ($field.attr('step') === undefined || $field.attr('step') % 1 === 0);\n        },\n\n        /**\n         * Return true if the input value is an integer\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following key:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            if (this.enableByHtml5($field) && $field.get(0).validity && $field.get(0).validity.badInput === true) {\n                return false;\n            }\n\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n            return /^(?:-?(?:0|[1-9][0-9]*))$/.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.ip = $.extend($.fn.bootstrapValidator.i18n.ip || {}, {\n        'default': 'Please enter a valid IP address',\n        ipv4: 'Please enter a valid IPv4 address',\n        ipv6: 'Please enter a valid IPv6 address'\n    });\n\n    $.fn.bootstrapValidator.validators.ip = {\n        html5Attributes: {\n            message: 'message',\n            ipv4: 'ipv4',\n            ipv6: 'ipv6'\n        },\n\n        /**\n         * Return true if the input value is a IP address.\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - ipv4: Enable IPv4 validator, default to true\n         * - ipv6: Enable IPv6 validator, default to true\n         * - message: The invalid message\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n            options = $.extend({}, { ipv4: true, ipv6: true }, options);\n\n            var ipv4Regex = /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,\n                ipv6Regex = /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n                valid     = false,\n                message;\n\n            switch (true) {\n                case (options.ipv4 && !options.ipv6):\n                    valid   = ipv4Regex.test(value);\n                    message = options.message || $.fn.bootstrapValidator.i18n.ip.ipv4;\n                    break;\n\n                case (!options.ipv4 && options.ipv6):\n                    valid   = ipv6Regex.test(value);\n                    message = options.message || $.fn.bootstrapValidator.i18n.ip.ipv6;\n                    break;\n\n                case (options.ipv4 && options.ipv6):\n                /* falls through */\n                default:\n                    valid   = ipv4Regex.test(value) || ipv6Regex.test(value);\n                    message = options.message || $.fn.bootstrapValidator.i18n.ip['default'];\n                    break;\n            }\n\n            return {\n                valid: valid,\n                message: message\n            };\n        }\n    };\n}(window.jQuery));;(function($) {\n    $.fn.bootstrapValidator.i18n.isbn = $.extend($.fn.bootstrapValidator.i18n.isbn || {}, {\n        'default': 'Please enter a valid ISBN number'\n    });\n\n    $.fn.bootstrapValidator.validators.isbn = {\n        /**\n         * Return true if the input value is a valid ISBN 10 or ISBN 13 number\n         * Examples:\n         * - Valid:\n         * ISBN 10: 99921-58-10-7, 9971-5-0210-0, 960-425-059-0, 80-902734-1-6, 85-359-0277-5, 1-84356-028-3, 0-684-84328-5, 0-8044-2957-X, 0-85131-041-9, 0-943396-04-2, 0-9752298-0-X\n         * ISBN 13: 978-0-306-40615-7\n         * - Invalid:\n         * ISBN 10: 99921-58-10-6\n         * ISBN 13: 978-0-306-40615-6\n         *\n         * @see http://en.wikipedia.org/wiki/International_Standard_Book_Number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} [options] Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // http://en.wikipedia.org/wiki/International_Standard_Book_Number#Overview\n            // Groups are separated by a hyphen or a space\n            var type;\n            switch (true) {\n                case /^\\d{9}[\\dX]$/.test(value):\n                case (value.length === 13 && /^(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\n                case (value.length === 13 && /^(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\n                    type = 'ISBN10';\n                    break;\n                case /^(978|979)\\d{9}[\\dX]$/.test(value):\n                case (value.length === 17 && /^(978|979)-(\\d+)-(\\d+)-(\\d+)-([\\dX])$/.test(value)):\n                case (value.length === 17 && /^(978|979)\\s(\\d+)\\s(\\d+)\\s(\\d+)\\s([\\dX])$/.test(value)):\n                    type = 'ISBN13';\n                    break;\n                default:\n                    return false;\n            }\n\n            // Replace all special characters except digits and X\n            value = value.replace(/[^0-9X]/gi, '');\n            var chars  = value.split(''),\n                length = chars.length,\n                sum    = 0,\n                i,\n                checksum;\n\n            switch (type) {\n                case 'ISBN10':\n                    sum = 0;\n                    for (i = 0; i < length - 1; i++) {\n                        sum += parseInt(chars[i], 10) * (10 - i);\n                    }\n                    checksum = 11 - (sum % 11);\n                    if (checksum === 11) {\n                        checksum = 0;\n                    } else if (checksum === 10) {\n                        checksum = 'X';\n                    }\n                    return (checksum + '' === chars[length - 1]);\n\n                case 'ISBN13':\n                    sum = 0;\n                    for (i = 0; i < length - 1; i++) {\n                        sum += ((i % 2 === 0) ? parseInt(chars[i], 10) : (parseInt(chars[i], 10) * 3));\n                    }\n                    checksum = 10 - (sum % 10);\n                    if (checksum === 10) {\n                        checksum = '0';\n                    }\n                    return (checksum + '' === chars[length - 1]);\n\n                default:\n                    return false;\n            }\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.isin = $.extend($.fn.bootstrapValidator.i18n.isin || {}, {\n        'default': 'Please enter a valid ISIN number'\n    });\n\n    $.fn.bootstrapValidator.validators.isin = {\n        // Available country codes\n        // See http://isin.net/country-codes/\n        COUNTRY_CODES: 'AF|AX|AL|DZ|AS|AD|AO|AI|AQ|AG|AR|AM|AW|AU|AT|AZ|BS|BH|BD|BB|BY|BE|BZ|BJ|BM|BT|BO|BQ|BA|BW|BV|BR|IO|BN|BG|BF|BI|KH|CM|CA|CV|KY|CF|TD|CL|CN|CX|CC|CO|KM|CG|CD|CK|CR|CI|HR|CU|CW|CY|CZ|DK|DJ|DM|DO|EC|EG|SV|GQ|ER|EE|ET|FK|FO|FJ|FI|FR|GF|PF|TF|GA|GM|GE|DE|GH|GI|GR|GL|GD|GP|GU|GT|GG|GN|GW|GY|HT|HM|VA|HN|HK|HU|IS|IN|ID|IR|IQ|IE|IM|IL|IT|JM|JP|JE|JO|KZ|KE|KI|KP|KR|KW|KG|LA|LV|LB|LS|LR|LY|LI|LT|LU|MO|MK|MG|MW|MY|MV|ML|MT|MH|MQ|MR|MU|YT|MX|FM|MD|MC|MN|ME|MS|MA|MZ|MM|NA|NR|NP|NL|NC|NZ|NI|NE|NG|NU|NF|MP|NO|OM|PK|PW|PS|PA|PG|PY|PE|PH|PN|PL|PT|PR|QA|RE|RO|RU|RW|BL|SH|KN|LC|MF|PM|VC|WS|SM|ST|SA|SN|RS|SC|SL|SG|SX|SK|SI|SB|SO|ZA|GS|SS|ES|LK|SD|SR|SJ|SZ|SE|CH|SY|TW|TJ|TZ|TH|TL|TG|TK|TO|TT|TN|TR|TM|TC|TV|UG|UA|AE|GB|US|UM|UY|UZ|VU|VE|VN|VG|VI|WF|EH|YE|ZM|ZW',\n\n        /**\n         * Validate an ISIN (International Securities Identification Number)\n         * Examples:\n         * - Valid: US0378331005, AU0000XVGZA3, GB0002634946\n         * - Invalid: US0378331004, AA0000XVGZA3\n         *\n         * @see http://en.wikipedia.org/wiki/International_Securities_Identifying_Number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            value = value.toUpperCase();\n            var regex = new RegExp('^(' + this.COUNTRY_CODES + ')[0-9A-Z]{10}$');\n            if (!regex.test(value)) {\n                return false;\n            }\n\n            var converted = '',\n                length    = value.length;\n            // Convert letters to number\n            for (var i = 0; i < length - 1; i++) {\n                var c = value.charCodeAt(i);\n                converted += ((c > 57) ? (c - 55).toString() : value.charAt(i));\n            }\n\n            var digits = '',\n                n      = converted.length,\n                group  = (n % 2 !== 0) ? 0 : 1;\n            for (i = 0; i < n; i++) {\n                digits += (parseInt(converted[i], 10) * ((i % 2) === group ? 2 : 1) + '');\n            }\n\n            var sum = 0;\n            for (i = 0; i < digits.length; i++) {\n                sum += parseInt(digits.charAt(i), 10);\n            }\n            sum = (10 - (sum % 10)) % 10;\n            return sum + '' === value.charAt(length - 1);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.ismn = $.extend($.fn.bootstrapValidator.i18n.ismn || {}, {\n        'default': 'Please enter a valid ISMN number'\n    });\n\n    $.fn.bootstrapValidator.validators.ismn = {\n        /**\n         * Validate ISMN (International Standard Music Number)\n         * Examples:\n         * - Valid: M230671187, 979-0-0601-1561-5, 979 0 3452 4680 5, 9790060115615\n         * - Invalid: 9790060115614\n         *\n         * @see http://en.wikipedia.org/wiki/International_Standard_Music_Number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // Groups are separated by a hyphen or a space\n            var type;\n            switch (true) {\n                case /^M\\d{9}$/.test(value):\n                case /^M-\\d{4}-\\d{4}-\\d{1}$/.test(value):\n                case /^M\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\n                    type = 'ISMN10';\n                    break;\n                case /^9790\\d{9}$/.test(value):\n                case /^979-0-\\d{4}-\\d{4}-\\d{1}$/.test(value):\n                case /^979\\s0\\s\\d{4}\\s\\d{4}\\s\\d{1}$/.test(value):\n                    type = 'ISMN13';\n                    break;\n                default:\n                    return false;\n            }\n\n            if ('ISMN10' === type) {\n                value = '9790' + value.substr(1);\n            }\n\n            // Replace all special characters except digits\n            value = value.replace(/[^0-9]/gi, '');\n            var length = value.length,\n                sum    = 0,\n                weight = [1, 3];\n            for (var i = 0; i < length - 1; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i % 2];\n            }\n            sum = 10 - sum % 10;\n            return (sum + '' === value.charAt(length - 1));\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.issn = $.extend($.fn.bootstrapValidator.i18n.issn || {}, {\n        'default': 'Please enter a valid ISSN number'\n    });\n\n    $.fn.bootstrapValidator.validators.issn = {\n        /**\n         * Validate ISSN (International Standard Serial Number)\n         * Examples:\n         * - Valid: 0378-5955, 0024-9319, 0032-1478\n         * - Invalid: 0032-147X\n         *\n         * @see http://en.wikipedia.org/wiki/International_Standard_Serial_Number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // Groups are separated by a hyphen or a space\n            if (!/^\\d{4}\\-\\d{3}[\\dX]$/.test(value)) {\n                return false;\n            }\n\n            // Replace all special characters except digits and X\n            value = value.replace(/[^0-9X]/gi, '');\n            var chars  = value.split(''),\n                length = chars.length,\n                sum    = 0;\n\n            if (chars[7] === 'X') {\n                chars[7] = 10;\n            }\n            for (var i = 0; i < length; i++) {\n                sum += parseInt(chars[i], 10) * (8 - i);\n            }\n            return (sum % 11 === 0);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.lessThan = $.extend($.fn.bootstrapValidator.i18n.lessThan || {}, {\n        'default': 'Please enter a value less than or equal to %s',\n        notInclusive: 'Please enter a value less than %s'\n    });\n\n    $.fn.bootstrapValidator.validators.lessThan = {\n        html5Attributes: {\n            message: 'message',\n            value: 'value',\n            inclusive: 'inclusive'\n        },\n\n        enableByHtml5: function($field) {\n            var type = $field.attr('type'),\n                max  = $field.attr('max');\n            if (max && type !== 'date') {\n                return {\n                    value: max\n                };\n            }\n\n            return false;\n        },\n\n        /**\n         * Return true if the input value is less than or equal to given number\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - value: The number used to compare to. It can be\n         *      - A number\n         *      - Name of field which its value defines the number\n         *      - Name of callback function that returns the number\n         *      - A callback function that returns the number\n         *\n         * - inclusive [optional]: Can be true or false. Default is true\n         * - message: The invalid message\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n            \n\t\t\tvalue = this._format(value);\n            if (!$.isNumeric(value)) {\n                return false;\n            }\n\n            var compareTo      = $.isNumeric(options.value) ? options.value : validator.getDynamicOption($field, options.value),\n                compareToValue = this._format(compareTo);\n\n            value = parseFloat(value);\n            return (options.inclusive === true || options.inclusive === undefined)\n                    ? {\n                        valid: value <= compareToValue,\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan['default'], compareTo)\n                    }\n                    : {\n                        valid: value < compareToValue,\n                        message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.lessThan.notInclusive, compareTo)\n                    };\n        },\n\n        _format: function(value) {\n            return (value + '').replace(',', '.');\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.mac = $.extend($.fn.bootstrapValidator.i18n.mac || {}, {\n        'default': 'Please enter a valid MAC address'\n    });\n\n    $.fn.bootstrapValidator.validators.mac = {\n        /**\n         * Return true if the input value is a MAC address.\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.meid = $.extend($.fn.bootstrapValidator.i18n.meid || {}, {\n        'default': 'Please enter a valid MEID number'\n    });\n\n    $.fn.bootstrapValidator.validators.meid = {\n        /**\n         * Validate MEID (Mobile Equipment Identifier)\n         * Examples:\n         * - Valid: 293608736500703710, 29360-87365-0070-3710, AF0123450ABCDE, AF-012345-0ABCDE\n         * - Invalid: 2936087365007037101\n         *\n         * @see http://en.wikipedia.org/wiki/Mobile_equipment_identifier\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            switch (true) {\n                // 14 digit hex representation (no check digit)\n                case /^[0-9A-F]{15}$/i.test(value):\n                // 14 digit hex representation + dashes or spaces (no check digit)\n                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}[- ][0-9A-F]$/i.test(value):\n                // 18 digit decimal representation (no check digit)\n                case /^\\d{19}$/.test(value):\n                // 18 digit decimal representation + dashes or spaces (no check digit)\n                case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}[- ]\\d$/.test(value):\n                    // Grab the check digit\n                    var cd = value.charAt(value.length - 1);\n\n                    // Strip any non-hex chars\n                    value = value.replace(/[- ]/g, '');\n\n                    // If it's all digits, luhn base 10 is used\n                    if (value.match(/^\\d*$/i)) {\n                        return $.fn.bootstrapValidator.helpers.luhn(value);\n                    }\n\n                    // Strip the check digit\n                    value = value.slice(0, -1);\n\n                    // Get every other char, and double it\n                    var cdCalc = '';\n                    for (var i = 1; i <= 13; i += 2) {\n                        cdCalc += (parseInt(value.charAt(i), 16) * 2).toString(16);\n                    }\n\n                    // Get the sum of each char in the string\n                    var sum = 0;\n                    for (i = 0; i < cdCalc.length; i++) {\n                        sum += parseInt(cdCalc.charAt(i), 16);\n                    }\n\n                    // If the last digit of the calc is 0, the check digit is 0\n                    return (sum % 10 === 0)\n                            ? (cd === '0')\n                            // Subtract it from the next highest 10s number (64 goes to 70) and subtract the sum\n                            // Double it and turn it into a hex char\n                            : (cd === ((Math.floor((sum + 10) / 10) * 10 - sum) * 2).toString(16));\n\n                // 14 digit hex representation (no check digit)\n                case /^[0-9A-F]{14}$/i.test(value):\n                // 14 digit hex representation + dashes or spaces (no check digit)\n                case /^[0-9A-F]{2}[- ][0-9A-F]{6}[- ][0-9A-F]{6}$/i.test(value):\n                // 18 digit decimal representation (no check digit)\n                case /^\\d{18}$/.test(value):\n                // 18 digit decimal representation + dashes or spaces (no check digit)\n                case /^\\d{5}[- ]\\d{5}[- ]\\d{4}[- ]\\d{4}$/.test(value):\n                    return true;\n\n                default:\n                    return false;\n            }\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.notEmpty = $.extend($.fn.bootstrapValidator.i18n.notEmpty || {}, {\n        'default': 'Please enter a value'\n    });\n\n    $.fn.bootstrapValidator.validators.notEmpty = {\n        enableByHtml5: function($field) {\n            var required = $field.attr('required') + '';\n            return ('required' === required || 'true' === required);\n        },\n\n        /**\n         * Check if input value is empty or not\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var type = $field.attr('type');\n            if ('radio' === type || 'checkbox' === type) {\n                return validator\n                            .getFieldElements($field.attr('data-bv-field'))\n                            .filter(':checked')\n                            .length > 0;\n            }\n\n            if ('number' === type && $field.get(0).validity && $field.get(0).validity.badInput === true) {\n                return true;\n            }\n\n            return $.trim($field.val()) !== '';\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.numeric = $.extend($.fn.bootstrapValidator.i18n.numeric || {}, {\n        'default': 'Please enter a valid float number'\n    });\n\n    $.fn.bootstrapValidator.validators.numeric = {\n        html5Attributes: {\n            message: 'message',\n            separator: 'separator'\n        },\n\n        enableByHtml5: function($field) {\n            return ('number' === $field.attr('type')) && ($field.attr('step') !== undefined) && ($field.attr('step') % 1 !== 0);\n        },\n\n        /**\n         * Validate decimal number\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * - separator: The decimal separator. Can be \".\" (default), \",\"\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            if (this.enableByHtml5($field) && $field.get(0).validity && $field.get(0).validity.badInput === true) {\n                return false;\n            }\n\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n            var separator = options.separator || '.';\n            if (separator !== '.') {\n                value = value.replace(separator, '.');\n            }\n\n            return !isNaN(parseFloat(value)) && isFinite(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.phone = $.extend($.fn.bootstrapValidator.i18n.phone || {}, {\n        'default': 'Please enter a valid phone number',\n        countryNotSupported: 'The country code %s is not supported',\n        country: 'Please enter a valid phone number in %s',\n        countries: {\n            BR: 'Brazil',\n            CN: 'China',\n            CZ: 'Czech Republic',\n            DE: 'Germany',\n            DK: 'Denmark',\n            ES: 'Spain',\n            FR: 'France',\n            GB: 'United Kingdom',\n            MA: 'Morocco',\n            PK: 'Pakistan',\n            RO: 'Romania',\n            RU: 'Russia',\n            SK: 'Slovakia',\n            TH: 'Thailand',\n            US: 'USA',\n            VE: 'Venezuela'\n        }\n    });\n\n    $.fn.bootstrapValidator.validators.phone = {\n        html5Attributes: {\n            message: 'message',\n            country: 'country'\n        },\n\n        // The supported countries\n        COUNTRY_CODES: ['BR', 'CN', 'CZ', 'DE', 'DK', 'ES', 'FR', 'GB', 'MA', 'PK', 'RO', 'RU', 'SK', 'TH', 'US', 'VE'],\n\n        /**\n         * Return true if the input value contains a valid phone number for the country\n         * selected in the options\n         *\n         * @param {BootstrapValidator} validator Validate plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * - country: The ISO-3166 country code. It can be\n         *      - A country code\n         *      - Name of field which its value defines the country code\n         *      - Name of callback function that returns the country code\n         *      - A callback function that returns the country code\n         *\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var country = options.country;\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\n                // Try to determine the country\n                country = validator.getDynamicOption($field, country);\n            }\n\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n                return {\n                    valid: false,\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.phone.countryNotSupported, country)\n                };\n            }\n\n            var isValid = true;\n            switch (country.toUpperCase()) {\n                case 'BR':\n                    // Test: http://regexr.com/399m1\n                    value   = $.trim(value);\n                    isValid = (/^(([\\d]{4}[-.\\s]{1}[\\d]{2,3}[-.\\s]{1}[\\d]{2}[-.\\s]{1}[\\d]{2})|([\\d]{4}[-.\\s]{1}[\\d]{3}[-.\\s]{1}[\\d]{4})|((\\(?\\+?[0-9]{2}\\)?\\s?)?(\\(?\\d{2}\\)?\\s?)?\\d{4,5}[-.\\s]?\\d{4}))$/).test(value);\n                    break;\n\n                case 'CN':\n                    // http://regexr.com/39dq4\n                    value   = $.trim(value);\n                    isValid = (/^((00|\\+)?(86(?:-| )))?((\\d{11})|(\\d{3}[- ]{1}\\d{4}[- ]{1}\\d{4})|((\\d{2,4}[- ]){1}(\\d{7,8}|(\\d{3,4}[- ]{1}\\d{4}))([- ]{1}\\d{1,4})?))$/).test(value);\n                    break;\n\n                case 'CZ':\n                    // Test: http://regexr.com/39hhl\n                    isValid = /^(((00)([- ]?)|\\+)(420)([- ]?))?((\\d{3})([- ]?)){2}(\\d{3})$/.test(value);\n                    break;\n\n                case 'DE':\n                    // Test: http://regexr.com/39pkg\n                    value   = $.trim(value);\n                    isValid = (/^(((((((00|\\+)49[ \\-/]?)|0)[1-9][0-9]{1,4})[ \\-/]?)|((((00|\\+)49\\()|\\(0)[1-9][0-9]{1,4}\\)[ \\-/]?))[0-9]{1,7}([ \\-/]?[0-9]{1,5})?)$/).test(value);\n                    break;\n\n                case 'DK':\n                    // Mathing DK phone numbers with country code in 1 of 3 formats and an\n                    // 8 digit phone number not starting with a 0 or 1. Can have 1 space\n                    // between each character except inside the country code.\n                    // Test: http://regex101.com/r/sS8fO4/1\n                    value   = $.trim(value);\n                    isValid = (/^(\\+45|0045|\\(45\\))?\\s?[2-9](\\s?\\d){7}$/).test(value);\n                    break;\n\n                case 'ES':\n                    // http://regex101.com/r/rB9mA9/1\n                    value   = $.trim(value);\n                    isValid = (/^(?:(?:(?:\\+|00)34\\D?))?(?:9|6)(?:\\d\\D?){8}$/).test(value);\n                    break;\n\n                case 'FR':\n                    // http://regexr.com/39a2p\n                    value   = $.trim(value);\n                    isValid = (/^(?:(?:(?:\\+|00)33[ ]?(?:\\(0\\)[ ]?)?)|0){1}[1-9]{1}([ .-]?)(?:\\d{2}\\1?){3}\\d{2}$/).test(value);\n                    break;\n\n            \tcase 'GB':\n            \t\t// http://aa-asterisk.org.uk/index.php/Regular_Expressions_for_Validating_and_Formatting_GB_Telephone_Numbers#Match_GB_telephone_number_in_any_format\n            \t\t// Test: http://regexr.com/38uhv\n            \t\tvalue   = $.trim(value);\n            \t\tisValid = (/^\\(?(?:(?:0(?:0|11)\\)?[\\s-]?\\(?|\\+)44\\)?[\\s-]?\\(?(?:0\\)?[\\s-]?\\(?)?|0)(?:\\d{2}\\)?[\\s-]?\\d{4}[\\s-]?\\d{4}|\\d{3}\\)?[\\s-]?\\d{3}[\\s-]?\\d{3,4}|\\d{4}\\)?[\\s-]?(?:\\d{5}|\\d{3}[\\s-]?\\d{3})|\\d{5}\\)?[\\s-]?\\d{4,5}|8(?:00[\\s-]?11[\\s-]?11|45[\\s-]?46[\\s-]?4\\d))(?:(?:[\\s-]?(?:x|ext\\.?\\s?|\\#)\\d+)?)$/).test(value);\n                    break;\n\n                case 'MA':\n                    // http://en.wikipedia.org/wiki/Telephone_numbers_in_Morocco\n                    // Test: http://regexr.com/399n8\n                    value   = $.trim(value);\n                    isValid = (/^(?:(?:(?:\\+|00)212[\\s]?(?:[\\s]?\\(0\\)[\\s]?)?)|0){1}(?:5[\\s.-]?[2-3]|6[\\s.-]?[13-9]){1}[0-9]{1}(?:[\\s.-]?\\d{2}){3}$/).test(value);\n                    break;\n\n                case 'PK':\n                    // http://regex101.com/r/yH8aV9/2\n                    value   = $.trim(value);\n                    isValid = (/^0?3[0-9]{2}[0-9]{7}$/).test(value);\n                    break;\n\n        \t\tcase 'RO':\n        \t\t    // All mobile network and land line\n                    // http://regexr.com/39fv1\n        \t\t    isValid = (/^(\\+4|)?(07[0-8]{1}[0-9]{1}|02[0-9]{2}|03[0-9]{2}){1}?(\\s|\\.|\\-)?([0-9]{3}(\\s|\\.|\\-|)){2}$/g).test(value);\n        \t\t    break;\n\n                case 'RU':\n                    // http://regex101.com/r/gW7yT5/5\n                    isValid = (/^((8|\\+7|007)[\\-\\.\\/ ]?)?([\\(\\/\\.]?\\d{3}[\\)\\/\\.]?[\\-\\.\\/ ]?)?[\\d\\-\\.\\/ ]{7,10}$/g).test(value);\n                    break;\n\n                case 'SK':\n                    // Test: http://regexr.com/39hhl\n                    isValid = /^(((00)([- ]?)|\\+)(420)([- ]?))?((\\d{3})([- ]?)){2}(\\d{3})$/.test(value);\n                    break;\n\n                case 'TH':\n        \t\t    // http://regex101.com/r/vM5mZ4/2\n        \t\t    isValid = (/^0\\(?([6|8-9]{2})*-([0-9]{3})*-([0-9]{4})$/).test(value);\n        \t\t    break;\n\n                case 'VE':\n                    // http://regex101.com/r/eM2yY0/6\n                    value   = $.trim(value);\n                    isValid = (/^0(?:2(?:12|4[0-9]|5[1-9]|6[0-9]|7[0-8]|8[1-35-8]|9[1-5]|3[45789])|4(?:1[246]|2[46]))\\d{7}$/).test(value);\n                    break;\n\n                case 'US':\n                /* falls through */\n                default:\n                    // Make sure US phone numbers have 10 digits\n                    // May start with 1, +1, or 1-; should discard\n                    // Area code may be delimited with (), & sections may be delimited with . or -\n                    // Test: http://regexr.com/38mqi\n                    value   = value.replace(/\\D/g, '');\n                    isValid = (/^(?:(1\\-?)|(\\+1 ?))?\\(?(\\d{3})[\\)\\-\\.]?(\\d{3})[\\-\\.]?(\\d{4})$/).test(value) && (value.length === 10);\n                    break;\n            }\n\n            return {\n                valid: isValid,\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.phone.country, $.fn.bootstrapValidator.i18n.phone.countries[country])\n            };\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.regexp = $.extend($.fn.bootstrapValidator.i18n.regexp || {}, {\n        'default': 'Please enter a value matching the pattern'\n    });\n\n    $.fn.bootstrapValidator.validators.regexp = {\n        html5Attributes: {\n            message: 'message',\n            regexp: 'regexp'\n        },\n\n        enableByHtml5: function($field) {\n            var pattern = $field.attr('pattern');\n            if (pattern) {\n                return {\n                    regexp: pattern\n                };\n            }\n\n            return false;\n        },\n\n        /**\n         * Check if the element value matches given regular expression\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consists of the following key:\n         * - regexp: The regular expression you need to check\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var regexp = ('string' === typeof options.regexp) ? new RegExp(options.regexp) : options.regexp;\n            return regexp.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.remote = $.extend($.fn.bootstrapValidator.i18n.remote || {}, {\n        'default': 'Please enter a valid value'\n    });\n\n    $.fn.bootstrapValidator.validators.remote = {\n        html5Attributes: {\n            message: 'message',\n            name: 'name',\n            type: 'type',\n            url: 'url',\n            data: 'data',\n            delay: 'delay'\n        },\n\n        /**\n         * Destroy the timer when destroying the bootstrapValidator (using validator.destroy() method)\n         */\n        destroy: function(validator, $field, options) {\n            if ($field.data('bv.remote.timer')) {\n                clearTimeout($field.data('bv.remote.timer'));\n                $field.removeData('bv.remote.timer');\n            }\n        },\n\n        /**\n         * Request a remote server to check the input value\n         *\n         * @param {BootstrapValidator} validator Plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - url {String|Function}\n         * - type {String} [optional] Can be GET or POST (default)\n         * - data {Object|Function} [optional]: By default, it will take the value\n         *  {\n         *      <fieldName>: <fieldValue>\n         *  }\n         * - delay\n         * - name {String} [optional]: Override the field name for the request.\n         * - message: The invalid message\n         * - headers: Additional headers\n         * @returns {Deferred}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val(),\n                dfd   = new $.Deferred();\n            if (value === '') {\n                dfd.resolve($field, 'remote', { valid: true });\n                return dfd;\n            }\n\n            var name    = $field.attr('data-bv-field'),\n                data    = options.data || {},\n                url     = options.url,\n                type    = options.type || 'GET',\n                headers = options.headers || {};\n\n            // Support dynamic data\n            if ('function' === typeof data) {\n                data = data.call(this, validator);\n            }\n\n            // Parse string data from HTML5 attribute\n            if ('string' === typeof data) {\n                data = JSON.parse(data);\n            }\n\n            // Support dynamic url\n            if ('function' === typeof url) {\n                url = url.call(this, validator);\n            }\n\n            data[options.name || name] = value;\n            function runCallback() {\n                var xhr = $.ajax({\n                    type: type,\n                    headers: headers,\n                    url: url,\n                    dataType: 'json',\n                    data: data\n                });\n                xhr.then(function(response) {\n                    response.valid = response.valid === true || response.valid === 'true';\n                    dfd.resolve($field, 'remote', response);\n                });\n\n                dfd.fail(function() {\n                    xhr.abort();\n                });\n\n                return dfd;\n            }\n            \n            if (options.delay) {\n                // Since the form might have multiple fields with the same name\n                // I have to attach the timer to the field element\n                if ($field.data('bv.remote.timer')) {\n                    clearTimeout($field.data('bv.remote.timer'));\n                }\n\n                $field.data('bv.remote.timer', setTimeout(runCallback, options.delay));\n                return dfd;\n            } else {\n                return runCallback();\n            }\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.rtn = $.extend($.fn.bootstrapValidator.i18n.rtn || {}, {\n        'default': 'Please enter a valid RTN number'\n    });\n\n    $.fn.bootstrapValidator.validators.rtn = {\n        /**\n         * Validate a RTN (Routing transit number)\n         * Examples:\n         * - Valid: 021200025, 789456124\n         *\n         * @see http://en.wikipedia.org/wiki/Routing_transit_number\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            if (!/^\\d{9}$/.test(value)) {\n                return false;\n            }\n\n            var sum = 0;\n            for (var i = 0; i < value.length; i += 3) {\n                sum += parseInt(value.charAt(i),     10) * 3\n                    +  parseInt(value.charAt(i + 1), 10) * 7\n                    +  parseInt(value.charAt(i + 2), 10);\n            }\n            return (sum !== 0 && sum % 10 === 0);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.sedol = $.extend($.fn.bootstrapValidator.i18n.sedol || {}, {\n        'default': 'Please enter a valid SEDOL number'\n    });\n\n    $.fn.bootstrapValidator.validators.sedol = {\n        /**\n         * Validate a SEDOL (Stock Exchange Daily Official List)\n         * Examples:\n         * - Valid: 0263494, B0WNLY7\n         *\n         * @see http://en.wikipedia.org/wiki/SEDOL\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            value = value.toUpperCase();\n            if (!/^[0-9A-Z]{7}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [1, 3, 1, 7, 3, 9, 1],\n                length = value.length;\n            for (var i = 0; i < length - 1; i++) {\n\t            sum += weight[i] * parseInt(value.charAt(i), 36);\n\t        }\n\t        sum = (10 - sum % 10) % 10;\n            return sum + '' === value.charAt(length - 1);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.siren = $.extend($.fn.bootstrapValidator.i18n.siren || {}, {\n        'default': 'Please enter a valid SIREN number'\n    });\n\n\t$.fn.bootstrapValidator.validators.siren = {\n\t\t/**\n\t\t * Check if a string is a siren number\n\t\t *\n\t\t * @param {BootstrapValidator} validator The validator plugin instance\n\t\t * @param {jQuery} $field Field element\n\t\t * @param {Object} options Consist of key:\n         * - message: The invalid message\n\t\t * @returns {Boolean}\n\t\t */\n\t\tvalidate: function(validator, $field, options) {\n\t\t\tvar value = $field.val();\n\t\t\tif (value === '') {\n\t\t\t\treturn true;\n\t\t\t}\n\n            if (!/^\\d{9}$/.test(value)) {\n                return false;\n            }\n            return $.fn.bootstrapValidator.helpers.luhn(value);\n\t\t}\n\t};\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.siret = $.extend($.fn.bootstrapValidator.i18n.siret || {}, {\n        'default': 'Please enter a valid SIRET number'\n    });\n\n\t$.fn.bootstrapValidator.validators.siret = {\n        /**\n         * Check if a string is a siret number\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n\t\tvalidate: function(validator, $field, options) {\n\t\t\tvar value = $field.val();\n\t\t\tif (value === '') {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tvar sum    = 0,\n                length = value.length,\n                tmp;\n\t\t\tfor (var i = 0; i < length; i++) {\n                tmp = parseInt(value.charAt(i), 10);\n\t\t\t\tif ((i % 2) === 0) {\n\t\t\t\t\ttmp = tmp * 2;\n\t\t\t\t\tif (tmp > 9) {\n\t\t\t\t\t\ttmp -= 9;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsum += tmp;\n\t\t\t}\n\t\t\treturn (sum % 10 === 0);\n\t\t}\n\t};\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.step = $.extend($.fn.bootstrapValidator.i18n.step || {}, {\n        'default': 'Please enter a valid step of %s'\n    });\n\n    $.fn.bootstrapValidator.validators.step = {\n        html5Attributes: {\n            message: 'message',\n            base: 'baseValue',\n            step: 'step'\n        },\n\n        /**\n         * Return true if the input value is valid step one\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Can consist of the following keys:\n         * - baseValue: The base value\n         * - step: The step\n         * - message: The invalid message\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            options = $.extend({}, { baseValue: 0, step: 1 }, options);\n            value   = parseFloat(value);\n            if (!$.isNumeric(value)) {\n                return false;\n            }\n\n            var round = function(x, precision) {\n                    var m = Math.pow(10, precision);\n                    x = x * m;\n                    var sign   = (x > 0) | -(x < 0),\n                        isHalf = (x % 1 === 0.5 * sign);\n                    if (isHalf) {\n                        return (Math.floor(x) + (sign > 0)) / m;\n                    } else {\n                        return Math.round(x) / m;\n                    }\n                },\n                floatMod = function(x, y) {\n                    if (y === 0.0) {\n                        return 1.0;\n                    }\n                    var dotX      = (x + '').split('.'),\n                        dotY      = (y + '').split('.'),\n                        precision = ((dotX.length === 1) ? 0 : dotX[1].length) + ((dotY.length === 1) ? 0 : dotY[1].length);\n                    return round(x - y * Math.floor(x / y), precision);\n                };\n\n            var mod = floatMod(value - options.baseValue, options.step);\n            return {\n                valid: mod === 0.0 || mod === options.step,\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.step['default'], [options.step])\n            };\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.stringCase = $.extend($.fn.bootstrapValidator.i18n.stringCase || {}, {\n        'default': 'Please enter only lowercase characters',\n        upper: 'Please enter only uppercase characters'\n    });\n\n    $.fn.bootstrapValidator.validators.stringCase = {\n        html5Attributes: {\n            message: 'message',\n            'case': 'case'\n        },\n\n        /**\n         * Check if a string is a lower or upper case one\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * - case: Can be 'lower' (default) or 'upper'\n         * @returns {Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var stringCase = (options['case'] || 'lower').toLowerCase();\n            return {\n                valid: ('upper' === stringCase) ? value === value.toUpperCase() : value === value.toLowerCase(),\n                message: options.message || (('upper' === stringCase) ? $.fn.bootstrapValidator.i18n.stringCase.upper : $.fn.bootstrapValidator.i18n.stringCase['default'])\n            };\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.stringLength = $.extend($.fn.bootstrapValidator.i18n.stringLength || {}, {\n        'default': 'Please enter a value with valid length',\n        less: 'Please enter less than %s characters',\n        more: 'Please enter more than %s characters',\n        between: 'Please enter value between %s and %s characters long'\n    });\n\n    $.fn.bootstrapValidator.validators.stringLength = {\n        html5Attributes: {\n            message: 'message',\n            min: 'min',\n            max: 'max',\n            trim: 'trim',\n            utf8bytes: 'utf8Bytes'\n        },\n\n        enableByHtml5: function($field) {\n            var options   = {},\n                maxLength = $field.attr('maxlength'),\n                minLength = $field.attr('minlength');\n            if (maxLength) {\n                options.max = parseInt(maxLength, 10);\n            }\n            if (minLength) {\n                options.min = parseInt(minLength, 10);\n            }\n\n            return $.isEmptyObject(options) ? false : options;\n        },\n\n        /**\n         * Check if the length of element value is less or more than given number\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consists of following keys:\n         * - min\n         * - max\n         * At least one of two keys is required\n         * The min, max keys define the number which the field value compares to. min, max can be\n         *      - A number\n         *      - Name of field which its value defines the number\n         *      - Name of callback function that returns the number\n         *      - A callback function that returns the number\n         *\n         * - message: The invalid message\n         * - trim: Indicate the length will be calculated after trimming the value or not. It is false, by default\n         * - utf8bytes: Evaluate string length in UTF-8 bytes, default to false\n         * @returns {Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (options.trim === true || options.trim === 'true') {\n                value = $.trim(value);\n            }\n\n            if (value === '') {\n                return true;\n            }\n\n            var min        = $.isNumeric(options.min) ? options.min : validator.getDynamicOption($field, options.min),\n                max        = $.isNumeric(options.max) ? options.max : validator.getDynamicOption($field, options.max),\n                // Credit to http://stackoverflow.com/a/23329386 (@lovasoa) for UTF-8 byte length code\n                utf8Length = function(str) {\n                                 var s = str.length;\n                                 for (var i = str.length - 1; i >= 0; i--) {\n                                     var code = str.charCodeAt(i);\n                                     if (code > 0x7f && code <= 0x7ff) {\n                                         s++;\n                                     } else if (code > 0x7ff && code <= 0xffff) {\n                                         s += 2;\n                                     }\n                                     if (code >= 0xDC00 && code <= 0xDFFF) {\n                                         i--;\n                                     }\n                                 }\n                                 return s;\n                             },\n                length     = options.utf8Bytes ? utf8Length(value) : value.length,\n                isValid    = true,\n                message    = options.message || $.fn.bootstrapValidator.i18n.stringLength['default'];\n\n            if ((min && length < parseInt(min, 10)) || (max && length > parseInt(max, 10))) {\n                isValid = false;\n            }\n\n            switch (true) {\n                case (!!min && !!max):\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.between, [parseInt(min, 10), parseInt(max, 10)]);\n                    break;\n\n                case (!!min):\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.more, parseInt(min, 10));\n                    break;\n\n                case (!!max):\n                    message = $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.stringLength.less, parseInt(max, 10));\n                    break;\n\n                default:\n                    break;\n            }\n\n            return { valid: isValid, message: message };\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.uri = $.extend($.fn.bootstrapValidator.i18n.uri || {}, {\n        'default': 'Please enter a valid URI'\n    });\n\n    $.fn.bootstrapValidator.validators.uri = {\n        html5Attributes: {\n            message: 'message',\n            allowlocal: 'allowLocal',\n            protocol: 'protocol'\n        },\n\n        enableByHtml5: function($field) {\n            return ('url' === $field.attr('type'));\n        },\n\n        /**\n         * Return true if the input value is a valid URL\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options\n         * - message: The error message\n         * - allowLocal: Allow the private and local network IP. Default to false\n         * - protocol: The protocols, separated by a comma. Default to \"http, https, ftp\"\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // Credit to https://gist.github.com/dperini/729294\n            //\n            // Regular Expression for URL validation\n            //\n            // Author: Diego Perini\n            // Updated: 2010/12/05\n            //\n            // the regular expression composed & commented\n            // could be easily tweaked for RFC compliance,\n            // it was expressly modified to fit & satisfy\n            // these test for an URL shortener:\n            //\n            //   http://mathiasbynens.be/demo/url-regex\n            //\n            // Notes on possible differences from a standard/generic validation:\n            //\n            // - utf-8 char class take in consideration the full Unicode range\n            // - TLDs are mandatory unless `allowLocal` is true\n            // - protocols have been restricted to ftp, http and https only as requested\n            //\n            // Changes:\n            //\n            // - IP address dotted notation validation, range: 1.0.0.0 - 223.255.255.255\n            //   first and last IP address of each class is considered invalid\n            //   (since they are broadcast/network addresses)\n            //\n            // - Added exclusion of private, reserved and/or local networks ranges\n            //   unless `allowLocal` is true\n            //\n            // - Added possibility of choosing a custom protocol\n            //\n            var allowLocal = options.allowLocal === true || options.allowLocal === 'true',\n                protocol   = (options.protocol || 'http, https, ftp').split(',').join('|').replace(/\\s/g, ''),\n                urlExp     = new RegExp(\n                    \"^\" +\n                    // protocol identifier\n                    \"(?:(?:\" + protocol + \")://)\" +\n                    // user:pass authentication\n                    \"(?:\\\\S+(?::\\\\S*)?@)?\" +\n                    \"(?:\" +\n                    // IP address exclusion\n                    // private & local networks\n                    (allowLocal\n                        ? ''\n                        : (\"(?!(?:10|127)(?:\\\\.\\\\d{1,3}){3})\" +\n                           \"(?!(?:169\\\\.254|192\\\\.168)(?:\\\\.\\\\d{1,3}){2})\" +\n                           \"(?!172\\\\.(?:1[6-9]|2\\\\d|3[0-1])(?:\\\\.\\\\d{1,3}){2})\")) +\n                    // IP address dotted notation octets\n                    // excludes loopback network 0.0.0.0\n                    // excludes reserved space >= 224.0.0.0\n                    // excludes network & broadcast addresses\n                    // (first & last IP address of each class)\n                    \"(?:[1-9]\\\\d?|1\\\\d\\\\d|2[01]\\\\d|22[0-3])\" +\n                    \"(?:\\\\.(?:1?\\\\d{1,2}|2[0-4]\\\\d|25[0-5])){2}\" +\n                    \"(?:\\\\.(?:[1-9]\\\\d?|1\\\\d\\\\d|2[0-4]\\\\d|25[0-4]))\" +\n                    \"|\" +\n                    // host name\n                    \"(?:(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)\" +\n                    // domain name\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff0-9]+-?)*[a-z\\\\u00a1-\\\\uffff0-9]+)*\" +\n                    // TLD identifier\n                    \"(?:\\\\.(?:[a-z\\\\u00a1-\\\\uffff]{2,}))\" +\n                    // Allow intranet sites (no TLD) if `allowLocal` is true\n                    (allowLocal ? '?' : '') +\n                    \")\" +\n                    // port number\n                    \"(?::\\\\d{2,5})?\" +\n                    // resource path\n                    \"(?:/[^\\\\s]*)?\" +\n                    \"$\", \"i\"\n            );\n\n            return urlExp.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.uuid = $.extend($.fn.bootstrapValidator.i18n.uuid || {}, {\n        'default': 'Please enter a valid UUID number',\n        version: 'Please enter a valid UUID version %s number'\n    });\n\n    $.fn.bootstrapValidator.validators.uuid = {\n        html5Attributes: {\n            message: 'message',\n            version: 'version'\n        },\n\n        /**\n         * Return true if and only if the input value is a valid UUID string\n         *\n         * @see http://en.wikipedia.org/wiki/Universally_unique_identifier\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * - version: Can be 3, 4, 5, null\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // See the format at http://en.wikipedia.org/wiki/Universally_unique_identifier#Variants_and_versions\n            var patterns = {\n                    '3': /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\n                    '4': /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n                    '5': /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\n                    all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\n                },\n                version = options.version ? (options.version + '') : 'all';\n            return {\n                valid: (null === patterns[version]) ? true : patterns[version].test(value),\n                message: options.version\n                            ? $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.uuid.version, options.version)\n                            : (options.message || $.fn.bootstrapValidator.i18n.uuid['default'])\n            };\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.vat = $.extend($.fn.bootstrapValidator.i18n.vat || {}, {\n        'default': 'Please enter a valid VAT number',\n        countryNotSupported: 'The country code %s is not supported',\n        country: 'Please enter a valid VAT number in %s',\n        countries: {\n            AT: 'Austria',\n            BE: 'Belgium',\n            BG: 'Bulgaria',\n            BR: 'Brazil',\n            CH: 'Switzerland',\n            CY: 'Cyprus',\n            CZ: 'Czech Republic',\n            DE: 'Germany',\n            DK: 'Denmark',\n            EE: 'Estonia',\n            ES: 'Spain',\n            FI: 'Finland',\n            FR: 'France',\n            GB: 'United Kingdom',\n            GR: 'Greek',\n            EL: 'Greek',\n            HU: 'Hungary',\n            HR: 'Croatia',\n            IE: 'Ireland',\n            IS: 'Iceland',\n            IT: 'Italy',\n            LT: 'Lithuania',\n            LU: 'Luxembourg',\n            LV: 'Latvia',\n            MT: 'Malta',\n            NL: 'Netherlands',\n            NO: 'Norway',\n            PL: 'Poland',\n            PT: 'Portugal',\n            RO: 'Romania',\n            RU: 'Russia',\n            RS: 'Serbia',\n            SE: 'Sweden',\n            SI: 'Slovenia',\n            SK: 'Slovakia',\n            VE: 'Venezuela',\n            ZA: 'South Africa'\n        }\n    });\n\n    $.fn.bootstrapValidator.validators.vat = {\n        html5Attributes: {\n            message: 'message',\n            country: 'country'\n        },\n\n        // Supported country codes\n        COUNTRY_CODES: [\n            'AT', 'BE', 'BG', 'BR', 'CH', 'CY', 'CZ', 'DE', 'DK', 'EE', 'EL', 'ES', 'FI', 'FR', 'GB', 'GR', 'HR', 'HU',\n            'IE', 'IS', 'IT', 'LT', 'LU', 'LV', 'MT', 'NL', 'NO', 'PL', 'PT', 'RO', 'RU', 'RS', 'SE', 'SK', 'SI', 'VE',\n            'ZA'\n        ],\n\n        /**\n         * Validate an European VAT number\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * - country: The ISO 3166-1 country code. It can be\n         *      - One of country code defined in COUNTRY_CODES\n         *      - Name of field which its value defines the country code\n         *      - Name of callback function that returns the country code\n         *      - A callback function that returns the country code\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            var country = options.country;\n            if (!country) {\n                country = value.substr(0, 2);\n            } else if (typeof country !== 'string' || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n                // Determine the country code\n                country = validator.getDynamicOption($field, country);\n            }\n\n            if ($.inArray(country, this.COUNTRY_CODES) === -1) {\n                return {\n                    valid: false,\n                    message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.vat.countryNotSupported, country)\n                };\n            }\n\n            var method  = ['_', country.toLowerCase()].join('');\n            return this[method](value)\n                ? true\n                : {\n                    valid: false,\n                    message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.vat.country, $.fn.bootstrapValidator.i18n.vat.countries[country.toUpperCase()])\n                };\n        },\n\n        // VAT validators\n\n        /**\n         * Validate Austrian VAT number\n         * Example:\n         * - Valid: ATU13585627\n         * - Invalid: ATU13585626\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _at: function(value) {\n            if (/^ATU[0-9]{8}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^U[0-9]{8}$/.test(value)) {\n                return false;\n            }\n\n            value = value.substr(1);\n            var sum    = 0,\n                weight = [1, 2, 1, 2, 1, 2, 1],\n                temp   = 0;\n            for (var i = 0; i < 7; i++) {\n                temp = parseInt(value.charAt(i), 10) * weight[i];\n                if (temp > 9) {\n                    temp = Math.floor(temp / 10) + temp % 10;\n                }\n                sum += temp;\n            }\n\n            sum = 10 - (sum + 4) % 10;\n            if (sum === 10) {\n                sum = 0;\n            }\n\n            return (sum + '' === value.substr(7, 1));\n        },\n\n        /**\n         * Validate Belgian VAT number\n         * Example:\n         * - Valid: BE0428759497\n         * - Invalid: BE431150351\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _be: function(value) {\n            if (/^BE[0]{0,1}[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0]{0,1}[0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            if (value.length === 9) {\n                value = '0' + value;\n            }\n            if (value.substr(1, 1) === '0') {\n                return false;\n            }\n\n            var sum = parseInt(value.substr(0, 8), 10) + parseInt(value.substr(8, 2), 10);\n            return (sum % 97 === 0);\n        },\n\n        /**\n         * Validate Bulgarian VAT number\n         * Example:\n         * - Valid: BG175074752,\n         * BG7523169263, BG8032056031,\n         * BG7542011030,\n         * BG7111042925\n         * - Invalid: BG175074753, BG7552A10004, BG7111042922\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _bg: function(value) {\n            if (/^BG[0-9]{9,10}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{9,10}$/.test(value)) {\n                return false;\n            }\n\n            var sum = 0, i = 0;\n\n            // Legal entities\n            if (value.length === 9) {\n                for (i = 0; i < 8; i++) {\n                    sum += parseInt(value.charAt(i), 10) * (i + 1);\n                }\n                sum = sum % 11;\n                if (sum === 10) {\n                    sum = 0;\n                    for (i = 0; i < 8; i++) {\n                        sum += parseInt(value.charAt(i), 10) * (i + 3);\n                    }\n                }\n                sum = sum % 10;\n                return (sum + '' === value.substr(8));\n            }\n            // Physical persons, foreigners and others\n            else if (value.length === 10) {\n                // Validate Bulgarian national identification numbers\n                var egn = function(value) {\n                        // Check the birth date\n                        var year  = parseInt(value.substr(0, 2), 10) + 1900,\n                            month = parseInt(value.substr(2, 2), 10),\n                            day   = parseInt(value.substr(4, 2), 10);\n                        if (month > 40) {\n                            year += 100;\n                            month -= 40;\n                        } else if (month > 20) {\n                            year -= 100;\n                            month -= 20;\n                        }\n\n                        if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                            return false;\n                        }\n\n                        var sum    = 0,\n                            weight = [2, 4, 8, 5, 10, 9, 7, 3, 6];\n                        for (var i = 0; i < 9; i++) {\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\n                        }\n                        sum = (sum % 11) % 10;\n                        return (sum + '' === value.substr(9, 1));\n                    },\n                    // Validate Bulgarian personal number of a foreigner\n                    pnf = function(value) {\n                        var sum    = 0,\n                            weight = [21, 19, 17, 13, 11, 9, 7, 3, 1];\n                        for (var i = 0; i < 9; i++) {\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\n                        }\n                        sum = sum % 10;\n                        return (sum + '' === value.substr(9, 1));\n                    },\n                    // Finally, consider it as a VAT number\n                    vat = function(value) {\n                        var sum    = 0,\n                            weight = [4, 3, 2, 7, 6, 5, 4, 3, 2];\n                        for (var i = 0; i < 9; i++) {\n                            sum += parseInt(value.charAt(i), 10) * weight[i];\n                        }\n                        sum = 11 - sum % 11;\n                        if (sum === 10) {\n                            return false;\n                        }\n                        if (sum === 11) {\n                            sum = 0;\n                        }\n                        return (sum + '' === value.substr(9, 1));\n                    };\n                return (egn(value) || pnf(value) || vat(value));\n            }\n\n            return false;\n        },\n        \n        /**\n         * Validate Brazilian VAT number (CNPJ)\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _br: function(value) {\n            if (value === '') {\n                return true;\n            }\n            var cnpj = value.replace(/[^\\d]+/g, '');\n            if (cnpj === '' || cnpj.length !== 14) {\n                return false;\n            }\n\n            // Remove invalids CNPJs\n            if (cnpj === '00000000000000' || cnpj === '11111111111111' || cnpj === '22222222222222' ||\n                cnpj === '33333333333333' || cnpj === '44444444444444' || cnpj === '55555555555555' ||\n                cnpj === '66666666666666' || cnpj === '77777777777777' || cnpj === '88888888888888' ||\n                cnpj === '99999999999999')\n            {\n                return false;\n            }\n\n            // Validate verification digits\n            var length  = cnpj.length - 2,\n                numbers = cnpj.substring(0, length),\n                digits  = cnpj.substring(length),\n                sum     = 0,\n                pos     = length - 7;\n\n            for (var i = length; i >= 1; i--) {\n                sum += parseInt(numbers.charAt(length - i), 10) * pos--;\n                if (pos < 2) {\n                    pos = 9;\n                }\n            }\n\n            var result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n            if (result !== parseInt(digits.charAt(0), 10)) {\n                return false;\n            }\n\n            length  = length + 1;\n            numbers = cnpj.substring(0, length);\n            sum     = 0;\n            pos     = length - 7;\n            for (i = length; i >= 1; i--) {\n                sum += parseInt(numbers.charAt(length - i), 10) * pos--;\n                if (pos < 2) {\n                    pos = 9;\n                }\n            }\n\n            result = sum % 11 < 2 ? 0 : 11 - sum % 11;\n            return (result === parseInt(digits.charAt(1), 10));\n        },\n\n        /**\n         * Validate Swiss VAT number\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _ch: function(value) {\n            if (/^CHE[0-9]{9}(MWST)?$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^E[0-9]{9}(MWST)?$/.test(value)) {\n                return false;\n            }\n\n            value = value.substr(1);\n            var sum    = 0,\n                weight = [5, 4, 3, 2, 7, 6, 5, 4];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            sum = 11 - sum % 11;\n            if (sum === 10) {\n                return false;\n            }\n            if (sum === 11) {\n                sum = 0;\n            }\n\n            return (sum + '' === value.substr(8, 1));\n        },\n\n        /**\n         * Validate Cypriot VAT number\n         * Examples:\n         * - Valid: CY10259033P\n         * - Invalid: CY10259033Z\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _cy: function(value) {\n            if (/^CY[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-5|9]{1}[0-9]{7}[A-Z]{1}$/.test(value)) {\n                return false;\n            }\n\n            // Do not allow to start with \"12\"\n            if (value.substr(0, 2) === '12') {\n                return false;\n            }\n\n            // Extract the next digit and multiply by the counter.\n            var sum         = 0,\n                translation = {\n                    '0': 1,  '1': 0,  '2': 5,  '3': 7,  '4': 9,\n                    '5': 13, '6': 15, '7': 17, '8': 19, '9': 21\n                };\n            for (var i = 0; i < 8; i++) {\n                var temp = parseInt(value.charAt(i), 10);\n                if (i % 2 === 0) {\n                    temp = translation[temp + ''];\n                }\n                sum += temp;\n            }\n\n            sum = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'[sum % 26];\n            return (sum + '' === value.substr(8, 1));\n        },\n\n        /**\n         * Validate Czech Republic VAT number\n         * Can be:\n         * i) Legal entities (8 digit numbers)\n         * ii) Individuals with a RC (the 9 or 10 digit Czech birth number)\n         * iii) Individuals without a RC (9 digit numbers beginning with 6)\n         *\n         * Examples:\n         * - Valid: i) CZ25123891; ii) CZ7103192745, CZ991231123; iii) CZ640903926\n         * - Invalid: i) CZ25123890; ii) CZ1103492745, CZ590312123\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _cz: function(value) {\n            if (/^CZ[0-9]{8,10}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{8,10}$/.test(value)) {\n                return false;\n            }\n\n            var sum = 0,\n                i   = 0;\n            if (value.length === 8) {\n                // Do not allow to start with '9'\n                if (value.charAt(0) + '' === '9') {\n                    return false;\n                }\n\n                sum = 0;\n                for (i = 0; i < 7; i++) {\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\n                }\n                sum = 11 - sum % 11;\n                if (sum === 10) {\n                    sum = 0;\n                }\n                if (sum === 11) {\n                    sum = 1;\n                }\n\n                return (sum + '' === value.substr(7, 1));\n            } else if (value.length === 9 && (value.charAt(0) + '' === '6')) {\n                sum = 0;\n                // Skip the first (which is 6)\n                for (i = 0; i < 7; i++) {\n                    sum += parseInt(value.charAt(i + 1), 10) * (8 - i);\n                }\n                sum = 11 - sum % 11;\n                if (sum === 10) {\n                    sum = 0;\n                }\n                if (sum === 11) {\n                    sum = 1;\n                }\n                sum = [8, 7, 6, 5, 4, 3, 2, 1, 0, 9, 10][sum - 1];\n                return (sum + '' === value.substr(8, 1));\n            } else if (value.length === 9 || value.length === 10) {\n                // Validate Czech birth number (Rodné číslo), which is also national identifier\n                var year  = 1900 + parseInt(value.substr(0, 2), 10),\n                    month = parseInt(value.substr(2, 2), 10) % 50 % 20,\n                    day   = parseInt(value.substr(4, 2), 10);\n                if (value.length === 9) {\n                    if (year >= 1980) {\n                        year -= 100;\n                    }\n                    if (year > 1953) {\n                        return false;\n                    }\n                } else if (year < 1954) {\n                    year += 100;\n                }\n\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                    return false;\n                }\n\n                // Check that the birth date is not in the future\n                if (value.length === 10) {\n                    var check = parseInt(value.substr(0, 9), 10) % 11;\n                    if (year < 1985) {\n                        check = check % 10;\n                    }\n                    return (check + '' === value.substr(9, 1));\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        /**\n         * Validate German VAT number\n         * Examples:\n         * - Valid: DE136695976\n         * - Invalid: DE136695978\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _de: function(value) {\n            if (/^DE[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\n        },\n\n        /**\n         * Validate Danish VAT number\n         * Example:\n         * - Valid: DK13585628\n         * - Invalid: DK13585627\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _dk: function(value) {\n            if (/^DK[0-9]{8}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{8}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [2, 7, 6, 5, 4, 3, 2, 1];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            return (sum % 11 === 0);\n        },\n\n        /**\n         * Validate Estonian VAT number\n         * Examples:\n         * - Valid: EE100931558, EE100594102\n         * - Invalid: EE100594103\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _ee: function(value) {\n            if (/^EE[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [3, 7, 1, 3, 7, 1, 3, 7, 1];\n            for (var i = 0; i < 9; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            return (sum % 10 === 0);\n        },\n\n        /**\n         * Validate Spanish VAT number (NIF - Número de Identificación Fiscal)\n         * Can be:\n         * i) DNI (Documento nacional de identidad), for Spaniards\n         * ii) NIE (Número de Identificación de Extranjeros), for foreigners\n         * iii) CIF (Certificado de Identificación Fiscal), for legal entities and others\n         *\n         * Examples:\n         * - Valid: i) ES54362315K; ii) ESX2482300W, ESX5253868R; iii) ESM1234567L, ESJ99216582, ESB58378431, ESB64717838\n         * - Invalid: i) ES54362315Z; ii) ESX2482300A; iii) ESJ99216583\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _es: function(value) {\n            if (/^ES[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9A-Z][0-9]{7}[0-9A-Z]$/.test(value)) {\n                return false;\n            }\n\n            var dni = function(value) {\n                    var check = parseInt(value.substr(0, 8), 10);\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n                    return (check + '' === value.substr(8, 1));\n                },\n                nie = function(value) {\n                    var check = ['XYZ'.indexOf(value.charAt(0)), value.substr(1)].join('');\n                    check = parseInt(check, 10);\n                    check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n                    return (check + '' === value.substr(8, 1));\n                },\n                cif = function(value) {\n                    var first = value.charAt(0), check;\n                    if ('KLM'.indexOf(first) !== -1) {\n                        // K: Spanish younger than 14 year old\n                        // L: Spanish living outside Spain without DNI\n                        // M: Granted the tax to foreigners who have no NIE\n                        check = parseInt(value.substr(1, 8), 10);\n                        check = 'TRWAGMYFPDXBNJZSQVHLCKE'[check % 23];\n                        return (check + '' === value.substr(8, 1));\n                    } else if ('ABCDEFGHJNPQRSUVW'.indexOf(first) !== -1) {\n                        var sum    = 0,\n                            weight = [2, 1, 2, 1, 2, 1, 2],\n                            temp   = 0;\n\n                        for (var i = 0; i < 7; i++) {\n                            temp = parseInt(value.charAt(i + 1), 10) * weight[i];\n                            if (temp > 9) {\n                                temp = Math.floor(temp / 10) + temp % 10;\n                            }\n                            sum += temp;\n                        }\n                        sum = 10 - sum % 10;\n                        return (sum + '' === value.substr(8, 1) || 'JABCDEFGHI'[sum] === value.substr(8, 1));\n                    }\n\n                    return false;\n                };\n\n            var first = value.charAt(0);\n            if (/^[0-9]$/.test(first)) {\n                return dni(value);\n            } else if (/^[XYZ]$/.test(first)) {\n                return nie(value);\n            } else {\n                return cif(value);\n            }\n        },\n\n        /**\n         * Validate Finnish VAT number\n         * Examples:\n         * - Valid: FI20774740\n         * - Invalid: FI20774741\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _fi: function(value) {\n            if (/^FI[0-9]{8}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{8}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [7, 9, 10, 5, 8, 4, 2, 1];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            return (sum % 11 === 0);\n        },\n\n        /**\n         * Validate French VAT number (TVA - taxe sur la valeur ajoutée)\n         * It's constructed by a SIREN number, prefixed by two characters.\n         *\n         * Examples:\n         * - Valid: FR40303265045, FR23334175221, FRK7399859412, FR4Z123456782\n         * - Invalid: FR84323140391\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _fr: function(value) {\n            if (/^FR[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9A-Z]{2}[0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            if (!$.fn.bootstrapValidator.helpers.luhn(value.substr(2))) {\n                return false;\n            }\n\n            if (/^[0-9]{2}$/.test(value.substr(0, 2))) {\n                // First two characters are digits\n                return value.substr(0, 2) === (parseInt(value.substr(2) + '12', 10) % 97 + '');\n            } else {\n                // The first characters cann't be O and I\n                var alphabet = '0123456789ABCDEFGHJKLMNPQRSTUVWXYZ',\n                    check;\n                // First one is digit\n                if (/^[0-9]{1}$/.test(value.charAt(0))) {\n                    check = alphabet.indexOf(value.charAt(0)) * 24 + alphabet.indexOf(value.charAt(1)) - 10;\n                } else {\n                    check = alphabet.indexOf(value.charAt(0)) * 34 + alphabet.indexOf(value.charAt(1)) - 100;\n                }\n                return ((parseInt(value.substr(2), 10) + 1 + Math.floor(check / 11)) % 11) === (check % 11);\n            }\n        },\n\n        /**\n         * Validate United Kingdom VAT number\n         * Example:\n         * - Valid: GB980780684\n         * - Invalid: GB802311781\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _gb: function(value) {\n            if (/^GB[0-9]{9}$/.test(value)             /* Standard */\n                || /^GB[0-9]{12}$/.test(value)         /* Branches */\n                || /^GBGD[0-9]{3}$/.test(value)        /* Government department */\n                || /^GBHA[0-9]{3}$/.test(value)        /* Health authority */\n                || /^GB(GD|HA)8888[0-9]{5}$/.test(value))\n            {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{9}$/.test(value)\n                && !/^[0-9]{12}$/.test(value)\n                && !/^GD[0-9]{3}$/.test(value)\n                && !/^HA[0-9]{3}$/.test(value)\n                && !/^(GD|HA)8888[0-9]{5}$/.test(value))\n            {\n                return false;\n            }\n\n            var length = value.length;\n            if (length === 5) {\n                var firstTwo  = value.substr(0, 2),\n                    lastThree = parseInt(value.substr(2), 10);\n                return ('GD' === firstTwo && lastThree < 500) || ('HA' === firstTwo && lastThree >= 500);\n            } else if (length === 11 && ('GD8888' === value.substr(0, 6) || 'HA8888' === value.substr(0, 6))) {\n                if (('GD' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) >= 500)\n                    || ('HA' === value.substr(0, 2) && parseInt(value.substr(6, 3), 10) < 500))\n                {\n                    return false;\n                }\n                return (parseInt(value.substr(6, 3), 10) % 97 === parseInt(value.substr(9, 2), 10));\n            } else if (length === 9 || length === 12) {\n                var sum    = 0,\n                    weight = [8, 7, 6, 5, 4, 3, 2, 10, 1];\n                for (var i = 0; i < 9; i++) {\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\n                }\n                sum = sum % 97;\n\n                if (parseInt(value.substr(0, 3), 10) >= 100) {\n                    return (sum === 0 || sum === 42 || sum === 55);\n                } else {\n                    return (sum === 0);\n                }\n            }\n\n            return true;\n        },\n\n        /**\n         * Validate Greek VAT number\n         * Examples:\n         * - Valid: GR023456780, EL094259216\n         * - Invalid: EL123456781\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _gr: function(value) {\n            if (/^(GR|EL)[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            if (value.length === 8) {\n                value = '0' + value;\n            }\n\n            var sum    = 0,\n                weight = [256, 128, 64, 32, 16, 8, 4, 2];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = (sum % 11) % 10;\n\n            return (sum + '' === value.substr(8, 1));\n        },\n\n        // EL is traditionally prefix of Greek VAT numbers\n        _el: function(value) {\n            return this._gr(value);\n        },\n\n        /**\n         * Validate Hungarian VAT number\n         * Examples:\n         * - Valid: HU12892312\n         * - Invalid: HU12892313\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _hu: function(value) {\n            if (/^HU[0-9]{8}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{8}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [9, 7, 3, 1, 9, 7, 3, 1];\n\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            return (sum % 10 === 0);\n        },\n\n        /**\n         * Validate Croatian VAT number\n         * Examples:\n         * - Valid: HR33392005961\n         * - Invalid: HR33392005962\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _hr: function(value) {\n            if (/^HR[0-9]{11}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{11}$/.test(value)) {\n                return false;\n            }\n\n            return $.fn.bootstrapValidator.helpers.mod11And10(value);\n        },\n\n        /**\n         * Validate Irish VAT number\n         * Examples:\n         * - Valid: IE6433435F, IE6433435OA, IE8D79739I\n         * - Invalid: IE8D79738J\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _ie: function(value) {\n            if (/^IE[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{1}[0-9A-Z\\*\\+]{1}[0-9]{5}[A-Z]{1,2}$/.test(value)) {\n                return false;\n            }\n\n            var getCheckDigit = function(value) {\n                while (value.length < 7) {\n                    value = '0' + value;\n                }\n                var alphabet = 'WABCDEFGHIJKLMNOPQRSTUV',\n                    sum      = 0;\n                for (var i = 0; i < 7; i++) {\n                    sum += parseInt(value.charAt(i), 10) * (8 - i);\n                }\n                sum += 9 * alphabet.indexOf(value.substr(7));\n                return alphabet[sum % 23];\n            };\n\n            // The first 7 characters are digits\n            if (/^[0-9]+$/.test(value.substr(0, 7))) {\n                // New system\n                return value.charAt(7) === getCheckDigit(value.substr(0, 7) + value.substr(8) + '');\n            } else if ('ABCDEFGHIJKLMNOPQRSTUVWXYZ+*'.indexOf(value.charAt(1)) !== -1) {\n                // Old system\n                return value.charAt(7) === getCheckDigit(value.substr(2, 5) + value.substr(0, 1) + '');\n            }\n\n            return true;\n        },\n\n        /**\n         * Validate Icelandic VAT (VSK) number\n         * Examples:\n         * - Valid: 12345, 123456\n         * - Invalid: 1234567\n         *\n         * @params {String} value VAT number\n         * @returns {Boolean}\n         */\n        _is: function(value) {\n            if (/^IS[0-9]{5,6}$/.test(value)) {\n                value = value.substr(2);\n            }\n            return /^[0-9]{5,6}$/.test(value);\n        },\n\n        /**\n         * Validate Italian VAT number, which consists of 11 digits.\n         * - First 7 digits are a company identifier\n         * - Next 3 are the province of residence\n         * - The last one is a check digit\n         *\n         * Examples:\n         * - Valid: IT00743110157\n         * - Invalid: IT00743110158\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _it: function(value) {\n            if (/^IT[0-9]{11}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{11}$/.test(value)) {\n                return false;\n            }\n\n            if (parseInt(value.substr(0, 7), 10) === 0) {\n                return false;\n            }\n\n            var lastThree = parseInt(value.substr(7, 3), 10);\n            if ((lastThree < 1) || (lastThree > 201) && lastThree !== 999 && lastThree !== 888) {\n                return false;\n            }\n\n            return $.fn.bootstrapValidator.helpers.luhn(value);\n        },\n\n        /**\n         * Validate Lithuanian VAT number\n         * It can be:\n         * - 9 digits, for legal entities\n         * - 12 digits, for temporarily registered taxpayers\n         *\n         * Examples:\n         * - Valid: LT119511515, LT100001919017, LT100004801610\n         * - Invalid: LT100001919018\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _lt: function(value) {\n            if (/^LT([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^([0-9]{7}1[0-9]{1}|[0-9]{10}1[0-9]{1})$/.test(value)) {\n                return false;\n            }\n\n            var length = value.length,\n                sum    = 0,\n                i;\n            for (i = 0; i < length - 1; i++) {\n                sum += parseInt(value.charAt(i), 10) * (1 + i % 9);\n            }\n            var check = sum % 11;\n            if (check === 10) {\n                sum = 0;\n                for (i = 0; i < length - 1; i++) {\n                    sum += parseInt(value.charAt(i), 10) * (1 + (i + 2) % 9);\n                }\n            }\n            check = check % 11 % 10;\n            return (check + '' === value.charAt(length - 1));\n        },\n\n        /**\n         * Validate Luxembourg VAT number\n         * Examples:\n         * - Valid: LU15027442\n         * - Invalid: LU15027443\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _lu: function(value) {\n            if (/^LU[0-9]{8}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{8}$/.test(value)) {\n                return false;\n            }\n\n            return ((parseInt(value.substr(0, 6), 10) % 89) + '' === value.substr(6, 2));\n        },\n\n        /**\n         * Validate Latvian VAT number\n         * Examples:\n         * - Valid: LV40003521600, LV16117519997\n         * - Invalid: LV40003521601, LV16137519997\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _lv: function(value) {\n            if (/^LV[0-9]{11}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{11}$/.test(value)) {\n                return false;\n            }\n\n            var first  = parseInt(value.charAt(0), 10),\n                sum    = 0,\n                weight = [],\n                i,\n                length = value.length;\n            if (first > 3) {\n                // Legal entity\n                sum    = 0;\n                weight = [9, 1, 4, 8, 3, 10, 2, 5, 7, 6, 1];\n                for (i = 0; i < length; i++) {\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\n                }\n                sum = sum % 11;\n                return (sum === 3);\n            } else {\n                // Check birth date\n                var day   = parseInt(value.substr(0, 2), 10),\n                    month = parseInt(value.substr(2, 2), 10),\n                    year  = parseInt(value.substr(4, 2), 10);\n                year = year + 1800 + parseInt(value.charAt(6), 10) * 100;\n\n                if (!$.fn.bootstrapValidator.helpers.date(year, month, day)) {\n                    return false;\n                }\n\n                // Check personal code\n                sum    = 0;\n                weight = [10, 5, 8, 4, 2, 1, 6, 3, 7, 9];\n                for (i = 0; i < length - 1; i++) {\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\n                }\n                sum = (sum + 1) % 11 % 10;\n                return (sum + '' === value.charAt(length - 1));\n            }\n        },\n\n        /**\n         * Validate Maltese VAT number\n         * Examples:\n         * - Valid: MT11679112\n         * - Invalid: MT11679113\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _mt: function(value) {\n            if (/^MT[0-9]{8}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{8}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [3, 4, 6, 7, 8, 9, 10, 1];\n\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            return (sum % 37 === 0);\n        },\n\n        /**\n         * Validate Dutch VAT number\n         * Examples:\n         * - Valid: NL004495445B01\n         * - Invalid: NL123456789B90\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _nl: function(value) {\n            if (/^NL[0-9]{9}B[0-9]{2}$/.test(value)) {\n               value = value.substr(2);\n            }\n            if (!/^[0-9]{9}B[0-9]{2}$/.test(value)) {\n               return false;\n            }\n\n            var sum    = 0,\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            sum = sum % 11;\n            if (sum > 9) {\n                sum = 0;\n            }\n            return (sum + '' === value.substr(8, 1));\n        },\n\n        /**\n         * Validate Norwegian VAT number\n         *\n         * @see http://www.brreg.no/english/coordination/number.html\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _no: function(value) {\n            if (/^NO[0-9]{9}$/.test(value)) {\n               value = value.substr(2);\n            }\n            if (!/^[0-9]{9}$/.test(value)) {\n               return false;\n            }\n\n            var sum    = 0,\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            sum = 11 - sum % 11;\n            if (sum === 11) {\n                sum = 0;\n            }\n            return (sum + '' === value.substr(8, 1));\n        },\n\n        /**\n         * Validate Polish VAT number\n         * Examples:\n         * - Valid: PL8567346215\n         * - Invalid: PL8567346216\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _pl: function(value) {\n            if (/^PL[0-9]{10}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{10}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [6, 5, 7, 2, 3, 4, 5, 6, 7, -1];\n\n            for (var i = 0; i < 10; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            return (sum % 11 === 0);\n        },\n\n        /**\n         * Validate Portuguese VAT number\n         * Examples:\n         * - Valid: PT501964843\n         * - Invalid: PT501964842\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _pt: function(value) {\n            if (/^PT[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [9, 8, 7, 6, 5, 4, 3, 2];\n\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = 11 - sum % 11;\n            if (sum > 9) {\n                sum = 0;\n            }\n            return (sum + '' === value.substr(8, 1));\n        },\n\n        /**\n         * Validate Romanian VAT number\n         * Examples:\n         * - Valid: RO18547290\n         * - Invalid: RO18547291\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _ro: function(value) {\n            if (/^RO[1-9][0-9]{1,9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[1-9][0-9]{1,9}$/.test(value)) {\n                return false;\n            }\n\n            var length = value.length,\n                weight = [7, 5, 3, 2, 1, 7, 5, 3, 2].slice(10 - length),\n                sum    = 0;\n            for (var i = 0; i < length - 1; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n\n            sum = (10 * sum) % 11 % 10;\n            return (sum + '' === value.substr(length - 1, 1));\n        },\n\n        /**\n         * Validate Russian VAT number (Taxpayer Identification Number - INN)\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _ru: function(value) {\n            if (/^RU([0-9]{10}|[0-9]{12})$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^([0-9]{10}|[0-9]{12})$/.test(value)) {\n                return false;\n            }\n\n            var i = 0;\n            if (value.length === 10) {\n                var sum    = 0,\n                    weight = [2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n                for (i = 0; i < 10; i++) {\n                    sum += parseInt(value.charAt(i), 10) * weight[i];\n                }\n                sum = sum % 11;\n                if (sum > 9) {\n                    sum = sum % 10;\n                }\n\n                return (sum + '' === value.substr(9, 1));\n            } else if (value.length === 12) {\n                var sum1    = 0,\n                    weight1 = [7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0],\n                    sum2    = 0,\n                    weight2 = [3, 7, 2, 4, 10, 3, 5, 9, 4, 6, 8, 0];\n\n                for (i = 0; i < 11; i++) {\n                    sum1 += parseInt(value.charAt(i), 10) * weight1[i];\n                    sum2 += parseInt(value.charAt(i), 10) * weight2[i];\n                }\n                sum1 = sum1 % 11;\n                if (sum1 > 9) {\n                    sum1 = sum1 % 10;\n                }\n                sum2 = sum2 % 11;\n                if (sum2 > 9) {\n                    sum2 = sum2 % 10;\n                }\n\n                return (sum1 + '' === value.substr(10, 1) && sum2 + '' === value.substr(11, 1));\n            }\n\n            return false;\n        },\n\n        /**\n         * Validate Serbian VAT number\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _rs: function(value) {\n            if (/^RS[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            var sum  = 10,\n                temp = 0;\n            for (var i = 0; i < 8; i++) {\n                temp = (parseInt(value.charAt(i), 10) + sum) % 10;\n                if (temp === 0) {\n                    temp = 10;\n                }\n                sum = (2 * temp) % 11;\n            }\n\n            return ((sum + parseInt(value.substr(8, 1), 10)) % 10 === 1);\n        },\n\n        /**\n         * Validate Swedish VAT number\n         * Examples:\n         * - Valid: SE123456789701\n         * - Invalid: SE123456789101\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _se: function(value) {\n            if (/^SE[0-9]{10}01$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{10}01$/.test(value)) {\n                return false;\n            }\n\n            value = value.substr(0, 10);\n            return $.fn.bootstrapValidator.helpers.luhn(value);\n        },\n\n        /**\n         * Validate Slovenian VAT number\n         * Examples:\n         * - Valid: SI50223054\n         * - Invalid: SI50223055\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _si: function(value) {\n            if (/^SI[0-9]{8}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[0-9]{8}$/.test(value)) {\n                return false;\n            }\n\n            var sum    = 0,\n                weight = [8, 7, 6, 5, 4, 3, 2];\n\n            for (var i = 0; i < 7; i++) {\n                sum += parseInt(value.charAt(i), 10) * weight[i];\n            }\n            sum = 11 - sum % 11;\n            if (sum === 10) {\n                sum = 0;\n            }\n            return (sum + '' === value.substr(7, 1));\n        },\n\n        /**\n         * Validate Slovak VAT number\n         * Examples:\n         * - Valid: SK2022749619\n         * - Invalid: SK2022749618\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _sk: function(value) {\n            if (/^SK[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[1-9][0-9][(2-4)|(6-9)][0-9]{7}$/.test(value)) {\n                return false;\n            }\n\n            return (parseInt(value, 10) % 11 === 0);\n        },\n\n        /**\n         * Validate Venezuelan VAT number (RIF)\n         * Examples:\n         * - Valid: VEJ309272292, VEV242818101, VEJ000126518, VEJ000458324, J309272292, V242818101, J000126518, J000458324\n         * - Invalid: VEJ309272293, VEV242818100, J000126519, J000458323\n         *\n         * @param {String} value VAT number\n         * @returns {Boolean}\n         */\n        _ve: function(value) {\n            if (/^VE[VEJPG][0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n            if (!/^[VEJPG][0-9]{9}$/.test(value)) {\n                return false;\n            }\n\n            var types  = {\n                    'V': 4,\n                    'E': 8,\n                    'J': 12,\n                    'P': 16,\n                    'G': 20\n                },\n                sum    = types[value.charAt(0)],\n                weight = [3, 2, 7, 6, 5, 4, 3, 2];\n\n            for (var i = 0; i < 8; i++) {\n                sum += parseInt(value.charAt(i + 1), 10) * weight[i];\n            }\n\n            sum = 11 - sum % 11;\n            if (sum === 11 || sum === 10) {\n                sum = 0;\n            }\n            return (sum + '' === value.substr(9, 1));\n        },\n\n        /**\n         * Validate South African VAT number\n         * Examples:\n         * - Valid: 4012345678\n         * - Invalid: 40123456789, 3012345678\n         *\n         * @params {String} value VAT number\n         * @returns {Boolean}\n         */\n         _za: function(value) {\n            if (/^ZA4[0-9]{9}$/.test(value)) {\n                value = value.substr(2);\n            }\n\n            return /^4[0-9]{9}$/.test(value);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.vin = $.extend($.fn.bootstrapValidator.i18n.vin || {}, {\n        'default': 'Please enter a valid VIN number'\n    });\n\n    $.fn.bootstrapValidator.validators.vin = {\n        /**\n         * Validate an US VIN (Vehicle Identification Number)\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * @returns {Boolean}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '') {\n                return true;\n            }\n\n            // Don't accept I, O, Q characters\n            if (!/^[a-hj-npr-z0-9]{8}[0-9xX][a-hj-npr-z0-9]{8}$/i.test(value)) {\n                return false;\n            }\n\n            value = value.toUpperCase();\n            var chars   = {\n                    A: 1,   B: 2,   C: 3,   D: 4,   E: 5,   F: 6,   G: 7,   H: 8,\n                    J: 1,   K: 2,   L: 3,   M: 4,   N: 5,           P: 7,           R: 9,\n                            S: 2,   T: 3,   U: 4,   V: 5,   W: 6,   X: 7,   Y: 8,   Z: 9,\n                    '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '0': 0\n                },\n                weights = [8, 7, 6, 5, 4, 3, 2, 10, 0, 9, 8, 7, 6, 5, 4, 3, 2],\n                sum     = 0,\n                length  = value.length;\n            for (var i = 0; i < length; i++) {\n                sum += chars[value.charAt(i) + ''] * weights[i];\n            }\n\n            var reminder = sum % 11;\n            if (reminder === 10) {\n                reminder = 'X';\n            }\n\n            return (reminder + '') === value.charAt(8);\n        }\n    };\n}(window.jQuery));\n;(function($) {\n    $.fn.bootstrapValidator.i18n.zipCode = $.extend($.fn.bootstrapValidator.i18n.zipCode || {}, {\n        'default': 'Please enter a valid postal code',\n        countryNotSupported: 'The country code %s is not supported',\n        country: 'Please enter a valid postal code in %s',\n        countries: {\n            AT: 'Austria',\n            BR: 'Brazil',\n            CA: 'Canada',\n            CH: 'Switzerland',\n            CZ: 'Czech Republic',\n            DE: 'Germany',\n            DK: 'Denmark',\n            FR: 'France',\n            GB: 'United Kingdom',\n            IE: 'Ireland',\n            IT: 'Italy',\n            MA: 'Morocco',\n            NL: 'Netherlands',\n            PT: 'Portugal',\n            RO: 'Romania',\n            RU: 'Russia',\n            SE: 'Sweden',\n            SG: 'Singapore',\n            SK: 'Slovakia',\n            US: 'USA'\n        }\n    });\n\n    $.fn.bootstrapValidator.validators.zipCode = {\n        html5Attributes: {\n            message: 'message',\n            country: 'country'\n        },\n\n        COUNTRY_CODES: [ 'AT', 'BR', 'CA', 'CH', 'CZ', 'DE', 'DK', 'FR', 'GB', 'IE', 'IT', 'MA', 'NL', 'PT', 'RO', 'RU', 'SE', 'SG', 'SK', 'US'],\n\n        /**\n         * Return true if and only if the input value is a valid country zip code\n         *\n         * @param {BootstrapValidator} validator The validator plugin instance\n         * @param {jQuery} $field Field element\n         * @param {Object} options Consist of key:\n         * - message: The invalid message\n         * - country: The country\n         *\n         * The country can be defined by:\n         * - An ISO 3166 country code\n         * - Name of field which its value defines the country code\n         * - Name of callback function that returns the country code\n         * - A callback function that returns the country code\n         *\n         * callback: function(value, validator, $field) {\n         *      // value is the value of field\n         *      // validator is the BootstrapValidator instance\n         *      // $field is jQuery element representing the field\n         * }\n         *\n         * @returns {Boolean|Object}\n         */\n        validate: function(validator, $field, options) {\n            var value = $field.val();\n            if (value === '' || !options.country) {\n                return true;\n            }\n\n            var country = options.country;\n            if (typeof country !== 'string' || $.inArray(country, this.COUNTRY_CODES) === -1) {\n                // Try to determine the country\n                country = validator.getDynamicOption($field, country);\n            }\n\n            if (!country || $.inArray(country.toUpperCase(), this.COUNTRY_CODES) === -1) {\n                return { valid: false, message: $.fn.bootstrapValidator.helpers.format($.fn.bootstrapValidator.i18n.zipCode.countryNotSupported, country) };\n            }\n\n            var isValid = false;\n            country = country.toUpperCase();\n            switch (country) {\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Austria\n                case 'AT':\n                    isValid = /^([1-9]{1})(\\d{3})$/.test(value);\n                    break;\n\n                case 'BR':\n                    isValid = /^(\\d{2})([\\.]?)(\\d{3})([\\-]?)(\\d{3})$/.test(value);\n                    break;\n\n                case 'CA':\n                    isValid = /^(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|X|Y){1}[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}\\s?[0-9]{1}(?:A|B|C|E|G|H|J|K|L|M|N|P|R|S|T|V|W|X|Y|Z){1}[0-9]{1}$/i.test(value);\n                    break;\n\n                case 'CH':\n                    isValid = /^([1-9]{1})(\\d{3})$/.test(value);\n                    break;\n\n                case 'CZ':\n                    // Test: http://regexr.com/39hhr\n                    isValid = /^(\\d{3})([ ]?)(\\d{2})$/.test(value);\n                    break;\n\n                // http://stackoverflow.com/questions/7926687/regular-expression-german-zip-codes\n                case 'DE':\n                    isValid = /^(?!01000|99999)(0[1-9]\\d{3}|[1-9]\\d{4})$/.test(value);\n                    break;\n\n                case 'DK':\n                    isValid = /^(DK(-|\\s)?)?\\d{4}$/i.test(value);\n                    break;\n\n                // http://en.wikipedia.org/wiki/Postal_codes_in_France\n                case 'FR':\n                    isValid = /^[0-9]{5}$/i.test(value);\n                    break;\n\n                case 'GB':\n                    isValid = this._gb(value);\n                    break;\n\n                // http://www.eircode.ie/docs/default-source/Common/prepare-your-business-for-eircode---published-v2.pdf?sfvrsn=2\n                // Test: http://refiddle.com/1kpl\n                case 'IE':\n                    isValid = /^(D6W|[ACDEFHKNPRTVWXY]\\d{2})\\s[0-9ACDEFHKNPRTVWXY]{4}$/.test(value);\n                    break;\n\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Italy\n                case 'IT':\n                    isValid = /^(I-|IT-)?\\d{5}$/i.test(value);\n                    break;\n\n                // http://en.wikipedia.org/wiki/List_of_postal_codes_in_Morocco\n                case 'MA':\n                    isValid = /^[1-9][0-9]{4}$/i.test(value);\n                    break;\n\n                // http://en.wikipedia.org/wiki/Postal_codes_in_the_Netherlands\n                case 'NL':\n                    isValid = /^[1-9][0-9]{3} ?(?!sa|sd|ss)[a-z]{2}$/i.test(value);\n                    break;\n\n                // Test: http://refiddle.com/1l2t\n                case 'PT':\n                    isValid = /^[1-9]\\d{3}-\\d{3}$/.test(value);\n                    break;\n\n                case 'RO':\n                    isValid = /^(0[1-8]{1}|[1-9]{1}[0-5]{1})?[0-9]{4}$/i.test(value);\n                    break;\n\n                case 'RU':\n                    isValid = /^[0-9]{6}$/i.test(value);\n                    break;\n\n                case 'SE':\n                    isValid = /^(S-)?\\d{3}\\s?\\d{2}$/i.test(value);\n                    break;\n\n                case 'SG':\n                    isValid = /^([0][1-9]|[1-6][0-9]|[7]([0-3]|[5-9])|[8][0-2])(\\d{4})$/i.test(value);\n                    break;\n\n                case 'SK':\n                    // Test: http://regexr.com/39hhr\n                    isValid = /^(\\d{3})([ ]?)(\\d{2})$/.test(value);\n                    break;\n\n                case 'US':\n                /* falls through */\n                default:\n                    isValid = /^\\d{4,5}([\\-]?\\d{4})?$/.test(value);\n                    break;\n            }\n\n            return {\n                valid: isValid,\n                message: $.fn.bootstrapValidator.helpers.format(options.message || $.fn.bootstrapValidator.i18n.zipCode.country, $.fn.bootstrapValidator.i18n.zipCode.countries[country])\n            };\n        },\n\n        /**\n         * Validate United Kingdom postcode\n         * Examples:\n         * - Standard: EC1A 1BB, W1A 1HQ, M1 1AA, B33 8TH, CR2 6XH, DN55 1PT\n         * - Special cases:\n         * AI-2640, ASCN 1ZZ, GIR 0AA\n         *\n         * @see http://en.wikipedia.org/wiki/Postcodes_in_the_United_Kingdom\n         * @param {String} value The postcode\n         * @returns {Boolean}\n         */\n        _gb: function(value) {\n            var firstChar  = '[ABCDEFGHIJKLMNOPRSTUWYZ]',     // Does not accept QVX\n                secondChar = '[ABCDEFGHKLMNOPQRSTUVWXY]',     // Does not accept IJZ\n                thirdChar  = '[ABCDEFGHJKPMNRSTUVWXY]',\n                fourthChar = '[ABEHMNPRVWXY]',\n                fifthChar  = '[ABDEFGHJLNPQRSTUWXYZ]',\n                regexps    = [\n                    // AN NAA, ANN NAA, AAN NAA, AANN NAA format\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '?[0-9]{1,2})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\n                    // ANA NAA\n                    new RegExp('^(' + firstChar + '{1}[0-9]{1}' + thirdChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\n                    // AANA NAA\n                    new RegExp('^(' + firstChar + '{1}' + secondChar + '{1}?[0-9]{1}' + fourthChar + '{1})(\\\\s*)([0-9]{1}' + fifthChar + '{2})$', 'i'),\n\n                    new RegExp('^(BF1)(\\\\s*)([0-6]{1}[ABDEFGHJLNPQRST]{1}[ABDEFGHJLNPQRSTUWZYZ]{1})$', 'i'),        // BFPO postcodes\n                    /^(GIR)(\\s*)(0AA)$/i,                       // Special postcode GIR 0AA\n                    /^(BFPO)(\\s*)([0-9]{1,4})$/i,               // Standard BFPO numbers\n                    /^(BFPO)(\\s*)(c\\/o\\s*[0-9]{1,3})$/i,        // c/o BFPO numbers\n                    /^([A-Z]{4})(\\s*)(1ZZ)$/i,                  // Overseas Territories\n                    /^(AI-2640)$/i                              // Anguilla\n                ];\n            for (var i = 0; i < regexps.length; i++) {\n                if (regexps[i].test(value)) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n    };\n}(window.jQuery));\nrequire('./language/zh_CN');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/bootstrapvalidator/dist/js/bootstrapValidator.js\n// module id = Sktq\n// module chunks = 1","// 引入二维码生成器\r\n$(document).ready(function(){\r\n    $('.wx-chat').on('click',function(){\r\n        $('#form').addClass('on');\r\n        $('.code-qq').removeClass('on');\r\n        $('.wx-chat > img').attr('src', './images/login_wechat_selected.png');\r\n        $('.p-word > img').attr('src', './images/login_account.png');\r\n    })\r\n    $('.p-word').on('click',function(){\r\n        $('.code-qq').addClass('on');\r\n        $('#form').removeClass('on');\r\n        $('.wx-chat > img').attr('src', './images/login_wechat.png');\r\n        $('.p-word > img').attr('src', './images/login_account_selected.png');\r\n        \r\n    })\r\n    /* 登录界面表单验证 */\r\n    $('#form-input').bootstrapValidator({\r\n        message: 'This value is not valid',\r\n        //excluded:[\":hidden\",\":disabled\",\":not(visible)\"] ,//bootstrapValidator的默认配置\r\n        excluded: ':disabled',\r\n        feedbackIcons: {\r\n            valid: 'iconfont icon-zhengque',\r\n            invalid: 'iconfont icon-cuowu',\r\n            validating:'iconfont icon-cuowu'\r\n        },\r\n        fields: {\r\n            username: {\r\n                message: '用户名不能为空',//默认提示信息\r\n                validators: {\r\n                    notEmpty: {\r\n                        message: '用户名必填不能为空'\r\n                    },\r\n                    stringLength: {\r\n                        min: 2,\r\n                        max: 30,\r\n                        message: '用户名长度不能小于2位或超过30位'\r\n                    },\r\n                    regexp: {\r\n                        regexp: /^[a-zA-Z0-9_\\.]+$/,\r\n                        message: '用户名只能由字母、数字、点和下划线组成。'\r\n                    },\r\n                }\r\n            },\r\n            password:{\r\n                message: '请输入密码',//默认提示信息\r\n                validators: {\r\n                    notEmpty: {\r\n                        message: '密码不能为空！'\r\n                    },\r\n                    stringLength: {\r\n                        min: 6,\r\n                        max: 30,\r\n                        message: '密码长度不能小于6位或超过30位'\r\n                    },\r\n                    regexp: {\r\n                        regexp: /^[a-zA-Z0-9_\\.]+$/,\r\n                        message: '密码只能由字母、数字和下划线。'\r\n                    },\r\n                }\r\n            }\r\n        }\r\n    }).on('submit', function (e, data) {\r\n        console.log(e)\r\n    });\r\n})\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/login.js\n// module id = iwok\n// module chunks = 1"],"sourceRoot":""}